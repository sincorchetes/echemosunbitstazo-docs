{"config":{"indexing":"full","lang":["es"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u00a1Bienvenidos a Echemos un bitstazo! Este es mi espacio de documentaci\u00f3n personal d\u00f3nde almaceno todo tipo de conocimientos relacionados con la administraci\u00f3n de sistemas y redes inform\u00e1ticas; desarrollo y otros temas varios de IT. NOTA: Si est\u00e1s buscando mi blog, puedes acceder al contenido desde mi repositorio. .. GitHub: https://github.com/sincorchetes/echemosunbitstazo","title":"\u00a1Bienvenidos a Echemos un bitstazo!"},{"location":"#bienvenidos-a-echemos-un-bitstazo","text":"Este es mi espacio de documentaci\u00f3n personal d\u00f3nde almaceno todo tipo de conocimientos relacionados con la administraci\u00f3n de sistemas y redes inform\u00e1ticas; desarrollo y otros temas varios de IT. NOTA: Si est\u00e1s buscando mi blog, puedes acceder al contenido desde mi repositorio. .. GitHub: https://github.com/sincorchetes/echemosunbitstazo","title":"\u00a1Bienvenidos a Echemos un bitstazo!"},{"location":"automatizacion/ansible/","text":"Introducci\u00f3n Playbooks Concepto Los Playbooks permiten escribir guiones que permiten automatizar multitud de procesos y tareas sin tener que ir ejecutando cada uno de los comandos en modo ad-hoc en el resto de servidores. Formato Los playbooks utilizan un lenguaje de datos serializado llamado YAML. M\u00f3dulos Son librer\u00edas desarrolladas para facilitar la gesti\u00f3n de determinadas tareas como la decompresi\u00f3n/compresi\u00f3n de archivos; cambios de permisos; gesti\u00f3n de paqueter\u00eda\u2026etc Aplicaciones Concatenar cadena con un valor de una variable \"{{ '.'.join(('www',dominio))}}\"</code> Actualizar todos los paquetes --- - name: Actualizar paqueter\u00eda hosts: \"{{ host }}\" tasks: - name: Actualizando la paqueter\u00eda del sistema dnf: name: \"*\" state: latest Crear un playbook que muestre la fecha/hora del sistema --- - name: Obtener fecha/hora hosts: {{ host }} tasks: - name: Obtener fehca/hora del sistema shell: date Vault Encriptar datos Ansible Vault es una funcionalidad que permite encriptar contrase\u00f1as en archivos. Crear vault ansible-vault create nombre_archivo Editar informaci\u00f3n del vault ansible-vault edit nombre_archivo Usando el vault en un playbook Incluimos el vault en el apartado vars_files: - name: test encrypted vault file hosts: localhost connection: local vars_files: - foo_vault_file.yml tasks: - name: debug secret debug: var: my_variable Ejecutamos el playbook: ansible-playbook test_vault_file.yml --ask-vault-pass","title":"Introducci\u00f3n"},{"location":"automatizacion/ansible/#introduccion","text":"","title":"Introducci\u00f3n"},{"location":"automatizacion/ansible/#playbooks","text":"","title":"Playbooks"},{"location":"automatizacion/ansible/#concepto","text":"Los Playbooks permiten escribir guiones que permiten automatizar multitud de procesos y tareas sin tener que ir ejecutando cada uno de los comandos en modo ad-hoc en el resto de servidores.","title":"Concepto"},{"location":"automatizacion/ansible/#formato","text":"Los playbooks utilizan un lenguaje de datos serializado llamado YAML.","title":"Formato"},{"location":"automatizacion/ansible/#modulos","text":"Son librer\u00edas desarrolladas para facilitar la gesti\u00f3n de determinadas tareas como la decompresi\u00f3n/compresi\u00f3n de archivos; cambios de permisos; gesti\u00f3n de paqueter\u00eda\u2026etc","title":"M\u00f3dulos"},{"location":"automatizacion/ansible/#aplicaciones","text":"","title":"Aplicaciones"},{"location":"automatizacion/ansible/#concatenar-cadena-con-un-valor-de-una-variable","text":"\"{{ '.'.join(('www',dominio))}}\"</code>","title":"Concatenar cadena con un valor de una variable"},{"location":"automatizacion/ansible/#actualizar-todos-los-paquetes","text":"--- - name: Actualizar paqueter\u00eda hosts: \"{{ host }}\" tasks: - name: Actualizando la paqueter\u00eda del sistema dnf: name: \"*\" state: latest","title":"Actualizar todos los paquetes"},{"location":"automatizacion/ansible/#crear-un-playbook-que-muestre-la-fechahora-del-sistema","text":"--- - name: Obtener fecha/hora hosts: {{ host }} tasks: - name: Obtener fehca/hora del sistema shell: date","title":"Crear un playbook que muestre la fecha/hora del sistema"},{"location":"automatizacion/ansible/#vault","text":"","title":"Vault"},{"location":"automatizacion/ansible/#encriptar-datos","text":"Ansible Vault es una funcionalidad que permite encriptar contrase\u00f1as en archivos.","title":"Encriptar datos"},{"location":"automatizacion/ansible/#crear-vault","text":"ansible-vault create nombre_archivo","title":"Crear vault"},{"location":"automatizacion/ansible/#editar-informacion-del-vault","text":"ansible-vault edit nombre_archivo","title":"Editar informaci\u00f3n del vault"},{"location":"automatizacion/ansible/#usando-el-vault-en-un-playbook","text":"Incluimos el vault en el apartado vars_files: - name: test encrypted vault file hosts: localhost connection: local vars_files: - foo_vault_file.yml tasks: - name: debug secret debug: var: my_variable Ejecutamos el playbook: ansible-playbook test_vault_file.yml --ask-vault-pass","title":"Usando el vault en un playbook"},{"location":"contenedores/docker/docker/","text":"Introducci\u00f3n Gesti\u00f3n de contenedores Lanzar un contenedor NGINX en modo segundo plano y que se ejecute en el puerto 80 sudo docker run -d -p 80:80 nginx Lanzar un contenedor NGINX en modo segundo plano y que se ejecute en el puerto 8080 sudo docker run -d -p 8080:80 nginx:latest Lanzar un contenedor con un nombre identificativo sudo docker run -d -n NGINX -p 80:80 nginx:latest Lanzar un contenedor para ejecutar cosas en \u00e9l sudo docker run -ti centos:latest /bin/bash Mapear una unidad del SO en un contenedor sudo docker run -ti -v /home/sincorchetes:/app centos:latest /bin/bash Listar los contenedores incluyendo los que no est\u00e1n en marcha sudo docker ps -a Listar los contenedores que solo est\u00e1n en marcha sudo docker ps Eliminar todos los contenedores incluyendo los que est\u00e1n en marcha, dieron error o no se han desplegado sudo docker rm -f $(docker ps -a | awk '{print $1}' | tail -n +2) Eliminar todos los contenedores solo lo que est\u00e1n en marcha sudo docker rm -f $(docker ps | awk '{print $1}' | tail -n +2)","title":"Introducci\u00f3n"},{"location":"contenedores/docker/docker/#introduccion","text":"","title":"Introducci\u00f3n"},{"location":"contenedores/docker/docker/#gestion-de-contenedores","text":"","title":"Gesti\u00f3n de contenedores"},{"location":"contenedores/docker/docker/#lanzar-un-contenedor-nginx-en-modo-segundo-plano-y-que-se-ejecute-en-el-puerto-80","text":"sudo docker run -d -p 80:80 nginx","title":"Lanzar un contenedor NGINX en modo segundo plano y que se ejecute en el puerto 80"},{"location":"contenedores/docker/docker/#lanzar-un-contenedor-nginx-en-modo-segundo-plano-y-que-se-ejecute-en-el-puerto-8080","text":"sudo docker run -d -p 8080:80 nginx:latest","title":"Lanzar un contenedor NGINX en modo segundo plano y que se ejecute en el puerto 8080"},{"location":"contenedores/docker/docker/#lanzar-un-contenedor-con-un-nombre-identificativo","text":"sudo docker run -d -n NGINX -p 80:80 nginx:latest","title":"Lanzar un contenedor con un nombre identificativo"},{"location":"contenedores/docker/docker/#lanzar-un-contenedor-para-ejecutar-cosas-en-el","text":"sudo docker run -ti centos:latest /bin/bash","title":"Lanzar un contenedor para ejecutar cosas en \u00e9l"},{"location":"contenedores/docker/docker/#mapear-una-unidad-del-so-en-un-contenedor","text":"sudo docker run -ti -v /home/sincorchetes:/app centos:latest /bin/bash","title":"Mapear una unidad del SO en un contenedor"},{"location":"contenedores/docker/docker/#listar-los-contenedores-incluyendo-los-que-no-estan-en-marcha","text":"sudo docker ps -a","title":"Listar los contenedores incluyendo los que no est\u00e1n en marcha"},{"location":"contenedores/docker/docker/#listar-los-contenedores-que-solo-estan-en-marcha","text":"sudo docker ps","title":"Listar los contenedores que solo est\u00e1n en marcha"},{"location":"contenedores/docker/docker/#eliminar-todos-los-contenedores-incluyendo-los-que-estan-en-marcha-dieron-error-o-no-se-han-desplegado","text":"sudo docker rm -f $(docker ps -a | awk '{print $1}' | tail -n +2)","title":"Eliminar todos los contenedores incluyendo los que est\u00e1n en marcha, dieron error o no se han desplegado"},{"location":"contenedores/docker/docker/#eliminar-todos-los-contenedores-solo-lo-que-estan-en-marcha","text":"sudo docker rm -f $(docker ps | awk '{print $1}' | tail -n +2)","title":"Eliminar todos los contenedores solo lo que est\u00e1n en marcha"},{"location":"desarrollo/python/","text":"Introducci\u00f3n Historia Python es un lenguaje de programaci\u00f3n interpretado, de alto nivel y de inter\u00e9s general. Este lenguaje tiene una filosof\u00eda de programaci\u00f3n que se centra en la legibilidad del c\u00f3digo, para ello implementa una serie de declaraciones y est\u00e1ndares que ha de respetarse para que el c\u00f3digo funcione como es la indentaci\u00f3n. Python es un lenguaje orientado a objetos que facilitan a los desarrolladores escribir un c\u00f3digo limpio, eficaz, l\u00f3gico y peque\u00f1o que sirve tanto para peque\u00f1os, como medianos y grandes proyectos. La primera versi\u00f3n de Python se public\u00f3 en el a\u00f1o 1991 por Guido van Rossum un programador holand\u00e9s graduado en matem\u00e1ticas y ciencias computacionales en la universidad de Amsterdam en 1982. Posteriormente se public\u00f3 la versi\u00f3n 2.0 el d\u00eda 16 de octubre del a\u00f1o 2000 y la versi\u00f3n 3.0 que se liber\u00f3 el 3 de diciembre de 2008. Actualmente las versiones 1.0 y 2.0 ya no est\u00e1n soportadas, esta \u00faltima dej\u00f3 de tener soporte el d\u00eda 31 de diciembre de 2019. Notas importantes Antes de seguir con este art\u00edculo es muy importante que sepamos que la versi\u00f3n con la que trabajaremos en las siguientes entragas es Python 3 . Python 2.7 no tiene m\u00e1s soporte desde el 31 de diciembre del 2019 . A parte de la versi\u00f3n, conviene saber que tenemos que leer mucho la documentaci\u00f3n oficial si no queremos perder horas y horas con las cl\u00e1sicas pruebas de Error/Acierto ( pruebo cosas al azar y lo que salga sali\u00f3 ). Tambi\u00e9n tenemos muchos recursos en l\u00ednea como Real Python que contienen muchos recursos bastante bien explicados; Full Stack Python tiene tambie\u0144 muchos recursos, ayudas\u2026 \u00bfC\u00f3mo usar Python? Sin duda un elemento imprescindible para poder trabajar con Python son los modos en los qu\u00e9 podemos trabajar con \u00e9l. Podemos hacerlo de dos formas, mediante int\u00e9rprete de comandos o elaborando un archivo de Python. Int\u00e9rprete de comandos Si estas en Linux o BSD, puedes ver las m\u00faltiples (si hay), versiones instaladas en tu sistema si haces un simple: whereis python ver\u00e1s una salida como esta: .. code-block:: bash python: /usr/bin/python3.7-config /usr/bin/python2.7 /usr/bin/python3.7m-x86_64-config /usr/bin/python /usr/bin/python3.7 /usr/bin/python3.7m /usr/bin/python3.7m-config /usr/lib/python2.7 /usr/lib/python3.7 /usr/lib64/python2.7 /usr/lib64/python3.7 /usr/include/python2.7 /usr/include/python3.7m Como podemos ver, en mi sistema tengo instalados una versi\u00f3n de Python 3.7 como una 2.7. Es importante destacar que en el curso SIEMPRE trabajaremos con la rama 3.7 o superior porque la versi\u00f3n 2.7 qued\u00f3 fuera de soporte desde el 31 de diciembre de 2019 y que prestar\u00e9 m\u00e1s atenci\u00f3n a SO Linux que BSD. \u00bfC\u00f3mo s\u00e9 que versi\u00f3n tengo por defecto en el sistema? Si hacemos un ls /usr/bin |grep python veremos que un enlace simb\u00f3lico est\u00e1 apuntado a una versi\u00f3n concreta. lrwxrwxrwx. 1 root root 9 Jan 30 10:18 python -> ./python3 lrwxrwxrwx. 1 root root 9 Oct 21 15:13 python2 -> python2.7 -rwxr-xr-x. 1 root root 16072 Oct 21 15:13 python2.7 Tambi\u00e9n se puede saber desde el gestor de paquetes que utilices a menudo en tu distribuci\u00f3n de Linux o sistemas BSD y/o ejecutando python -V que este te devolver\u00e1 la versi\u00f3n: $ python -V Python 3.7.6 Acceder al int\u00e9rprete de Python Basta con que ejecutemos el comando python para ^ empezar a trabajar <https://docs.python.org/3.8/tutorial/interpreter.html> _ $ python Python 3.7.6 (default, Jan 8 2020, 19:59:22) [GCC 7.3.0] :: Anaconda, Inc. on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> Vemos una informaci\u00f3n de todo un poco, con qu\u00e9 compilador fue compilado Python, qu\u00e9 versi\u00f3n estamos utilizando\u2026etc Hay una sintaxis m\u00ednima que tenemos que entender del promp cuando usamos el int\u00e9rprete: >>> se refiere a un c\u00f3digo que puede ejecutarse sin identaci\u00f3n por ejemplo cuando definimos una variable, una funci\u00f3n\u2026 >>> variable = 1 \u2026 aqu\u00ed est\u00e1 mencionando que tenemos que indentar, es decir, a\u00f1adir los espacios (4) correspondientes para respetar la sintaxis de Python. >>> def func(): ... variable = 1 \u201cSALIDA\u201d: Cuando solo salen estas comillas simples, est\u00e1 informando de un valor o imprimiendo la salida de una funci\u00f3n, variable\u2026etc >>> import sys >>> sys.version '3.7.6 (default, Jan 8 2020, 19:59:22) \\n[GCC 7.3.0]' Usarlo como calculadora Se pueden realizar operaciones aritm\u00e9ticas ( ya las veremos m\u00e1s adelante ) como suma, resta, divisi\u00f3n, multiplicaci\u00f3n\u2026 >>> 3 + 2 5 \u00bfC\u00f3mo salir de la terminal? Para salir podemos usar la funci\u00f3n exit() o pulsar la combinaci\u00f3n de teclas Ctrl + C REPL tu int\u00e9rprete en l\u00ednea REPL.it es una p\u00e1gina que utilizar\u00e9 mucho para dinamizar los ejemplos, se trata de un int\u00e9rprete en l\u00ednea que permite crear un entorno peque\u00f1o de Python y poder trabajar con \u00e9l. En casi todos los ejemplos pondr\u00e9 un enlace para aquellas personas que quieran probar el c\u00f3digo y no dispongan de int\u00e9rprete. Creando un archivo Python Los archivos de Python tienen la extensi\u00f3n .py , y comienzan siempre declarando la ruta del int\u00e9rprete, a esto se le conoce como SheBang . Por lo general, se suele utilizar la siguiente cabecera para evitar solapamientos con la versi\u00f3n 2.7. `#!/usr/bin/env python3` Python 3 utiliza la codificaci\u00f3n UTF-8 por defecto , por lo que si queremos trabajar con otro tipo de codificaci\u00f3n tendremos que especificarla justamente debajo del SheBang. #!/usr/bin/env python3 # -*- coding: latin-1 -*- A partir de aqu\u00ed a\u00f1adimos nuestro c\u00f3digo. Tambi\u00e9n es importante, que se le den permisos de escritura al archivo de Python para poderlo ejecutar desde terminal, si no obtendremos el error de permisos: $ ./hola.py bash: ./hola.py: Permission denied $ chmod +x hola.py $ ./hola.py Hello world Ya que sabemos esto, cuando en los comandos de ejemplo haga referencia a los diferentes tipos de prompt ( >>> , ... o ' ' ) usamos directamente el int\u00e9rprete y cuando no lo haga, estamos haciendo un archivo en Python. \u00a1Una vez que sabemos esto, adelante! Comentarios Algo muy importante sobre todo en nuestro c\u00f3digo es comentar. Comentar nos permite recordar los cambios que hemos hecho en el c\u00f3digo o tener al menos un punto de retorno porque cuando llevas muchas horas programando y programando, y revisando\u2026 dejas el c\u00f3digo unos d\u00edas, y te costar\u00e1 mucho entender y comprender todo el c\u00f3digo de nuevo sin tener una ayuda de por qu\u00e9 decidimos hacer un cambio en la estructura, en el flujo del c\u00f3digo\u2026etc \u00bfC\u00f3mo se comenta en Python? Si quieres comentar una l\u00ednea, puedes usar: # Comentamos con la almohadilla Cuando queremos comentar m\u00faltiples l\u00edneas, utilizaremos esta sintaxis \"\"\" Este es un comentario multil\u00ednea. :D \"\"\" Ver ejemplo din\u00e1mico aqu\u00ed Identificadores Los identificadores son el nombre que se utilizan para identificar una variable, funci\u00f3n, clases o un objeto. Las principales reglas que se deben respetar son las siguientes: No se utilizan caracteres especiales o num\u00e9ricos menos ( _ ) que se puede utilizar como un identificador Las palabras clave no se utilizan Python discrimina de may\u00fasculas y min\u00fasculas por lo que no es lo mismo llamar a una funci\u00f3n o variable var si est\u00e1 definida como Var . Indentar es obligatorio, hay que respetar los espacios cuando se crean funciones, clases o m\u00e9todos. Variable Las variables permiten almacenar un valor que le asignes como una cadena, un dato n\u00famerico, listas, tuplas\u2026 el tipo de valor lo veremos con m\u00e1s profundidad en entregas posteriores, pero hay que saber lo que hace este identificador y para que nos puede servir. >>> variable = \"Hello world\" Funciones Permiten ejecutar un fragmento de c\u00f3digo espec\u00edfico el cu\u00e1l puede solicitar o no datos para la ejecuci\u00f3n de dicho c\u00f3digo. >>> def nombre_funcion(argumentos): ... # Bloque de c\u00f3digo Los argumentos se separan por comas. Bucles Permiten recorrer un conjunto de datos como un set|lista|tupla|collection \u2026etc o ejecutarse desde un rango espec\u00edfico como por ejemplo, de 0 a 100 o de 1 a 5\u2026etc Bucle for >>> for x in a: ... # Bloque de c\u00f3digo Es el m\u00e1s com\u00fan. Clases Las clases son la plantilla de los objetos, Python es un lenguaje de programaci\u00f3n orientado a objetos, por lo que es indispensable este identificador. Propiedades Son los atributos que tiene una clase, a fin de cuentas es como usar variables en otro contexto de programaci\u00f3n. M\u00e9todos Son las funciones o acciones que tiene una clase. M\u00f3dulo Son fragmentos de c\u00f3digos externos o integrados en Python que realizan una serie de cosas, se puede conocer en otros lenguajes como librer\u00edas. Pero no nos alarmemos, todos estos identificadores los veremos m\u00e1s adelante de una forma m\u00e1s profunda. Palabras clave Python como otros lenguajes, tienen una serie de palabras que no se deben utilizar bajo ning\u00fan concepto para utilizarlos como identificadores. Podemos averiguar cu\u00e1les son desde su documentaci\u00f3n oficial o importando el m\u00f3dulo keyword y su propiedad .kwlist >>> import keyword >>> print(keyword.kwlist) Nos devolver\u00e1 esta salida: ['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] Nota Ver ejemplo din\u00e1mico aqu\u00ed Todas estas palabras no se podr\u00e1n utilizar como variables, nombres de lista, tuplas, diccionarios\u2026 porque su uso est\u00e1 reservado para otras finalidades. Tambi\u00e9n podemos averiguar si la palabra que estamos utilizando puede estar dentro de esta lista con su m\u00e9todo .iskeyword() . >>> keyword.iskeyword('pass') Esto devolver\u00e1 como resultado True porque es una palabra reservada.","title":"Introducci\u00f3n"},{"location":"desarrollo/python/#introduccion","text":"","title":"Introducci\u00f3n"},{"location":"desarrollo/python/#historia","text":"Python es un lenguaje de programaci\u00f3n interpretado, de alto nivel y de inter\u00e9s general. Este lenguaje tiene una filosof\u00eda de programaci\u00f3n que se centra en la legibilidad del c\u00f3digo, para ello implementa una serie de declaraciones y est\u00e1ndares que ha de respetarse para que el c\u00f3digo funcione como es la indentaci\u00f3n. Python es un lenguaje orientado a objetos que facilitan a los desarrolladores escribir un c\u00f3digo limpio, eficaz, l\u00f3gico y peque\u00f1o que sirve tanto para peque\u00f1os, como medianos y grandes proyectos. La primera versi\u00f3n de Python se public\u00f3 en el a\u00f1o 1991 por Guido van Rossum un programador holand\u00e9s graduado en matem\u00e1ticas y ciencias computacionales en la universidad de Amsterdam en 1982. Posteriormente se public\u00f3 la versi\u00f3n 2.0 el d\u00eda 16 de octubre del a\u00f1o 2000 y la versi\u00f3n 3.0 que se liber\u00f3 el 3 de diciembre de 2008. Actualmente las versiones 1.0 y 2.0 ya no est\u00e1n soportadas, esta \u00faltima dej\u00f3 de tener soporte el d\u00eda 31 de diciembre de 2019.","title":"Historia"},{"location":"desarrollo/python/#notas-importantes","text":"Antes de seguir con este art\u00edculo es muy importante que sepamos que la versi\u00f3n con la que trabajaremos en las siguientes entragas es Python 3 . Python 2.7 no tiene m\u00e1s soporte desde el 31 de diciembre del 2019 . A parte de la versi\u00f3n, conviene saber que tenemos que leer mucho la documentaci\u00f3n oficial si no queremos perder horas y horas con las cl\u00e1sicas pruebas de Error/Acierto ( pruebo cosas al azar y lo que salga sali\u00f3 ). Tambi\u00e9n tenemos muchos recursos en l\u00ednea como Real Python que contienen muchos recursos bastante bien explicados; Full Stack Python tiene tambie\u0144 muchos recursos, ayudas\u2026","title":"Notas importantes"},{"location":"desarrollo/python/#como-usar-python","text":"Sin duda un elemento imprescindible para poder trabajar con Python son los modos en los qu\u00e9 podemos trabajar con \u00e9l. Podemos hacerlo de dos formas, mediante int\u00e9rprete de comandos o elaborando un archivo de Python.","title":"\u00bfC\u00f3mo usar Python?"},{"location":"desarrollo/python/#interprete-de-comandos","text":"Si estas en Linux o BSD, puedes ver las m\u00faltiples (si hay), versiones instaladas en tu sistema si haces un simple: whereis python ver\u00e1s una salida como esta: .. code-block:: bash python: /usr/bin/python3.7-config /usr/bin/python2.7 /usr/bin/python3.7m-x86_64-config /usr/bin/python /usr/bin/python3.7 /usr/bin/python3.7m /usr/bin/python3.7m-config /usr/lib/python2.7 /usr/lib/python3.7 /usr/lib64/python2.7 /usr/lib64/python3.7 /usr/include/python2.7 /usr/include/python3.7m Como podemos ver, en mi sistema tengo instalados una versi\u00f3n de Python 3.7 como una 2.7. Es importante destacar que en el curso SIEMPRE trabajaremos con la rama 3.7 o superior porque la versi\u00f3n 2.7 qued\u00f3 fuera de soporte desde el 31 de diciembre de 2019 y que prestar\u00e9 m\u00e1s atenci\u00f3n a SO Linux que BSD.","title":"Int\u00e9rprete de comandos"},{"location":"desarrollo/python/#como-se-que-version-tengo-por-defecto-en-el-sistema","text":"Si hacemos un ls /usr/bin |grep python veremos que un enlace simb\u00f3lico est\u00e1 apuntado a una versi\u00f3n concreta. lrwxrwxrwx. 1 root root 9 Jan 30 10:18 python -> ./python3 lrwxrwxrwx. 1 root root 9 Oct 21 15:13 python2 -> python2.7 -rwxr-xr-x. 1 root root 16072 Oct 21 15:13 python2.7 Tambi\u00e9n se puede saber desde el gestor de paquetes que utilices a menudo en tu distribuci\u00f3n de Linux o sistemas BSD y/o ejecutando python -V que este te devolver\u00e1 la versi\u00f3n: $ python -V Python 3.7.6","title":"\u00bfC\u00f3mo s\u00e9 que versi\u00f3n tengo por defecto en el sistema?"},{"location":"desarrollo/python/#acceder-al-interprete-de-python","text":"Basta con que ejecutemos el comando python para ^ empezar a trabajar <https://docs.python.org/3.8/tutorial/interpreter.html> _ $ python Python 3.7.6 (default, Jan 8 2020, 19:59:22) [GCC 7.3.0] :: Anaconda, Inc. on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> Vemos una informaci\u00f3n de todo un poco, con qu\u00e9 compilador fue compilado Python, qu\u00e9 versi\u00f3n estamos utilizando\u2026etc Hay una sintaxis m\u00ednima que tenemos que entender del promp cuando usamos el int\u00e9rprete: >>> se refiere a un c\u00f3digo que puede ejecutarse sin identaci\u00f3n por ejemplo cuando definimos una variable, una funci\u00f3n\u2026 >>> variable = 1 \u2026 aqu\u00ed est\u00e1 mencionando que tenemos que indentar, es decir, a\u00f1adir los espacios (4) correspondientes para respetar la sintaxis de Python. >>> def func(): ... variable = 1 \u201cSALIDA\u201d: Cuando solo salen estas comillas simples, est\u00e1 informando de un valor o imprimiendo la salida de una funci\u00f3n, variable\u2026etc >>> import sys >>> sys.version '3.7.6 (default, Jan 8 2020, 19:59:22) \\n[GCC 7.3.0]'","title":"Acceder al int\u00e9rprete de Python"},{"location":"desarrollo/python/#usarlo-como-calculadora","text":"Se pueden realizar operaciones aritm\u00e9ticas ( ya las veremos m\u00e1s adelante ) como suma, resta, divisi\u00f3n, multiplicaci\u00f3n\u2026 >>> 3 + 2 5","title":"Usarlo como calculadora"},{"location":"desarrollo/python/#como-salir-de-la-terminal","text":"Para salir podemos usar la funci\u00f3n exit() o pulsar la combinaci\u00f3n de teclas Ctrl + C","title":"\u00bfC\u00f3mo salir de la terminal?"},{"location":"desarrollo/python/#repl-tu-interprete-en-linea","text":"REPL.it es una p\u00e1gina que utilizar\u00e9 mucho para dinamizar los ejemplos, se trata de un int\u00e9rprete en l\u00ednea que permite crear un entorno peque\u00f1o de Python y poder trabajar con \u00e9l. En casi todos los ejemplos pondr\u00e9 un enlace para aquellas personas que quieran probar el c\u00f3digo y no dispongan de int\u00e9rprete.","title":"REPL tu int\u00e9rprete en l\u00ednea"},{"location":"desarrollo/python/#creando-un-archivo-python","text":"Los archivos de Python tienen la extensi\u00f3n .py , y comienzan siempre declarando la ruta del int\u00e9rprete, a esto se le conoce como SheBang . Por lo general, se suele utilizar la siguiente cabecera para evitar solapamientos con la versi\u00f3n 2.7. `#!/usr/bin/env python3` Python 3 utiliza la codificaci\u00f3n UTF-8 por defecto , por lo que si queremos trabajar con otro tipo de codificaci\u00f3n tendremos que especificarla justamente debajo del SheBang. #!/usr/bin/env python3 # -*- coding: latin-1 -*- A partir de aqu\u00ed a\u00f1adimos nuestro c\u00f3digo. Tambi\u00e9n es importante, que se le den permisos de escritura al archivo de Python para poderlo ejecutar desde terminal, si no obtendremos el error de permisos: $ ./hola.py bash: ./hola.py: Permission denied $ chmod +x hola.py $ ./hola.py Hello world Ya que sabemos esto, cuando en los comandos de ejemplo haga referencia a los diferentes tipos de prompt ( >>> , ... o ' ' ) usamos directamente el int\u00e9rprete y cuando no lo haga, estamos haciendo un archivo en Python. \u00a1Una vez que sabemos esto, adelante!","title":"Creando un archivo Python"},{"location":"desarrollo/python/#comentarios","text":"Algo muy importante sobre todo en nuestro c\u00f3digo es comentar. Comentar nos permite recordar los cambios que hemos hecho en el c\u00f3digo o tener al menos un punto de retorno porque cuando llevas muchas horas programando y programando, y revisando\u2026 dejas el c\u00f3digo unos d\u00edas, y te costar\u00e1 mucho entender y comprender todo el c\u00f3digo de nuevo sin tener una ayuda de por qu\u00e9 decidimos hacer un cambio en la estructura, en el flujo del c\u00f3digo\u2026etc","title":"Comentarios"},{"location":"desarrollo/python/#como-se-comenta-en-python","text":"Si quieres comentar una l\u00ednea, puedes usar: # Comentamos con la almohadilla","title":"\u00bfC\u00f3mo se comenta en Python?"},{"location":"desarrollo/python/#cuando-queremos-comentar-multiples-lineas-utilizaremos-esta-sintaxis","text":"\"\"\" Este es un comentario multil\u00ednea. :D \"\"\" Ver ejemplo din\u00e1mico aqu\u00ed","title":"Cuando queremos comentar m\u00faltiples l\u00edneas, utilizaremos esta sintaxis"},{"location":"desarrollo/python/#identificadores","text":"Los identificadores son el nombre que se utilizan para identificar una variable, funci\u00f3n, clases o un objeto. Las principales reglas que se deben respetar son las siguientes: No se utilizan caracteres especiales o num\u00e9ricos menos ( _ ) que se puede utilizar como un identificador Las palabras clave no se utilizan Python discrimina de may\u00fasculas y min\u00fasculas por lo que no es lo mismo llamar a una funci\u00f3n o variable var si est\u00e1 definida como Var . Indentar es obligatorio, hay que respetar los espacios cuando se crean funciones, clases o m\u00e9todos.","title":"Identificadores"},{"location":"desarrollo/python/#variable","text":"Las variables permiten almacenar un valor que le asignes como una cadena, un dato n\u00famerico, listas, tuplas\u2026 el tipo de valor lo veremos con m\u00e1s profundidad en entregas posteriores, pero hay que saber lo que hace este identificador y para que nos puede servir. >>> variable = \"Hello world\"","title":"Variable"},{"location":"desarrollo/python/#funciones","text":"Permiten ejecutar un fragmento de c\u00f3digo espec\u00edfico el cu\u00e1l puede solicitar o no datos para la ejecuci\u00f3n de dicho c\u00f3digo. >>> def nombre_funcion(argumentos): ... # Bloque de c\u00f3digo Los argumentos se separan por comas.","title":"Funciones"},{"location":"desarrollo/python/#bucles","text":"Permiten recorrer un conjunto de datos como un set|lista|tupla|collection \u2026etc o ejecutarse desde un rango espec\u00edfico como por ejemplo, de 0 a 100 o de 1 a 5\u2026etc","title":"Bucles"},{"location":"desarrollo/python/#bucle-for","text":">>> for x in a: ... # Bloque de c\u00f3digo Es el m\u00e1s com\u00fan.","title":"Bucle for"},{"location":"desarrollo/python/#clases","text":"Las clases son la plantilla de los objetos, Python es un lenguaje de programaci\u00f3n orientado a objetos, por lo que es indispensable este identificador.","title":"Clases"},{"location":"desarrollo/python/#propiedades","text":"Son los atributos que tiene una clase, a fin de cuentas es como usar variables en otro contexto de programaci\u00f3n.","title":"Propiedades"},{"location":"desarrollo/python/#metodos","text":"Son las funciones o acciones que tiene una clase.","title":"M\u00e9todos"},{"location":"desarrollo/python/#modulo","text":"Son fragmentos de c\u00f3digos externos o integrados en Python que realizan una serie de cosas, se puede conocer en otros lenguajes como librer\u00edas. Pero no nos alarmemos, todos estos identificadores los veremos m\u00e1s adelante de una forma m\u00e1s profunda.","title":"M\u00f3dulo"},{"location":"desarrollo/python/#palabras-clave","text":"Python como otros lenguajes, tienen una serie de palabras que no se deben utilizar bajo ning\u00fan concepto para utilizarlos como identificadores. Podemos averiguar cu\u00e1les son desde su documentaci\u00f3n oficial o importando el m\u00f3dulo keyword y su propiedad .kwlist >>> import keyword >>> print(keyword.kwlist) Nos devolver\u00e1 esta salida: ['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] Nota Ver ejemplo din\u00e1mico aqu\u00ed Todas estas palabras no se podr\u00e1n utilizar como variables, nombres de lista, tuplas, diccionarios\u2026 porque su uso est\u00e1 reservado para otras finalidades. Tambi\u00e9n podemos averiguar si la palabra que estamos utilizando puede estar dentro de esta lista con su m\u00e9todo .iskeyword() . >>> keyword.iskeyword('pass') Esto devolver\u00e1 como resultado True porque es una palabra reservada.","title":"Palabras clave"},{"location":"desarrollo/python/controles-de-flujo/","text":"Condicionales Condicional if Esta estructura de control te permite evaluar una condici\u00f3n y ejecutar un trozo de c\u00f3digo si la cumple. >>> if (condici\u00f3n): >>> Bloque de c\u00f3digo Condicional if-else El if-else es una estructura de control que permite hacer 1 cosa si se cumple la condicio\u0144, si esta no se cumple, \u00fanicamente se ejecutar\u00e1 un bloque de c\u00f3digo sin contemplar otras posibilidades. if (condici\u00f3n 1): Bloque de c\u00f3digo else: Bloque de c\u00f3digo Veamos un ejemplo, Si tenemos un coche de marca Opel, emitir\u00e1s un mensaje que diga \u00abTienes un Opel\u00bb, si no es as\u00ed, mostraremos un mensaje que diga que \u00abNo tienes un coche Opel\u00bb. >>> marca = \"Citr\u00f6en\" >>> if (marca == \"Opel\"): >>> print(\"Tienes un Opel\") >>> else: >>> print(\"No tienes un coche Opel\") 'No tienes un coche Opel' Condicional if-elif-else \u00bfPero qu\u00e9 pasa cuando queremos comprobar m\u00faltiples condiciones? No podemos estar anidando if-else como si no hubiese un ma\u00f1ana uno dentro del otro. Para eso tenemos la estructura if-elif-else . Esta estructura nos permite hacer 1 cosa u otra en base a una condici\u00f3n, la cu\u00e1l estar\u00e1 compuesto por uno o m\u00faltiples operadores como aritm\u00e9ticos, l\u00f3gicos\u2026 if (condici\u00f3n 1): Bloque de c\u00f3digo elif (condici\u00f3n3): Bloque de c\u00f3digo elif (condici\u00f3n2): Bloque de c\u00f3digo else: Bloque de c\u00f3digo Veamos un ejemplo, Si tenemos un coche de marca Opel, emitir\u00e1s un mensaje que diga \u00abTienes un Opel\u00bb, si no es as\u00ed, mostraremos un mensaje que diga que \u00abNo tienes un coche Opel\u00bb. >>> marca = \"Citr\u00f6en\" >>> if (marca == \"Opel\") >>> print(\"Tienes un Opel\") >>> elif (marca == \"Citr\u00f6en\") >>> print(\"Tienes un coche Opel\") >>> elif (marca == \"Audi\"): >>> print(\"Tienes un Audi\") >>> else: >>> print(\"Tu marca de coche no est\u00e1 registrada\") Tienes un coche Citr\u00f6en Todo esto se puede complicar a\u00fan m\u00e1s haciendo uso de otros operadores y de otros if-elif-else anidados, por ejemplo, utilizaremos los operadores de comparaci\u00f3n con l\u00f3gicos tal que as\u00ed: >>> marca_coche = \"Toyota\" >>> modelo_coche = \"AE87\" >>> motor_coche = 1600 >>> if (marca_coche == \"Toyota\" and modelo_coche == \"AE92\"): >>> if (motor_coche == 1600): >>> print(\"Perfecto\") >>> elif (motor_coche == 1400): >>> print(\"Bien\") >>> elif (motor_coche == 1200): >>> print(\"Cuidado con las cuestas\") >>> else: >>> print(\"Esto huele a chasis\") >>> elif (marca_coche == \"Citr\u00f6en\" and modelo_coche == \"Saxo\"): >>> print(\"Enhorabuena, tienes un coche que pesa poco y corre mucho.\") >>> else: >>> print(\"Error 404, Tu coche no encontrado.\") Error 404, Tu coche no encontrado. Este mensaje se produce porque en el primer condicional estamos esperando recibir el modelo AE92, y sin embargo, recibimos el AE87; como en la segunda condici\u00f3n ( elif ) requiere del modelo \u00abCitr\u00f6en\u00bb tambi\u00e9n queda descartado imprimiendo el mensaje \u00abError 404, Tu coche no encontrado.\u00bb. No obstante, si cambiamos modelo_coche por AE92 y volvemos a ejecutar las sentencias, veremos que recibiremos el mensaje de: \u00abPerfecto\u00bb. Bucles Bucle for \u00bfQu\u00e9 ocurre si queremos recorrer una lista o generar m\u00faltiples ejecuciones de c\u00f3digo? Pues evidetenmente con un if no nos vale, ya que solo nos permite validar una condicio\u0144, y cuando la valide, esta dejar\u00e1 de ejecutarse. for variable_interactiva in secuencia: Bloque c\u00f3digo \u00bfC\u00f3mo funciona? En secuencia va una condici\u00f3n, podemos poner que recorra todos los valores de una lista y nos lo imprima por variable_interactiva . >>> frutas = [ \"Peras\", \"Manzanas\", \"Ar\u00e1ndanos\", \"Pomelo\"] >>> for fruta in frutas: >>> print(fruta) Peras Manzanas Ar\u00e1ndanos Pomelo Tambi\u00e9n se puede hacer ejecuciones por el tama\u00f1o de la lista: >>> frutas = [ \"Peras\", \"Manzanas\", \"Ar\u00e1ndanos\", \"Pomelo\"] >>> for fruta in range(0 ,len(frutas)): >>> print(\"Esta es la posici\u00f3n\", fruta,\"de la fruta: \",frutas[fruta]) Esta es la posici\u00f3n 0 de la fruta: Peras Esta es la posici\u00f3n 1 de la fruta: Manzanas Esta es la posici\u00f3n 2 de la fruta: Ar\u00e1ndanos Esta es la posici\u00f3n 3 de la fruta: Pomelo \u00bfC\u00f3mo podemos hacer, que se hagan n ejecuciones para hacer tal cosa? Con la funci\u00f3n range() . >>> for x in range(0,100): >>> print(x) 0 1 2 3 4 [... Corto aqu\u00ed porque llega hasta 99 ...] \u00bfPor qu\u00e9 hasta 99 y no 100? Porque recordemos que el valor 0 es una posici\u00f3n que se cuenta, realmente es n - 1 . \u00bfC\u00f3mo puedo romper una ejecuci\u00f3n? Tenemos el comando break que rompe la ejecuci\u00f3n del c\u00f3digo, por lo que me han ense\u00f1ado, es mejor finalizar las cosas como tocan en vez de usar este tipo de \u00abca\u00f1ones\u00bb. Pero que sepamos que lo podemos usar. Normalmente se usan cuando hay condicionales a\u00f1adidos, esto no quiere decir que se siga ejecut\u00e1ndo el resto del programa que tengamos, solo se frena el bucle for que hemos invocado en nuestro fragmento de c\u00f3digo. >>> for x in range(0,100): >>> print(x) >>> if (x == 4): >>> break 0 1 2 3 4 [... Se para la ejecuci\u00f3n ...] Bucle while Este bucle se repetir\u00e1 hasta que la condici\u00f3n se cumpla. >>> while ( condicion ): >>> # Bloque de c\u00f3digo Un ejemplo sencillo puede ser: >>> a = 1 >>> while a < 10: >>> print(a) >>> a += 2 0 2 4 6 8 break, continue, pass Estas tres sentencias permiten modificar la interacci\u00f3n de los bucles. break : Rompe toda la ejecuci\u00f3n de un bucle. for x in range(0,10): if x == 5: break print(x) Veremos que la ejecuci\u00f3n cuando llega a 5 el bucle se para a pesar de que le hemos dicho que el bucle vaya de 0 a 10 e imprimir\u00e1 como \u00faltimo valor 4. continue : Se salta la ejecuci\u00f3n en ese momento de la condici\u00f3n del bucle, pero sigue iterando el resto de elementos del bucle hasta finalizar. for x in range(0,10): if x == 5: continue print(x) En este caso, observamos que cuando detecte que x = 5 , el valor 5 no se imprimir\u00e1, pero continuar\u00e1 realizando el resto de condici\u00f3n. pass : No ejecuta nada y deja que continue el flujo del bucle. for x in range(0,10): if x == 5: pass print(x) Se ejecutar\u00e1 como si no existiera la palabra reservada pass . Juego, Drag\u00f3n VS Personaje Un drag\u00f3n nos estar\u00e1 golpeando hasta que nosotros matemos al drag\u00f3n o el drag\u00f3n nos mate a nosotros: Nota Vamos a llamar al m\u00f3dulo random y lo llamaremos como TirarDados que m\u00e1s tarde utilizaremos el m\u00e9todo .random() para generar n\u00fameros aleatorios que est\u00e1n comprendidos entre 0.n y 1.n y que, haciendo uso del m\u00e9todo .round() aproximaremos el n\u00famero a favor del 1 o del 0. #!/usr/bin/env python3 # # Juego elaborado por \u00c1lvaro Castillo # GPLv2 # from random import random as TirarDados dragon_hp = 100 personaje_hp = 100 hit_dragon = 5 hit_personaje = 5 while True: if personaje_hp == 0: print(\"Hemos ganado :)\") break elif dragon_hp == 0: print(\"Gan\u00f3 el Drag\u00f3n :(\") break else: pass dados=round(TirarDados()) if ( dados == 0 ): dragon_hp -= hit_dragon print(\"\u00a1Hemos golpeado al drag\u00f3n!, le queda: \", dragon_hp, \"de vida.\") elif ( dados == 1): personaje_hp -= hit_personaje print(\"\u00a1El drag\u00f3n nos ha golpeado!, tenemos de vida:\", personaje_hp,\".\") else: print(\"Hubo un fallo\") Este es el an\u00e1lisis resumido de este juego: La vida de ambos duelistas est\u00e1n asignadas en una variable El da\u00f1o que quita cada uno de ellos tambi\u00e9n La condici\u00f3n siempre es True por lo que siempre se ejecutar\u00e1 originando un bucle infinito infinityLoop Si la vida de alguno de los duelistas llega a 0 , se interrumpe el bucle usando break La variable dados obtiene un n\u00famero aproximado a 1|0 dependiendo lo que salga. Hay un condicional que dice si datos=1 ataca el drag\u00f3n, si dados=0 atacamos nosotros. Haciendo uso de los operadores de asignaci\u00f3n, restamos el valor de afecci\u00f3n a la vida del duelista afectado y se imprime un mensaje indicando qui\u00e9n ha golpeado a qui\u00e9n y cu\u00e1nta vida le queda al duelista contrario. Se repite el proceso hasta llegar al punto 4 Dando como resultado algo parecido a esto: \u00a1El drag\u00f3n nos ha golpeado!, tenemos de vida: 95 . \u00a1Hemos golpeado al drag\u00f3n!, le queda: 95 de vida. \u00a1Hemos golpeado al drag\u00f3n!, le queda: 90 de vida. \u00a1Hemos golpeado al drag\u00f3n!, le queda: 85 de vida. \u00a1El drag\u00f3n nos ha golpeado!, tenemos de vida: 90 . \u00a1Hemos golpeado al drag\u00f3n!, le queda: 80 de vida. \u00a1Hemos golpeado al drag\u00f3n!, le queda: 75 de vida. [...]","title":"Condicionales"},{"location":"desarrollo/python/controles-de-flujo/#condicionales","text":"","title":"Condicionales"},{"location":"desarrollo/python/controles-de-flujo/#condicional-if","text":"Esta estructura de control te permite evaluar una condici\u00f3n y ejecutar un trozo de c\u00f3digo si la cumple. >>> if (condici\u00f3n): >>> Bloque de c\u00f3digo","title":"Condicional if"},{"location":"desarrollo/python/controles-de-flujo/#condicional-if-else","text":"El if-else es una estructura de control que permite hacer 1 cosa si se cumple la condicio\u0144, si esta no se cumple, \u00fanicamente se ejecutar\u00e1 un bloque de c\u00f3digo sin contemplar otras posibilidades. if (condici\u00f3n 1): Bloque de c\u00f3digo else: Bloque de c\u00f3digo Veamos un ejemplo, Si tenemos un coche de marca Opel, emitir\u00e1s un mensaje que diga \u00abTienes un Opel\u00bb, si no es as\u00ed, mostraremos un mensaje que diga que \u00abNo tienes un coche Opel\u00bb. >>> marca = \"Citr\u00f6en\" >>> if (marca == \"Opel\"): >>> print(\"Tienes un Opel\") >>> else: >>> print(\"No tienes un coche Opel\") 'No tienes un coche Opel'","title":"Condicional if-else"},{"location":"desarrollo/python/controles-de-flujo/#condicional-if-elif-else","text":"\u00bfPero qu\u00e9 pasa cuando queremos comprobar m\u00faltiples condiciones? No podemos estar anidando if-else como si no hubiese un ma\u00f1ana uno dentro del otro. Para eso tenemos la estructura if-elif-else . Esta estructura nos permite hacer 1 cosa u otra en base a una condici\u00f3n, la cu\u00e1l estar\u00e1 compuesto por uno o m\u00faltiples operadores como aritm\u00e9ticos, l\u00f3gicos\u2026 if (condici\u00f3n 1): Bloque de c\u00f3digo elif (condici\u00f3n3): Bloque de c\u00f3digo elif (condici\u00f3n2): Bloque de c\u00f3digo else: Bloque de c\u00f3digo Veamos un ejemplo, Si tenemos un coche de marca Opel, emitir\u00e1s un mensaje que diga \u00abTienes un Opel\u00bb, si no es as\u00ed, mostraremos un mensaje que diga que \u00abNo tienes un coche Opel\u00bb. >>> marca = \"Citr\u00f6en\" >>> if (marca == \"Opel\") >>> print(\"Tienes un Opel\") >>> elif (marca == \"Citr\u00f6en\") >>> print(\"Tienes un coche Opel\") >>> elif (marca == \"Audi\"): >>> print(\"Tienes un Audi\") >>> else: >>> print(\"Tu marca de coche no est\u00e1 registrada\") Tienes un coche Citr\u00f6en Todo esto se puede complicar a\u00fan m\u00e1s haciendo uso de otros operadores y de otros if-elif-else anidados, por ejemplo, utilizaremos los operadores de comparaci\u00f3n con l\u00f3gicos tal que as\u00ed: >>> marca_coche = \"Toyota\" >>> modelo_coche = \"AE87\" >>> motor_coche = 1600 >>> if (marca_coche == \"Toyota\" and modelo_coche == \"AE92\"): >>> if (motor_coche == 1600): >>> print(\"Perfecto\") >>> elif (motor_coche == 1400): >>> print(\"Bien\") >>> elif (motor_coche == 1200): >>> print(\"Cuidado con las cuestas\") >>> else: >>> print(\"Esto huele a chasis\") >>> elif (marca_coche == \"Citr\u00f6en\" and modelo_coche == \"Saxo\"): >>> print(\"Enhorabuena, tienes un coche que pesa poco y corre mucho.\") >>> else: >>> print(\"Error 404, Tu coche no encontrado.\") Error 404, Tu coche no encontrado. Este mensaje se produce porque en el primer condicional estamos esperando recibir el modelo AE92, y sin embargo, recibimos el AE87; como en la segunda condici\u00f3n ( elif ) requiere del modelo \u00abCitr\u00f6en\u00bb tambi\u00e9n queda descartado imprimiendo el mensaje \u00abError 404, Tu coche no encontrado.\u00bb. No obstante, si cambiamos modelo_coche por AE92 y volvemos a ejecutar las sentencias, veremos que recibiremos el mensaje de: \u00abPerfecto\u00bb.","title":"Condicional if-elif-else"},{"location":"desarrollo/python/controles-de-flujo/#bucles","text":"","title":"Bucles"},{"location":"desarrollo/python/controles-de-flujo/#bucle-for","text":"\u00bfQu\u00e9 ocurre si queremos recorrer una lista o generar m\u00faltiples ejecuciones de c\u00f3digo? Pues evidetenmente con un if no nos vale, ya que solo nos permite validar una condicio\u0144, y cuando la valide, esta dejar\u00e1 de ejecutarse. for variable_interactiva in secuencia: Bloque c\u00f3digo","title":"Bucle for"},{"location":"desarrollo/python/controles-de-flujo/#como-funciona","text":"En secuencia va una condici\u00f3n, podemos poner que recorra todos los valores de una lista y nos lo imprima por variable_interactiva . >>> frutas = [ \"Peras\", \"Manzanas\", \"Ar\u00e1ndanos\", \"Pomelo\"] >>> for fruta in frutas: >>> print(fruta) Peras Manzanas Ar\u00e1ndanos Pomelo Tambi\u00e9n se puede hacer ejecuciones por el tama\u00f1o de la lista: >>> frutas = [ \"Peras\", \"Manzanas\", \"Ar\u00e1ndanos\", \"Pomelo\"] >>> for fruta in range(0 ,len(frutas)): >>> print(\"Esta es la posici\u00f3n\", fruta,\"de la fruta: \",frutas[fruta]) Esta es la posici\u00f3n 0 de la fruta: Peras Esta es la posici\u00f3n 1 de la fruta: Manzanas Esta es la posici\u00f3n 2 de la fruta: Ar\u00e1ndanos Esta es la posici\u00f3n 3 de la fruta: Pomelo","title":"\u00bfC\u00f3mo funciona?"},{"location":"desarrollo/python/controles-de-flujo/#como-podemos-hacer-que-se-hagan-n-ejecuciones-para-hacer-tal-cosa","text":"Con la funci\u00f3n range() . >>> for x in range(0,100): >>> print(x) 0 1 2 3 4 [... Corto aqu\u00ed porque llega hasta 99 ...]","title":"\u00bfC\u00f3mo podemos hacer, que se hagan n ejecuciones para hacer tal cosa?"},{"location":"desarrollo/python/controles-de-flujo/#por-que-hasta-99-y-no-100","text":"Porque recordemos que el valor 0 es una posici\u00f3n que se cuenta, realmente es n - 1 .","title":"\u00bfPor qu\u00e9 hasta 99 y no 100?"},{"location":"desarrollo/python/controles-de-flujo/#como-puedo-romper-una-ejecucion","text":"Tenemos el comando break que rompe la ejecuci\u00f3n del c\u00f3digo, por lo que me han ense\u00f1ado, es mejor finalizar las cosas como tocan en vez de usar este tipo de \u00abca\u00f1ones\u00bb. Pero que sepamos que lo podemos usar. Normalmente se usan cuando hay condicionales a\u00f1adidos, esto no quiere decir que se siga ejecut\u00e1ndo el resto del programa que tengamos, solo se frena el bucle for que hemos invocado en nuestro fragmento de c\u00f3digo. >>> for x in range(0,100): >>> print(x) >>> if (x == 4): >>> break 0 1 2 3 4 [... Se para la ejecuci\u00f3n ...]","title":"\u00bfC\u00f3mo puedo romper una ejecuci\u00f3n?"},{"location":"desarrollo/python/controles-de-flujo/#bucle-while","text":"Este bucle se repetir\u00e1 hasta que la condici\u00f3n se cumpla. >>> while ( condicion ): >>> # Bloque de c\u00f3digo Un ejemplo sencillo puede ser: >>> a = 1 >>> while a < 10: >>> print(a) >>> a += 2 0 2 4 6 8","title":"Bucle while"},{"location":"desarrollo/python/controles-de-flujo/#break-continue-pass","text":"Estas tres sentencias permiten modificar la interacci\u00f3n de los bucles. break : Rompe toda la ejecuci\u00f3n de un bucle. for x in range(0,10): if x == 5: break print(x) Veremos que la ejecuci\u00f3n cuando llega a 5 el bucle se para a pesar de que le hemos dicho que el bucle vaya de 0 a 10 e imprimir\u00e1 como \u00faltimo valor 4. continue : Se salta la ejecuci\u00f3n en ese momento de la condici\u00f3n del bucle, pero sigue iterando el resto de elementos del bucle hasta finalizar. for x in range(0,10): if x == 5: continue print(x) En este caso, observamos que cuando detecte que x = 5 , el valor 5 no se imprimir\u00e1, pero continuar\u00e1 realizando el resto de condici\u00f3n. pass : No ejecuta nada y deja que continue el flujo del bucle. for x in range(0,10): if x == 5: pass print(x) Se ejecutar\u00e1 como si no existiera la palabra reservada pass .","title":"break, continue, pass"},{"location":"desarrollo/python/controles-de-flujo/#juego-dragon-vs-personaje","text":"Un drag\u00f3n nos estar\u00e1 golpeando hasta que nosotros matemos al drag\u00f3n o el drag\u00f3n nos mate a nosotros: Nota Vamos a llamar al m\u00f3dulo random y lo llamaremos como TirarDados que m\u00e1s tarde utilizaremos el m\u00e9todo .random() para generar n\u00fameros aleatorios que est\u00e1n comprendidos entre 0.n y 1.n y que, haciendo uso del m\u00e9todo .round() aproximaremos el n\u00famero a favor del 1 o del 0. #!/usr/bin/env python3 # # Juego elaborado por \u00c1lvaro Castillo # GPLv2 # from random import random as TirarDados dragon_hp = 100 personaje_hp = 100 hit_dragon = 5 hit_personaje = 5 while True: if personaje_hp == 0: print(\"Hemos ganado :)\") break elif dragon_hp == 0: print(\"Gan\u00f3 el Drag\u00f3n :(\") break else: pass dados=round(TirarDados()) if ( dados == 0 ): dragon_hp -= hit_dragon print(\"\u00a1Hemos golpeado al drag\u00f3n!, le queda: \", dragon_hp, \"de vida.\") elif ( dados == 1): personaje_hp -= hit_personaje print(\"\u00a1El drag\u00f3n nos ha golpeado!, tenemos de vida:\", personaje_hp,\".\") else: print(\"Hubo un fallo\") Este es el an\u00e1lisis resumido de este juego: La vida de ambos duelistas est\u00e1n asignadas en una variable El da\u00f1o que quita cada uno de ellos tambi\u00e9n La condici\u00f3n siempre es True por lo que siempre se ejecutar\u00e1 originando un bucle infinito infinityLoop Si la vida de alguno de los duelistas llega a 0 , se interrumpe el bucle usando break La variable dados obtiene un n\u00famero aproximado a 1|0 dependiendo lo que salga. Hay un condicional que dice si datos=1 ataca el drag\u00f3n, si dados=0 atacamos nosotros. Haciendo uso de los operadores de asignaci\u00f3n, restamos el valor de afecci\u00f3n a la vida del duelista afectado y se imprime un mensaje indicando qui\u00e9n ha golpeado a qui\u00e9n y cu\u00e1nta vida le queda al duelista contrario. Se repite el proceso hasta llegar al punto 4 Dando como resultado algo parecido a esto: \u00a1El drag\u00f3n nos ha golpeado!, tenemos de vida: 95 . \u00a1Hemos golpeado al drag\u00f3n!, le queda: 95 de vida. \u00a1Hemos golpeado al drag\u00f3n!, le queda: 90 de vida. \u00a1Hemos golpeado al drag\u00f3n!, le queda: 85 de vida. \u00a1El drag\u00f3n nos ha golpeado!, tenemos de vida: 90 . \u00a1Hemos golpeado al drag\u00f3n!, le queda: 80 de vida. \u00a1Hemos golpeado al drag\u00f3n!, le queda: 75 de vida. [...]","title":"Juego, Drag\u00f3n VS Personaje"},{"location":"desarrollo/python/fecha-y-hora/","text":"Fecha y hora M\u00f3dulo time Permite trabajar con la fecha y la hora, estos son algunos m\u00e9todos. import time print(time.ctime()) Devolver\u00e1: Mon Apr 13 21:58:46 2020 No es muy pr\u00e1ctico si quieres hacer otras cosas, como asignar una fecha y hora a un archivo que quieras crear, por suerte, puedes preformatear con .strftime() . import time fecha_log = time.strftime(\"%d-%m-%Y_%H-%M-%S\") fecha_humano = time.strftime(\"%A %d %B %Y %H:%M:%S\") # Imprimir\u00e1 una fecha como esta: # 13-04-2020_22-23-06 print(fecha_log) # Imprimir\u00e1 una fecha como esta: # Monday 13 April 2020 22:23:06 print(fecha_humano) Puedes ver m\u00e1s informaci\u00f3n sobre los par\u00e1metros para formatear aqu\u00ed Este es un ejemplo de como almacenar el resultado del comando dmesg del sistema operativo Linux, y que se almacene el resultado en un archivo con la fecha preformateada. import subprocess dmesg = subprocess.Popen([\"dmesg\"], shell=False,stdout=subprocess.PIPE) from time import strftime as ConvertirTiempoLog fecha_log = ConvertirTiempoLog(\"%d-%m-%Y_%H-%M-%S\") archivo_log = \"dmesg_log_%s.log\" % (fecha_log) with open(archivo_log,'w') as dmesg_log: dmesg_log.write(dmesg.stdout.read().decode('utf-8')) dmesg_log.close() M\u00f3dulo calendar Muestra un calendario como el comando cal de Linux. import calendar calendar.month(2020,1) # Nos mostrar\u00e1: January 2020 Mo Tu We Th Fr Sa Su 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 Puedes hacer una combinaci\u00f3n con el m\u00f3dulo time y calendar . import time,calendar anyo = int(time.strftime(\"%Y\")) mes = int(time.strftime(\"%m\")) #Imprimir\u00e1 el calendario del a\u00f1o y me introducido. print(calendar.month(anyo,mes)) O tambi\u00e9n puedes hacer que devuelva un calendario con valores espec\u00edficos: import calendar anyo = int(input(\"Introduzca el a\u00f1o a consultar: \")) mes = int(input(\"Introduzca el mes: \")) #Imprimir\u00e1 el calendario del a\u00f1o y me introducido. print(calendar.month(anyo,mes)) M\u00e1s informaci\u00f3n, en la documentaci\u00f3n oficial","title":"Fecha y hora"},{"location":"desarrollo/python/fecha-y-hora/#fecha-y-hora","text":"","title":"Fecha y hora"},{"location":"desarrollo/python/fecha-y-hora/#modulo-time","text":"Permite trabajar con la fecha y la hora, estos son algunos m\u00e9todos. import time print(time.ctime()) Devolver\u00e1: Mon Apr 13 21:58:46 2020 No es muy pr\u00e1ctico si quieres hacer otras cosas, como asignar una fecha y hora a un archivo que quieras crear, por suerte, puedes preformatear con .strftime() . import time fecha_log = time.strftime(\"%d-%m-%Y_%H-%M-%S\") fecha_humano = time.strftime(\"%A %d %B %Y %H:%M:%S\") # Imprimir\u00e1 una fecha como esta: # 13-04-2020_22-23-06 print(fecha_log) # Imprimir\u00e1 una fecha como esta: # Monday 13 April 2020 22:23:06 print(fecha_humano) Puedes ver m\u00e1s informaci\u00f3n sobre los par\u00e1metros para formatear aqu\u00ed Este es un ejemplo de como almacenar el resultado del comando dmesg del sistema operativo Linux, y que se almacene el resultado en un archivo con la fecha preformateada. import subprocess dmesg = subprocess.Popen([\"dmesg\"], shell=False,stdout=subprocess.PIPE) from time import strftime as ConvertirTiempoLog fecha_log = ConvertirTiempoLog(\"%d-%m-%Y_%H-%M-%S\") archivo_log = \"dmesg_log_%s.log\" % (fecha_log) with open(archivo_log,'w') as dmesg_log: dmesg_log.write(dmesg.stdout.read().decode('utf-8')) dmesg_log.close()","title":"M\u00f3dulo time"},{"location":"desarrollo/python/fecha-y-hora/#modulo-calendar","text":"Muestra un calendario como el comando cal de Linux. import calendar calendar.month(2020,1) # Nos mostrar\u00e1: January 2020 Mo Tu We Th Fr Sa Su 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 Puedes hacer una combinaci\u00f3n con el m\u00f3dulo time y calendar . import time,calendar anyo = int(time.strftime(\"%Y\")) mes = int(time.strftime(\"%m\")) #Imprimir\u00e1 el calendario del a\u00f1o y me introducido. print(calendar.month(anyo,mes)) O tambi\u00e9n puedes hacer que devuelva un calendario con valores espec\u00edficos: import calendar anyo = int(input(\"Introduzca el a\u00f1o a consultar: \")) mes = int(input(\"Introduzca el mes: \")) #Imprimir\u00e1 el calendario del a\u00f1o y me introducido. print(calendar.month(anyo,mes)) M\u00e1s informaci\u00f3n, en la documentaci\u00f3n oficial","title":"M\u00f3dulo calendar"},{"location":"desarrollo/python/funciones-print-type-tipos-de-datos/","text":"Funci\u00f3n print() Esta funci\u00f3n se utiliza para imprimir valores por lo que nos podemos imaginar lo que podemos imprimir, resultados de funciones, valores asignados a variables, textos\u2026etc. print(\"Hello World\") Esta sentencia imprime en pantalla Hello World. M\u00e1s adelante, veremos distintos usos de c\u00f3mo utilizar esta funci\u00f3n como por ejemplo, sustituciones de valores por variables\u2026 Funci\u00f3n type() Esta funci\u00f3n nos permite averiguar el tipo de dato que estamos tratando. >>> type(\"Hello World\") O asign\u00e1ndolo en una variable y despu\u00e9s imprimirlo: >>> type(\"Hello World\") Esto nos devolver\u00e1 un mensaje como: <class 'str'> indicando que es un str o cadena. Si probamos con un n\u00ba entero como el 2 nos devolver\u00e1 <class 'int'> : >>> type(2) type() y print() son unas de las funciones m\u00e1s utilizadas, sobre todo para cuando tengamos que hacer depuraci\u00f3n y revisar por qu\u00e9 en nuestro c\u00f3digo hay cosas que no funcionan si estamos tratando con tipos de datos. Tipos de datos en Python (Literals) Cadenas o strings Constantes N\u00famericos Especiales Cadenas o strings Se forman encerrando un texto utilizando (\u00bb \u00ab) \u00f3 (\u201c \u201c). Por ejemplo: helloWorld = \"Hello world\" helloWorld = 'Hello world' Se puede definir cadenas con m\u00faltiples l\u00edneas 1helloWorldMessage = ''' 2Este es un mensaje para toda la civilizaci\u00f3n. 3Todos(as) aquellos(as) que no se interesen por la historia, 4estar\u00e1n condenados(as) a repetir los mismos errores que se 5cometieron en el pasado. ''' Obtener la primera letra de un str >>> mensaje = \"Hola mundo\" >>> print(mensaje[0]) h Obtener letras de un str a partir de un rango >>> mensaje = \"Hola mundo\" >>> print(mensaje[0:4]) hola Conseguir la posici\u00f3n de un str en un str >>> mensaje = \"Hola mundo, me llamo sincorchetes y estamos en echemosunbitstazo.es\" >>> mensaje.find(\"me\") 12 Si nos ponemos a contar ( desde 0 siempre ) caracter por caracter ( incluyendo los espacios y , ), obtendremos el n\u00famero 12. Reemplazar un str dentro de un str >>> mensaje = \"Hola mundo, me llamo sincorchetes y estamos en echemosunbitstazo.es\" >>> mensaje.replace(\"sincorchetes\",\"anonymous\") 'Hola mundo, me llamo anonymous y estamos en echemosunbitstazo.es' Separar un str cuando encuentre un caracter espec\u00edfico y devolver el resultado como una lista >>> mensaje = \"Hola mundo, me llamo sincorchetes y estamos en echemosunbitstazo.es\" >>> mensaje.split(\" \") ['Hola', 'mundo,', 'me', 'llamo', 'sincorchetes', 'y', 'estamos', 'en', 'echemosunbitstazo.es'] Busca en el str un str y devuelve el n\u00ba de coincidencias >>> hi = \"Hello\" >>> hi.count(\"l\") 2 Convertir todos los caracteres de un str a may\u00fasculas >>> hi = \"Hello\" >>> hi.upper() 'HELLO' Convertir todos los caracteres de un str a min\u00fasculas >>> hi = \"HELLO\" >>> hi.lower() 'hello' Convertir el primer caracter de un str en may\u00fascula >>> hi = \"hello\" >>> hi.capitalize() 'Hello' Obtener el valor m\u00e1ximo de un str >>> valor = \"!#aBcDeFghI\" >>> max(valor) 'h' Obtener el valor m\u00ednimo de un str >>> valor = \"!#aBcDeFghI\" >>> min(valor) '!' Constantes Las constantes como su nombre indica son valores que no se modificar\u00e1n a lo largo de la vida del programa. Sin embargo en Python no se declaran a lo mejor como en otro lenguaje tipo PHP. Para hacerlo en Python, tenemos que respetar una forma de trabajo y sintaxis espec\u00edficas. Crea un archivo llamado constantes.py Define en el variables, todas en may\u00fasculas y seguidas de \u00ab _ \u00bb. Importa tu archivo en tu proyecto. Llama a la constante. Veamos un ejemplo: Creamos el archivo constantes.py A\u00f1adimos las siguientes variables: IP_SERVIDOR = '127.0.0.1' PUERTO_SERVIDOR = 3306 NOMBRE_USUARIO = 'sincorchetes' PASS_USUARIO = 'Foo1234' NOMBRE_DB = 'Foo' Creamos un archivo main.py Importamos el archivo y mencionamos a la constante. import constantes print(constantes.IP_SERVIDOR) Veremos que tendremos una salida: 127.0.0.1 As\u00ed definir\u00edamos una constante en Python. Por otro lado, Python tiene unas constantes integradas que no estar\u00eda m\u00e1s echarles un vistazo, no son muchas, pero viene bien saberlas N\u00fameros Tenemos varios tipos de dato en Python como puede ser: int long (no se usa m\u00e1s en Python 3) float complex int o n\u00fameros enteros Este tipo de dato solo almacena n\u00fameros enteros ( positivos y negativos, nada de comas, ni decimales, ni fracciones ). Este tipo de dato no contiene ninguna restricci\u00f3n por parte del n\u00famero de bits en Python y puede expandirse el l\u00edmite de la memoria disponible. No se necesita ning\u00fan tipo de declaraci\u00f3n especial para almacenar n\u00fameros muy largos. >>> a = 1 >>> b = -2 >>> print(a - b) 3 float o n\u00famero de coma flotante Si necesitas utilizar decimales, este es el tipo de dato que buscar. >>> x = 20.30 >>> y = -33.99 >>> z = 100.12 >>> print(x - y - z) -45.83 complex o n\u00fameros complejos Se utilizan para diferentes tipos de c\u00e1lculos aplicados a la geometr\u00eda, f\u00edsica\u2026 La definici\u00f3n en Python es a+bj , d\u00f3nde a es el n\u00famero que se encuentra representado en los n\u00fameros reales; bj es el n\u00famero imaginario. >>> a = 2+3j >>> print(a) 2+3j Tipos de datos especiales Tenemos el valor None que viene a ser el valor null en otros lenguajes como SQL, se suele utilizar para declarar un campo con este valor \u00a1ojo, esto no quiere decir que est\u00e9 vac\u00edo!","title":"Funci\u00f3n print()"},{"location":"desarrollo/python/funciones-print-type-tipos-de-datos/#funcion-print","text":"Esta funci\u00f3n se utiliza para imprimir valores por lo que nos podemos imaginar lo que podemos imprimir, resultados de funciones, valores asignados a variables, textos\u2026etc. print(\"Hello World\") Esta sentencia imprime en pantalla Hello World. M\u00e1s adelante, veremos distintos usos de c\u00f3mo utilizar esta funci\u00f3n como por ejemplo, sustituciones de valores por variables\u2026","title":"Funci\u00f3n print()"},{"location":"desarrollo/python/funciones-print-type-tipos-de-datos/#funcion-type","text":"Esta funci\u00f3n nos permite averiguar el tipo de dato que estamos tratando. >>> type(\"Hello World\") O asign\u00e1ndolo en una variable y despu\u00e9s imprimirlo: >>> type(\"Hello World\") Esto nos devolver\u00e1 un mensaje como: <class 'str'> indicando que es un str o cadena. Si probamos con un n\u00ba entero como el 2 nos devolver\u00e1 <class 'int'> : >>> type(2) type() y print() son unas de las funciones m\u00e1s utilizadas, sobre todo para cuando tengamos que hacer depuraci\u00f3n y revisar por qu\u00e9 en nuestro c\u00f3digo hay cosas que no funcionan si estamos tratando con tipos de datos. Tipos de datos en Python (Literals) Cadenas o strings Constantes N\u00famericos Especiales","title":"Funci\u00f3n type()"},{"location":"desarrollo/python/funciones-print-type-tipos-de-datos/#cadenas-o-strings","text":"Se forman encerrando un texto utilizando (\u00bb \u00ab) \u00f3 (\u201c \u201c). Por ejemplo: helloWorld = \"Hello world\" helloWorld = 'Hello world'","title":"Cadenas o strings"},{"location":"desarrollo/python/funciones-print-type-tipos-de-datos/#se-puede-definir-cadenas-con-multiples-lineas","text":"1helloWorldMessage = ''' 2Este es un mensaje para toda la civilizaci\u00f3n. 3Todos(as) aquellos(as) que no se interesen por la historia, 4estar\u00e1n condenados(as) a repetir los mismos errores que se 5cometieron en el pasado. '''","title":"Se puede definir cadenas con m\u00faltiples l\u00edneas"},{"location":"desarrollo/python/funciones-print-type-tipos-de-datos/#obtener-la-primera-letra-de-un-str","text":">>> mensaje = \"Hola mundo\" >>> print(mensaje[0]) h","title":"Obtener la primera letra de un str"},{"location":"desarrollo/python/funciones-print-type-tipos-de-datos/#obtener-letras-de-un-str-a-partir-de-un-rango","text":">>> mensaje = \"Hola mundo\" >>> print(mensaje[0:4]) hola","title":"Obtener letras de un str a partir de un rango"},{"location":"desarrollo/python/funciones-print-type-tipos-de-datos/#conseguir-la-posicion-de-un-str-en-un-str","text":">>> mensaje = \"Hola mundo, me llamo sincorchetes y estamos en echemosunbitstazo.es\" >>> mensaje.find(\"me\") 12 Si nos ponemos a contar ( desde 0 siempre ) caracter por caracter ( incluyendo los espacios y , ), obtendremos el n\u00famero 12.","title":"Conseguir la posici\u00f3n de un str en un str"},{"location":"desarrollo/python/funciones-print-type-tipos-de-datos/#reemplazar-un-str-dentro-de-un-str","text":">>> mensaje = \"Hola mundo, me llamo sincorchetes y estamos en echemosunbitstazo.es\" >>> mensaje.replace(\"sincorchetes\",\"anonymous\") 'Hola mundo, me llamo anonymous y estamos en echemosunbitstazo.es'","title":"Reemplazar un str dentro de un str"},{"location":"desarrollo/python/funciones-print-type-tipos-de-datos/#separar-un-str-cuando-encuentre-un-caracter-especifico-y-devolver-el-resultado-como-una-lista","text":">>> mensaje = \"Hola mundo, me llamo sincorchetes y estamos en echemosunbitstazo.es\" >>> mensaje.split(\" \") ['Hola', 'mundo,', 'me', 'llamo', 'sincorchetes', 'y', 'estamos', 'en', 'echemosunbitstazo.es']","title":"Separar un str cuando encuentre un caracter espec\u00edfico y devolver el resultado como una lista"},{"location":"desarrollo/python/funciones-print-type-tipos-de-datos/#busca-en-el-str-un-str-y-devuelve-el-no-de-coincidencias","text":">>> hi = \"Hello\" >>> hi.count(\"l\") 2","title":"Busca en el str un str y devuelve el n\u00ba de coincidencias"},{"location":"desarrollo/python/funciones-print-type-tipos-de-datos/#convertir-todos-los-caracteres-de-un-str-a-mayusculas","text":">>> hi = \"Hello\" >>> hi.upper() 'HELLO'","title":"Convertir todos los caracteres de un str a may\u00fasculas"},{"location":"desarrollo/python/funciones-print-type-tipos-de-datos/#convertir-todos-los-caracteres-de-un-str-a-minusculas","text":">>> hi = \"HELLO\" >>> hi.lower() 'hello'","title":"Convertir todos los caracteres de un str a min\u00fasculas"},{"location":"desarrollo/python/funciones-print-type-tipos-de-datos/#convertir-el-primer-caracter-de-un-str-en-mayuscula","text":">>> hi = \"hello\" >>> hi.capitalize() 'Hello'","title":"Convertir el primer caracter de un str en may\u00fascula"},{"location":"desarrollo/python/funciones-print-type-tipos-de-datos/#obtener-el-valor-maximo-de-un-str","text":">>> valor = \"!#aBcDeFghI\" >>> max(valor) 'h'","title":"Obtener el valor m\u00e1ximo de un str"},{"location":"desarrollo/python/funciones-print-type-tipos-de-datos/#obtener-el-valor-minimo-de-un-str","text":">>> valor = \"!#aBcDeFghI\" >>> min(valor) '!'","title":"Obtener el valor m\u00ednimo de un str"},{"location":"desarrollo/python/funciones-print-type-tipos-de-datos/#constantes","text":"Las constantes como su nombre indica son valores que no se modificar\u00e1n a lo largo de la vida del programa. Sin embargo en Python no se declaran a lo mejor como en otro lenguaje tipo PHP. Para hacerlo en Python, tenemos que respetar una forma de trabajo y sintaxis espec\u00edficas. Crea un archivo llamado constantes.py Define en el variables, todas en may\u00fasculas y seguidas de \u00ab _ \u00bb. Importa tu archivo en tu proyecto. Llama a la constante. Veamos un ejemplo: Creamos el archivo constantes.py A\u00f1adimos las siguientes variables: IP_SERVIDOR = '127.0.0.1' PUERTO_SERVIDOR = 3306 NOMBRE_USUARIO = 'sincorchetes' PASS_USUARIO = 'Foo1234' NOMBRE_DB = 'Foo' Creamos un archivo main.py Importamos el archivo y mencionamos a la constante. import constantes print(constantes.IP_SERVIDOR) Veremos que tendremos una salida: 127.0.0.1 As\u00ed definir\u00edamos una constante en Python. Por otro lado, Python tiene unas constantes integradas que no estar\u00eda m\u00e1s echarles un vistazo, no son muchas, pero viene bien saberlas","title":"Constantes"},{"location":"desarrollo/python/funciones-print-type-tipos-de-datos/#numeros","text":"Tenemos varios tipos de dato en Python como puede ser: int long (no se usa m\u00e1s en Python 3) float complex","title":"N\u00fameros"},{"location":"desarrollo/python/funciones-print-type-tipos-de-datos/#int-o-numeros-enteros","text":"Este tipo de dato solo almacena n\u00fameros enteros ( positivos y negativos, nada de comas, ni decimales, ni fracciones ). Este tipo de dato no contiene ninguna restricci\u00f3n por parte del n\u00famero de bits en Python y puede expandirse el l\u00edmite de la memoria disponible. No se necesita ning\u00fan tipo de declaraci\u00f3n especial para almacenar n\u00fameros muy largos. >>> a = 1 >>> b = -2 >>> print(a - b) 3","title":"int o n\u00fameros enteros"},{"location":"desarrollo/python/funciones-print-type-tipos-de-datos/#float-o-numero-de-coma-flotante","text":"Si necesitas utilizar decimales, este es el tipo de dato que buscar. >>> x = 20.30 >>> y = -33.99 >>> z = 100.12 >>> print(x - y - z) -45.83","title":"float o n\u00famero de coma flotante"},{"location":"desarrollo/python/funciones-print-type-tipos-de-datos/#complex-o-numeros-complejos","text":"Se utilizan para diferentes tipos de c\u00e1lculos aplicados a la geometr\u00eda, f\u00edsica\u2026 La definici\u00f3n en Python es a+bj , d\u00f3nde a es el n\u00famero que se encuentra representado en los n\u00fameros reales; bj es el n\u00famero imaginario. >>> a = 2+3j >>> print(a) 2+3j","title":"complex o n\u00fameros complejos"},{"location":"desarrollo/python/funciones-print-type-tipos-de-datos/#tipos-de-datos-especiales","text":"Tenemos el valor None que viene a ser el valor null en otros lenguajes como SQL, se suele utilizar para declarar un campo con este valor \u00a1ojo, esto no quiere decir que est\u00e9 vac\u00edo!","title":"Tipos de datos especiales"},{"location":"desarrollo/python/imprimir-valores-y-funciones/","text":"Imprimir valores y funciones Sustituci\u00f3n de tipos de datos en sentencias print() Cuando queremos incluir un valor que proviene de variables, listas, sets, tuplas\u2026 se pueden hacer de m\u00faltiples formas. Por ejemplo: variable = \"Susana\" print(\"Hola me llamo:\", variable) Hola me llamo Susana. Podemos hacerlo de esta forma: variable = \"Susana\" print(\"Hola me llamo: %s\" % variable) Hola me llamo Susana. Tenemos que tener en cuenta que de esta manera, hay que definir si el dato que vamos a sustituir es str = %s% , int = %i , float = %f . Nota Los valores de tipo complex = %c no tienen sustituci\u00f3n directa en esta forma, por lo que hay que utilizar otro m\u00e9todo como en el anterior. O de esta otra: variable = Susana print(f'Hola me llamo {variable}') Tambi\u00e9n tenemos esta otra: variable = \"Susana\" print(\"Hola me llamo {}\".format(variable)) En fin, hay muchas formas de hacer sustituciones en los str y en otros tipos de datos que puedes consultar en la documentaci\u00f3n oficial Iteradores Un iterador es una especie de puntero que permite devolver valores que le especifiquemos. lista= [\"Hola\",\"esto\",\"es\",\"un\",\"ejemplo\",\"de\",\"iterador\"] # Inicializamos el iterador mi_iterador = iter(lista) # Se puede imprimir el valor de esta manera, que devuelve la palabra Hola print(next(mi_iterador)) # Pasamos al siguiente iterador que contiene la palabra \"esto\", pero no la imprimimos. next(mi_iterador) # Imprimimos la palabra \"es\" print(next(mi_iterador)) # Imprimir todos los elementos del iterador: for item in mi_iterador: print(item) Funciones Conjunto de c\u00f3digo organizado y que contienen una serie de instrucciones que pueden reutilizarse. Por ejemplo, dormir es una funci\u00f3n que tenemos, hay m\u00faltiples variables como el lugar, la intensidad de la luz, si estamos c\u00f3modos\u2026 pero que al final el resultado es descansar. Lo mismo sucede con las funciones. Declaraci\u00f3n de ejemplo de una funci\u00f3n: def my_funcion(): # Bloque de c\u00f3digo return return` permite devolver un valor de la funci\u00f3n y darla por terminada m\u00e1s que utilizar un `print() def func(a): return a valor=func(12) print(valor) yield En contra posici\u00f3n de return , yield permite seguir aplicando el c\u00f3digo que venga m\u00e1s adelante de la funci\u00f3n creando una especie de co-rutina o gesti\u00f3n de resultados o ejecuci\u00f3n por turnos, como si fuera un corredor de atletismo que le pasa el testigo a otro y su marca de tiempo es el valor de retorno. Hacemos uso de los iteradores para extraer los datos. def func(a): print(\"Devolvemos el primer resultado: %i\" % (a)) yield a c = a - 2 print(\"Devolvemos el segundo valor: %i\" % (c)) yield c abc = func(20) mi_iter = iter(abc) for item in mi_iter: print(item) Tipos de funciones en Python En Python, tenemos 2 tipos de funciones, una que creamos nosotros y otras que vienen integradas. Las que nosotros creamos las definimos en nuestra aplicaci\u00f3n, script\u2026 mientras que las integradas, vienen con la instalaci\u00f3n de Python que ya fueron elaboradas y que puedes utilizar como: len() , max() , min(), :code: type() , range()`\u2026 Veamos un ejemplo: >>> def hola_mundo(): >>> print(\"Hola Mundo\") >>> hola_mundo() Hola Mundo Podemos pasar todo tipo de valores, por ejemplo, pasaremos una lista como valor y un n\u00famero entero: >>> lugares = [ \"Toronto\", \"Tokio\", \"Nueva Zelanda\" ] >>> def mostrar_lugares(valores): >>> for lugar in valores: >>> print(lugar) >>> mostrar_lugares(lugares) Toronto Tokio Nueva Zelanda Asignar una funci\u00f3n a una variable Podemos asignar una funci\u00f3n a una variable y llamarla como funci\u00f3n desde la propia variable: def mensaje(msg): print(msg) segundo=mensaje # Imprime \"Mundo\" segundo(\"Mundo\") Asignar valores por defecto a los argumentos Si no le decimos o especificamos un valor cuando llamamos a la funci\u00f3n, podemos hacer que tome par\u00e1metros por defecto. def test(variable=\"Valor que queremos\") print(variable) test() Esto devolver\u00e1 \u00abValor que queremos\u00bb, si especificamos un valor tal que as\u00ed: test(\"Hola mundo\") Devolver\u00e1 Hola mundo Closures Los closures es un objeto especial que permite obtener informaci\u00f3n de otras funciones hijas que forman parte de una funci\u00f3n padre, permiten dar m\u00e1s seguridad al c\u00f3digo ya que todo lo que tenga que ejecutarse se har\u00e1 dentro de ese \u00e1mbito o scope . Ejemplo de closure: def func(x): def func_a(): print(x) return func_a() Generadores Son funciones que crean iteradores, estas funciones realmente son objetos en Python. Si hacemos un print sobre la funci\u00f3n, veremos <generator object mensaje at 0x7f31a4957250> , es muy importante saberlo. No solo podemos trabajar con return , tambi\u00e9n con yield . def mensaje(msg): def lector(): print(msg, \"%s\" % (\"leido por un lector.\")) def escritor(): print(msg, \"%s\" % (\"escrito por un escritor.\")) yield lector() yield escritor() ejemplo = mensaje(\"Alguien escribi\u00f3 este mensaje y ha sido\") for item in ejemplo: if item is None: pass else: print(item) Funci\u00f3n Lambda Esta funci\u00f3n no tiene nombre tambi\u00e9n se le conoce como funci\u00f3n an\u00f3nima, sin embargo, no puede contener m\u00e1s de una expresi\u00f3n: >>> x = lambda a : a + 10 >>> resultado = x(5) >>> print(resultado) 15 Si lo pasamos a funci\u00f3n esto ser\u00eda as\u00ed: >>> def sumar(a,b): >>> return a + b >>> sumar(5,10) 15","title":"Imprimir valores y funciones"},{"location":"desarrollo/python/imprimir-valores-y-funciones/#imprimir-valores-y-funciones","text":"","title":"Imprimir valores y funciones"},{"location":"desarrollo/python/imprimir-valores-y-funciones/#sustitucion-de-tipos-de-datos-en-sentencias-print","text":"Cuando queremos incluir un valor que proviene de variables, listas, sets, tuplas\u2026 se pueden hacer de m\u00faltiples formas. Por ejemplo: variable = \"Susana\" print(\"Hola me llamo:\", variable) Hola me llamo Susana. Podemos hacerlo de esta forma: variable = \"Susana\" print(\"Hola me llamo: %s\" % variable) Hola me llamo Susana. Tenemos que tener en cuenta que de esta manera, hay que definir si el dato que vamos a sustituir es str = %s% , int = %i , float = %f . Nota Los valores de tipo complex = %c no tienen sustituci\u00f3n directa en esta forma, por lo que hay que utilizar otro m\u00e9todo como en el anterior. O de esta otra: variable = Susana print(f'Hola me llamo {variable}') Tambi\u00e9n tenemos esta otra: variable = \"Susana\" print(\"Hola me llamo {}\".format(variable)) En fin, hay muchas formas de hacer sustituciones en los str y en otros tipos de datos que puedes consultar en la documentaci\u00f3n oficial","title":"Sustituci\u00f3n de tipos de datos en sentencias print()"},{"location":"desarrollo/python/imprimir-valores-y-funciones/#iteradores","text":"Un iterador es una especie de puntero que permite devolver valores que le especifiquemos. lista= [\"Hola\",\"esto\",\"es\",\"un\",\"ejemplo\",\"de\",\"iterador\"] # Inicializamos el iterador mi_iterador = iter(lista) # Se puede imprimir el valor de esta manera, que devuelve la palabra Hola print(next(mi_iterador)) # Pasamos al siguiente iterador que contiene la palabra \"esto\", pero no la imprimimos. next(mi_iterador) # Imprimimos la palabra \"es\" print(next(mi_iterador)) # Imprimir todos los elementos del iterador: for item in mi_iterador: print(item)","title":"Iteradores"},{"location":"desarrollo/python/imprimir-valores-y-funciones/#funciones","text":"Conjunto de c\u00f3digo organizado y que contienen una serie de instrucciones que pueden reutilizarse. Por ejemplo, dormir es una funci\u00f3n que tenemos, hay m\u00faltiples variables como el lugar, la intensidad de la luz, si estamos c\u00f3modos\u2026 pero que al final el resultado es descansar. Lo mismo sucede con las funciones. Declaraci\u00f3n de ejemplo de una funci\u00f3n: def my_funcion(): # Bloque de c\u00f3digo","title":"Funciones"},{"location":"desarrollo/python/imprimir-valores-y-funciones/#return","text":"return` permite devolver un valor de la funci\u00f3n y darla por terminada m\u00e1s que utilizar un `print() def func(a): return a valor=func(12) print(valor)","title":"return"},{"location":"desarrollo/python/imprimir-valores-y-funciones/#yield","text":"En contra posici\u00f3n de return , yield permite seguir aplicando el c\u00f3digo que venga m\u00e1s adelante de la funci\u00f3n creando una especie de co-rutina o gesti\u00f3n de resultados o ejecuci\u00f3n por turnos, como si fuera un corredor de atletismo que le pasa el testigo a otro y su marca de tiempo es el valor de retorno. Hacemos uso de los iteradores para extraer los datos. def func(a): print(\"Devolvemos el primer resultado: %i\" % (a)) yield a c = a - 2 print(\"Devolvemos el segundo valor: %i\" % (c)) yield c abc = func(20) mi_iter = iter(abc) for item in mi_iter: print(item)","title":"yield"},{"location":"desarrollo/python/imprimir-valores-y-funciones/#tipos-de-funciones-en-python","text":"En Python, tenemos 2 tipos de funciones, una que creamos nosotros y otras que vienen integradas. Las que nosotros creamos las definimos en nuestra aplicaci\u00f3n, script\u2026 mientras que las integradas, vienen con la instalaci\u00f3n de Python que ya fueron elaboradas y que puedes utilizar como: len() , max() , min(), :code: type() , range()`\u2026 Veamos un ejemplo: >>> def hola_mundo(): >>> print(\"Hola Mundo\") >>> hola_mundo() Hola Mundo Podemos pasar todo tipo de valores, por ejemplo, pasaremos una lista como valor y un n\u00famero entero: >>> lugares = [ \"Toronto\", \"Tokio\", \"Nueva Zelanda\" ] >>> def mostrar_lugares(valores): >>> for lugar in valores: >>> print(lugar) >>> mostrar_lugares(lugares) Toronto Tokio Nueva Zelanda","title":"Tipos de funciones en Python"},{"location":"desarrollo/python/imprimir-valores-y-funciones/#asignar-una-funcion-a-una-variable","text":"Podemos asignar una funci\u00f3n a una variable y llamarla como funci\u00f3n desde la propia variable: def mensaje(msg): print(msg) segundo=mensaje # Imprime \"Mundo\" segundo(\"Mundo\")","title":"Asignar una funci\u00f3n a una variable"},{"location":"desarrollo/python/imprimir-valores-y-funciones/#asignar-valores-por-defecto-a-los-argumentos","text":"Si no le decimos o especificamos un valor cuando llamamos a la funci\u00f3n, podemos hacer que tome par\u00e1metros por defecto. def test(variable=\"Valor que queremos\") print(variable) test() Esto devolver\u00e1 \u00abValor que queremos\u00bb, si especificamos un valor tal que as\u00ed: test(\"Hola mundo\") Devolver\u00e1 Hola mundo","title":"Asignar valores por defecto a los argumentos"},{"location":"desarrollo/python/imprimir-valores-y-funciones/#closures","text":"Los closures es un objeto especial que permite obtener informaci\u00f3n de otras funciones hijas que forman parte de una funci\u00f3n padre, permiten dar m\u00e1s seguridad al c\u00f3digo ya que todo lo que tenga que ejecutarse se har\u00e1 dentro de ese \u00e1mbito o scope . Ejemplo de closure: def func(x): def func_a(): print(x) return func_a()","title":"Closures"},{"location":"desarrollo/python/imprimir-valores-y-funciones/#generadores","text":"Son funciones que crean iteradores, estas funciones realmente son objetos en Python. Si hacemos un print sobre la funci\u00f3n, veremos <generator object mensaje at 0x7f31a4957250> , es muy importante saberlo. No solo podemos trabajar con return , tambi\u00e9n con yield . def mensaje(msg): def lector(): print(msg, \"%s\" % (\"leido por un lector.\")) def escritor(): print(msg, \"%s\" % (\"escrito por un escritor.\")) yield lector() yield escritor() ejemplo = mensaje(\"Alguien escribi\u00f3 este mensaje y ha sido\") for item in ejemplo: if item is None: pass else: print(item)","title":"Generadores"},{"location":"desarrollo/python/imprimir-valores-y-funciones/#funcion-lambda","text":"Esta funci\u00f3n no tiene nombre tambi\u00e9n se le conoce como funci\u00f3n an\u00f3nima, sin embargo, no puede contener m\u00e1s de una expresi\u00f3n: >>> x = lambda a : a + 10 >>> resultado = x(5) >>> print(resultado) 15 Si lo pasamos a funci\u00f3n esto ser\u00eda as\u00ed: >>> def sumar(a,b): >>> return a + b >>> sumar(5,10) 15","title":"Funci\u00f3n Lambda"},{"location":"desarrollo/python/instalacion/","text":"Instalaci\u00f3n Python por norma general est\u00e1 instalado por defecto en el 99% de distribuciones de Linux por lo que no te har\u00e1 falta tener que instalar nada. Sin embargo, hay distribuciones que a pesar de que Python 2. se encuentre obsoleto, la mayor parte de librer\u00edas y programas que contienen en su sistema operativo hacen uso de la versi\u00f3n 2.7. que fue la \u00faltima en mantenerse. Por lo que, quiz\u00e1s necesites realizar unos pasos adicionales para tener Python 3.* instalado en tu Linux. Algunas distribuciones pueden ser: CentOS 6/7 Debian Stable RHEL 6/7 Gentoo En FreeBSD y OpenBSD hay que instalarlo con su respectiva paquer\u00eda, puedes utilizar estas gu\u00eda oficial de Python para hacerlo En Windows tenemos dos formas de hacerlo, una es utilizando el subsistema de Linux para Windows haciendo uso de un sistema Linux ejecut\u00e1ndose en un Windows, o bien, la forma oficial que es utilizar el instalador oficial elaborado por la comunidad de Python. Para descarganos el instalador hay que dirigirse a la p\u00e1gina de descargas pulsando aqu\u00ed Una vez descargado, ejecutamos el instalador y seguimos los pasos como tenemos en las im\u00e1genes: Desmarcamos la opci\u00f3n de instalar para todos y marcamos la opci\u00f3n de a\u00f1adir a la variable PATH, despu\u00e9s \u00abInstall Now\u00bb: Vemos como se est\u00e1 instalando: En este paso, deshabilitamos el path lenght limit: Y desde PowerShell podemos abrir el ejecutable directamente, veremos la versi\u00f3n que estamos utilizando. IDEs Hay una gran selecci\u00f3n de IDEs bastante buenos que podemos utilizar para aprender, hay tanto de pago, gratuitos, libres y no libres\u2026 hay un gran abanico para decidir. IDLE Un IDE que viene integrado con Python ( incluyendo en la instalaci\u00f3n de Windows en la que hemos hablado m\u00e1s arriba ). Permite ejecutar c\u00f3digo directamente, depurarlo y tiene un peque\u00f1o editor d\u00f3nde realizar nuestras modificaciones. Spyder Es un IDE gratuito y libre que contiene multitud de funciones desde depuraci\u00f3n, ejecuci\u00f3n y redacci\u00f3n de un archivo en Python todo en una misma ventana. Pues ver m\u00e1s info en su p\u00e1ginas web Jupyter Notebook Es un servidor web que mediante estilos, javascripts y html5 genera un IDE web con el que poder interactuar, al igual que todos permite depurar, crear archivos, navegar por los directorios del sistema operativo\u2026etc Jupyter Navegando por los directorios del SO desde su interfaz web Ejecutando comandos de Python en un archivo nuevo Abriendo una sesi\u00f3n de SO desde Web Jupyter labs Basado en Jupyter Notebook y Arquitecture contiene m\u00e1s caracter\u00edsticas, como especificar qu\u00e9 versi\u00f3n de Python lanzar, ejecutar una consola directamente de Python o de SO\u2026 M\u00e1s info en Jupiter Anaconda Anaconda es un software que contiene todo lo necesario para desplegar un entorno de desarrollo de Python tanto en Linux como en Windows. No solo contiene el int\u00e9rprete, si no que tambi\u00e9n tienen varios editores que puedes seleccionar desde su panel \u00abAnaconda Navitator\u00bb. M\u00e1s info en su p\u00e1gina PyCharm PyCharm es un software elaborado por la empresa JetBrains, es bastante conocido porque tiene un potente interfaz de desarrollo que permite hacer carga de espacios de nombres, m\u00f3dulos, referencias\u2026 y es muy potente. Aunque es de pago, si eres estudiante y tienes la ISIC puedes obtener una licencia anual gratuita para todos los productos de la empresa como DataGrid, PhpStorm, CLion\u2026 y poder hacer tus desarrollos ( siempre personales y no comerciales ) con \u00e9l. No obstante, si no eres estudiante, y no quieres comprar la licencia, puedes hacer uso de la versi\u00f3n comunitaria. M\u00e1s info Editores Si no te gusta utilizar un IDE, siempre puedes hacer uso de editores como vim , Sublime Text , VS Code con sus correspondientes plugins.","title":"Instalaci\u00f3n"},{"location":"desarrollo/python/instalacion/#instalacion","text":"Python por norma general est\u00e1 instalado por defecto en el 99% de distribuciones de Linux por lo que no te har\u00e1 falta tener que instalar nada. Sin embargo, hay distribuciones que a pesar de que Python 2. se encuentre obsoleto, la mayor parte de librer\u00edas y programas que contienen en su sistema operativo hacen uso de la versi\u00f3n 2.7. que fue la \u00faltima en mantenerse. Por lo que, quiz\u00e1s necesites realizar unos pasos adicionales para tener Python 3.* instalado en tu Linux. Algunas distribuciones pueden ser: CentOS 6/7 Debian Stable RHEL 6/7 Gentoo En FreeBSD y OpenBSD hay que instalarlo con su respectiva paquer\u00eda, puedes utilizar estas gu\u00eda oficial de Python para hacerlo En Windows tenemos dos formas de hacerlo, una es utilizando el subsistema de Linux para Windows haciendo uso de un sistema Linux ejecut\u00e1ndose en un Windows, o bien, la forma oficial que es utilizar el instalador oficial elaborado por la comunidad de Python. Para descarganos el instalador hay que dirigirse a la p\u00e1gina de descargas pulsando aqu\u00ed Una vez descargado, ejecutamos el instalador y seguimos los pasos como tenemos en las im\u00e1genes: Desmarcamos la opci\u00f3n de instalar para todos y marcamos la opci\u00f3n de a\u00f1adir a la variable PATH, despu\u00e9s \u00abInstall Now\u00bb: Vemos como se est\u00e1 instalando: En este paso, deshabilitamos el path lenght limit: Y desde PowerShell podemos abrir el ejecutable directamente, veremos la versi\u00f3n que estamos utilizando.","title":"Instalaci\u00f3n"},{"location":"desarrollo/python/instalacion/#ides","text":"Hay una gran selecci\u00f3n de IDEs bastante buenos que podemos utilizar para aprender, hay tanto de pago, gratuitos, libres y no libres\u2026 hay un gran abanico para decidir.","title":"IDEs"},{"location":"desarrollo/python/instalacion/#idle","text":"Un IDE que viene integrado con Python ( incluyendo en la instalaci\u00f3n de Windows en la que hemos hablado m\u00e1s arriba ). Permite ejecutar c\u00f3digo directamente, depurarlo y tiene un peque\u00f1o editor d\u00f3nde realizar nuestras modificaciones.","title":"IDLE"},{"location":"desarrollo/python/instalacion/#spyder","text":"Es un IDE gratuito y libre que contiene multitud de funciones desde depuraci\u00f3n, ejecuci\u00f3n y redacci\u00f3n de un archivo en Python todo en una misma ventana. Pues ver m\u00e1s info en su p\u00e1ginas web","title":"Spyder"},{"location":"desarrollo/python/instalacion/#jupyter-notebook","text":"Es un servidor web que mediante estilos, javascripts y html5 genera un IDE web con el que poder interactuar, al igual que todos permite depurar, crear archivos, navegar por los directorios del sistema operativo\u2026etc Jupyter Navegando por los directorios del SO desde su interfaz web Ejecutando comandos de Python en un archivo nuevo Abriendo una sesi\u00f3n de SO desde Web","title":"Jupyter Notebook"},{"location":"desarrollo/python/instalacion/#jupyter-labs","text":"Basado en Jupyter Notebook y Arquitecture contiene m\u00e1s caracter\u00edsticas, como especificar qu\u00e9 versi\u00f3n de Python lanzar, ejecutar una consola directamente de Python o de SO\u2026 M\u00e1s info en Jupiter","title":"Jupyter labs"},{"location":"desarrollo/python/instalacion/#anaconda","text":"Anaconda es un software que contiene todo lo necesario para desplegar un entorno de desarrollo de Python tanto en Linux como en Windows. No solo contiene el int\u00e9rprete, si no que tambi\u00e9n tienen varios editores que puedes seleccionar desde su panel \u00abAnaconda Navitator\u00bb. M\u00e1s info en su p\u00e1gina","title":"Anaconda"},{"location":"desarrollo/python/instalacion/#pycharm","text":"PyCharm es un software elaborado por la empresa JetBrains, es bastante conocido porque tiene un potente interfaz de desarrollo que permite hacer carga de espacios de nombres, m\u00f3dulos, referencias\u2026 y es muy potente. Aunque es de pago, si eres estudiante y tienes la ISIC puedes obtener una licencia anual gratuita para todos los productos de la empresa como DataGrid, PhpStorm, CLion\u2026 y poder hacer tus desarrollos ( siempre personales y no comerciales ) con \u00e9l. No obstante, si no eres estudiante, y no quieres comprar la licencia, puedes hacer uso de la versi\u00f3n comunitaria. M\u00e1s info","title":"PyCharm"},{"location":"desarrollo/python/instalacion/#editores","text":"Si no te gusta utilizar un IDE, siempre puedes hacer uso de editores como vim , Sublime Text , VS Code con sus correspondientes plugins.","title":"Editores"},{"location":"desarrollo/python/introducir-datos-y-control-de-excepciones/","text":"Obtener datos introducidos por el usuario Tenemos una funci\u00f3n que es input() y podemos solicitar al usuario que introduzca un dato y que este se almacene en una variable, esto nos puede ayudar a dinamizar los programas interactuando con los usuarios: input('Aqu\u00ed va un mensaje') Nota Los datos introducidos se almacenan como un str , por lo que si quieres almacenar datos tipo float , int tendr\u00e1s que usar la funci\u00f3n de conversi\u00f3n que hemos hablado en el apartado de Tipos de datos en Python. Vamos hacer este ejemplo: nombre = input(\"\u00bfC\u00f3mo te llamas? \") edad = int(input(\"\u00bfQu\u00e9 edad tienes? \")) print(\"Me llamo %s y tengo %i a\u00f1os.\" % (nombre,edad)) Imprimir\u00e1 un resultado como: \u00bfC\u00f3mo te llamas? Alvaro \u00bfQu\u00e9 edad tienes? 26 Me llamo \u00c1lvaro y tengo 26 a\u00f1os. Control de excepciones \u00bfQu\u00e9 ocurre si queremos ejecutar un c\u00f3digo y depende de una serie de datos que no se han inicializado? No pasa nada, tenemos un mecanismo que controla las excepciones. try-except try: # Bloque de c\u00f3digo que se probar\u00e1 antes de ejecutar except: # Bloque de c\u00f3digo que se ejecutar\u00e1 si ocurre alg\u00fan error. Por ejemplo: try: print(a) except: print(\"Hubo un problema.\") Esto nos imprimir\u00e1 Hubo un problema. pero no nos dice en ning\u00fan momento d\u00f3nde est\u00e1 el error. Evidentemente, el error es que la variable a no contiene ning\u00fan tipo de valor. Pero, \u00bfQu\u00e9 ocurre si quiero personalizar estos errores y mostrar informaci\u00f3n seg\u00fan convenga? No pasa nada, podemos a\u00f1adir excepciones por error, por ejemplo, si la variable a no exist\u00eda, podemos crear una excepci\u00f3n que permita decir que no existe porque no est\u00e1 creada de la siguiente forma. Primero identificamos como se llama el error en Python: print(A) Traceback (most recent call last): File \"/tmp/untitled0.py\", line 9, in <module> print(a) NameError: name 'a' is not defined El nombre del error que tenemos que utilizar es NameError . Definimos el try-except de la siguiente manera: try: print(a) except NameError: print(\"La variable no se ha asignao, por favor, revisa el programa.\") except: print(\"Hubo un problema, contacte con el desarrollador de la aplicaci\u00f3n.\") \u00bfSe pueden definir m\u00faltiples errores y que impiman un mensaje? S\u00ed que se puede, esto adem\u00e1s nos permite ahorrar mucho c\u00f3digo. try: pass except(NameError, TypeError, ValueError): pass except: pass Tambi\u00e9n podemos usar un alias e imprimir solo el mensaje de error: try: print(a) except(NameError, TypeError, ValueError) as EstoEsUnError: print(EstoEsUnError) except: pass \u00bfPara qu\u00e9 nos sirve esto? Para tener un mayor control en la validaci\u00f3n e impresi\u00f3n de nuestro c\u00f3digo. EstoEsUnError imprimir\u00e1: NameError: name 'a' is not defined , con este str podemos iniciar una validaci\u00f3n on if-elif-else . with with es un m\u00e9todo que permite realizar acciones que posteriormente necesitan limpiarse para que no queden restos en memoria, un ejemplo muy com\u00fan y extendido es cuando se trabaja con archivos. with open('nombreArchivo.ext', modo') as fichero: # Bloque de c\u00f3digo Cuando abrimos el archivo de esta forma, aunque hayan problemas con el archivo, este termina cerr\u00e1ndose y dejando de existir en la memoria. Sin embargo, si trabajamos con el archivo de la siguiente forma, el archivo quedar\u00e1 en la memoria de forma casi indefinida en el tiempo generando datos basura: fichero = open('nombreArchivo.ext','modo') Adem\u00e1s, de que hay que cerrarlo debidamente: fichero.close() En el siguiente punto trabajaremos m\u00e1s con los archivos, no nos alarmemos. Puedes consultar m\u00e1s informaci\u00f3n sobre este apartado en este hilo de la documentaci\u00f3n. Trabajando con archivos en Python \u00bfQu\u00e9 podemos hacer en Python con los archivos? \u00bfPodemos trabajar con ellos? La cuesti\u00f3n es que s\u00ed, podemos abrir, leer, escribir o crear y eliminar archivos, las operaciones b\u00e1sicas que nos deja hacer un SO si estuvieramos en una shell como bash o zsh . Abriendo un archivo La sintaxis que se utiliza es: fichero = open(\"ruta del archivo\", modo) La sintaxis correcta , que debe usarse y que utilizaremos en estos ejemplos es: with open(\"ruta del archivo\", modo) as nombreFichero: # Bloque de c\u00f3digo Modo Descripci\u00f3n r Lectura, es el valor por defecto, abre el archivo para que se pueda leer y da un error si el archivo no existe. a Abre un archivo para agregarle informaci\u00f3n al final, si no existe el archivo lo crea. w Sobreescribe cualquier contendio que haya en el archivo que est\u00e9 abierto y/o crea el archivo si no existe. x Crea el archivo, si devuelve error quiere decir que ya existe. Leer archivo Creamos este archivo: $ cd /home/$USER/ $ cat << EOF >> hola.txt > Hola Mundo > EOF Si hacemos un cat hola.txt nos mostrar\u00e1 Hola Mundo . Bien, abrimos el archivo con Python >>> with open(\"hola.txt\",\"r\") as fichero: >>> fichero.read() Hola Mundo Este m\u00e9todo tambi\u00e9n permite decirle que nos imprima los n caracteres del principio del texto con .read(4) . Devuelve una l\u00ednea Si tenemos un archivo con m\u00e1s l\u00edneas, podemos imprimirlas con .readline() en vez de .read() . Sin embargo, si queremos imprimir mas l\u00edneas, tenemos que llamar varias veces al m\u00e9todo. >>> fichero.readline() >>> fichero.readline() Leer el archivo completo Con ayuda de un bucle for lo hacemos: >>> with open(\"ejemplo.txt\", \"r\") as fichero: >>> for linea in fichero: >>> print(linea) Creando un archivo nuevo Si el archivo existe, dar\u00e1 error. >>> with open(\"ejemplo.txt\", \"x\") as fichero: Cuando terminemos de escribir en un archivo, lo cerramos para que no quede en memoria. fichero.close() A\u00f1adir informaci\u00f3n al archivo En esta l\u00ednea a\u00f1adimos el siguiente texto. >>> with open(\"hola.txt\",\"a\") as fichero: >>> fichero.write(\"Esta es una l\u00ednea de ejemplo\") Cuando terminemos de escribir en un archivo, lo cerramos para que no quede en memoria. fichero.close() Sobreescribir en el archivo Sobreescribimos el archivo si lo abrimos con el modo w : >>> with open(\"hola.txt\",\"w\") as fichero: >>> fichero.write(\"Te he sobreescrito el contenido con esta l\u00ednea\") Cuando terminemos de escribir en un archivo, lo cerramos para que no quede en memoria. fichero.close() Eliminar un archivo Hay que importar un m\u00f3dulo llamado os : import os os.remove(\"hola.txt\")","title":"Obtener datos introducidos por el usuario"},{"location":"desarrollo/python/introducir-datos-y-control-de-excepciones/#obtener-datos-introducidos-por-el-usuario","text":"Tenemos una funci\u00f3n que es input() y podemos solicitar al usuario que introduzca un dato y que este se almacene en una variable, esto nos puede ayudar a dinamizar los programas interactuando con los usuarios: input('Aqu\u00ed va un mensaje') Nota Los datos introducidos se almacenan como un str , por lo que si quieres almacenar datos tipo float , int tendr\u00e1s que usar la funci\u00f3n de conversi\u00f3n que hemos hablado en el apartado de Tipos de datos en Python. Vamos hacer este ejemplo: nombre = input(\"\u00bfC\u00f3mo te llamas? \") edad = int(input(\"\u00bfQu\u00e9 edad tienes? \")) print(\"Me llamo %s y tengo %i a\u00f1os.\" % (nombre,edad)) Imprimir\u00e1 un resultado como: \u00bfC\u00f3mo te llamas? Alvaro \u00bfQu\u00e9 edad tienes? 26 Me llamo \u00c1lvaro y tengo 26 a\u00f1os.","title":"Obtener datos introducidos por el usuario"},{"location":"desarrollo/python/introducir-datos-y-control-de-excepciones/#control-de-excepciones","text":"\u00bfQu\u00e9 ocurre si queremos ejecutar un c\u00f3digo y depende de una serie de datos que no se han inicializado? No pasa nada, tenemos un mecanismo que controla las excepciones.","title":"Control de excepciones"},{"location":"desarrollo/python/introducir-datos-y-control-de-excepciones/#try-except","text":"try: # Bloque de c\u00f3digo que se probar\u00e1 antes de ejecutar except: # Bloque de c\u00f3digo que se ejecutar\u00e1 si ocurre alg\u00fan error. Por ejemplo: try: print(a) except: print(\"Hubo un problema.\") Esto nos imprimir\u00e1 Hubo un problema. pero no nos dice en ning\u00fan momento d\u00f3nde est\u00e1 el error. Evidentemente, el error es que la variable a no contiene ning\u00fan tipo de valor. Pero, \u00bfQu\u00e9 ocurre si quiero personalizar estos errores y mostrar informaci\u00f3n seg\u00fan convenga? No pasa nada, podemos a\u00f1adir excepciones por error, por ejemplo, si la variable a no exist\u00eda, podemos crear una excepci\u00f3n que permita decir que no existe porque no est\u00e1 creada de la siguiente forma. Primero identificamos como se llama el error en Python: print(A) Traceback (most recent call last): File \"/tmp/untitled0.py\", line 9, in <module> print(a) NameError: name 'a' is not defined El nombre del error que tenemos que utilizar es NameError . Definimos el try-except de la siguiente manera: try: print(a) except NameError: print(\"La variable no se ha asignao, por favor, revisa el programa.\") except: print(\"Hubo un problema, contacte con el desarrollador de la aplicaci\u00f3n.\") \u00bfSe pueden definir m\u00faltiples errores y que impiman un mensaje? S\u00ed que se puede, esto adem\u00e1s nos permite ahorrar mucho c\u00f3digo. try: pass except(NameError, TypeError, ValueError): pass except: pass Tambi\u00e9n podemos usar un alias e imprimir solo el mensaje de error: try: print(a) except(NameError, TypeError, ValueError) as EstoEsUnError: print(EstoEsUnError) except: pass \u00bfPara qu\u00e9 nos sirve esto? Para tener un mayor control en la validaci\u00f3n e impresi\u00f3n de nuestro c\u00f3digo. EstoEsUnError imprimir\u00e1: NameError: name 'a' is not defined , con este str podemos iniciar una validaci\u00f3n on if-elif-else .","title":"try-except"},{"location":"desarrollo/python/introducir-datos-y-control-de-excepciones/#with","text":"with es un m\u00e9todo que permite realizar acciones que posteriormente necesitan limpiarse para que no queden restos en memoria, un ejemplo muy com\u00fan y extendido es cuando se trabaja con archivos. with open('nombreArchivo.ext', modo') as fichero: # Bloque de c\u00f3digo Cuando abrimos el archivo de esta forma, aunque hayan problemas con el archivo, este termina cerr\u00e1ndose y dejando de existir en la memoria. Sin embargo, si trabajamos con el archivo de la siguiente forma, el archivo quedar\u00e1 en la memoria de forma casi indefinida en el tiempo generando datos basura: fichero = open('nombreArchivo.ext','modo') Adem\u00e1s, de que hay que cerrarlo debidamente: fichero.close() En el siguiente punto trabajaremos m\u00e1s con los archivos, no nos alarmemos. Puedes consultar m\u00e1s informaci\u00f3n sobre este apartado en este hilo de la documentaci\u00f3n.","title":"with"},{"location":"desarrollo/python/introducir-datos-y-control-de-excepciones/#trabajando-con-archivos-en-python","text":"\u00bfQu\u00e9 podemos hacer en Python con los archivos? \u00bfPodemos trabajar con ellos? La cuesti\u00f3n es que s\u00ed, podemos abrir, leer, escribir o crear y eliminar archivos, las operaciones b\u00e1sicas que nos deja hacer un SO si estuvieramos en una shell como bash o zsh .","title":"Trabajando con archivos en Python"},{"location":"desarrollo/python/introducir-datos-y-control-de-excepciones/#abriendo-un-archivo","text":"La sintaxis que se utiliza es: fichero = open(\"ruta del archivo\", modo) La sintaxis correcta , que debe usarse y que utilizaremos en estos ejemplos es: with open(\"ruta del archivo\", modo) as nombreFichero: # Bloque de c\u00f3digo Modo Descripci\u00f3n r Lectura, es el valor por defecto, abre el archivo para que se pueda leer y da un error si el archivo no existe. a Abre un archivo para agregarle informaci\u00f3n al final, si no existe el archivo lo crea. w Sobreescribe cualquier contendio que haya en el archivo que est\u00e9 abierto y/o crea el archivo si no existe. x Crea el archivo, si devuelve error quiere decir que ya existe.","title":"Abriendo un archivo"},{"location":"desarrollo/python/introducir-datos-y-control-de-excepciones/#leer-archivo","text":"Creamos este archivo: $ cd /home/$USER/ $ cat << EOF >> hola.txt > Hola Mundo > EOF Si hacemos un cat hola.txt nos mostrar\u00e1 Hola Mundo . Bien, abrimos el archivo con Python >>> with open(\"hola.txt\",\"r\") as fichero: >>> fichero.read() Hola Mundo Este m\u00e9todo tambi\u00e9n permite decirle que nos imprima los n caracteres del principio del texto con .read(4) .","title":"Leer archivo"},{"location":"desarrollo/python/introducir-datos-y-control-de-excepciones/#devuelve-una-linea","text":"Si tenemos un archivo con m\u00e1s l\u00edneas, podemos imprimirlas con .readline() en vez de .read() . Sin embargo, si queremos imprimir mas l\u00edneas, tenemos que llamar varias veces al m\u00e9todo. >>> fichero.readline() >>> fichero.readline()","title":"Devuelve una l\u00ednea"},{"location":"desarrollo/python/introducir-datos-y-control-de-excepciones/#leer-el-archivo-completo","text":"Con ayuda de un bucle for lo hacemos: >>> with open(\"ejemplo.txt\", \"r\") as fichero: >>> for linea in fichero: >>> print(linea)","title":"Leer el archivo completo"},{"location":"desarrollo/python/introducir-datos-y-control-de-excepciones/#creando-un-archivo-nuevo","text":"Si el archivo existe, dar\u00e1 error. >>> with open(\"ejemplo.txt\", \"x\") as fichero: Cuando terminemos de escribir en un archivo, lo cerramos para que no quede en memoria. fichero.close()","title":"Creando un archivo nuevo"},{"location":"desarrollo/python/introducir-datos-y-control-de-excepciones/#anadir-informacion-al-archivo","text":"En esta l\u00ednea a\u00f1adimos el siguiente texto. >>> with open(\"hola.txt\",\"a\") as fichero: >>> fichero.write(\"Esta es una l\u00ednea de ejemplo\") Cuando terminemos de escribir en un archivo, lo cerramos para que no quede en memoria. fichero.close()","title":"A\u00f1adir informaci\u00f3n al archivo"},{"location":"desarrollo/python/introducir-datos-y-control-de-excepciones/#sobreescribir-en-el-archivo","text":"Sobreescribimos el archivo si lo abrimos con el modo w : >>> with open(\"hola.txt\",\"w\") as fichero: >>> fichero.write(\"Te he sobreescrito el contenido con esta l\u00ednea\") Cuando terminemos de escribir en un archivo, lo cerramos para que no quede en memoria. fichero.close()","title":"Sobreescribir en el archivo"},{"location":"desarrollo/python/introducir-datos-y-control-de-excepciones/#eliminar-un-archivo","text":"Hay que importar un m\u00f3dulo llamado os : import os os.remove(\"hola.txt\")","title":"Eliminar un archivo"},{"location":"desarrollo/python/modulos/","text":"M\u00f3dulos \u00bfQu\u00e9 son los m\u00f3dulos? Los m\u00f3dulos son fragmentos de c\u00f3digo que contienen librer\u00edas\u2026 que elaboran otros usuarios o que ya vienen integradas con Python. Hay muchos m\u00f3dulos que vienen ya pre-instalados en el sistema como pueden ser os que permite interactuar con el sistema operativo; subprocess que permite ejecutar comandos de shell; json con el que podremos trabajar con archivos o salidas JSON\u2026 \u00bfC\u00f3mo cargar este c\u00f3digo? El c\u00f3digo de los m\u00f3dulos puede cargarse utilizando la palabra import , como en el siguiente ejemplo: >>> import json Tambi\u00e9n podemos cargar parte del c\u00f3digo de los m\u00f3dulos como por ejemplo random es un m\u00f3dulo que contiene m\u00e9todos y propiedades. Podemos cargar solo uno de los m\u00e9todos que tienes como es .random() y asignarle un alias para trabajar con \u00e9l como en le siguiente ejemplo: >>> from random import random as GenerarAleatorio >>> GenerarAleatorio() 0.9037083824066462 \u00bfQu\u00e9 pasa si no me s\u00e9 las propiedades o m\u00e9todos de un m\u00f3dulo? No pasa nada, puedes revisar siempre la documentaci\u00f3n de Python pulsando aqu\u00ed","title":"Modulos"},{"location":"desarrollo/python/modulos/#modulos","text":"\u00bfQu\u00e9 son los m\u00f3dulos? Los m\u00f3dulos son fragmentos de c\u00f3digo que contienen librer\u00edas\u2026 que elaboran otros usuarios o que ya vienen integradas con Python. Hay muchos m\u00f3dulos que vienen ya pre-instalados en el sistema como pueden ser os que permite interactuar con el sistema operativo; subprocess que permite ejecutar comandos de shell; json con el que podremos trabajar con archivos o salidas JSON\u2026","title":"M\u00f3dulos"},{"location":"desarrollo/python/modulos/#como-cargar-este-codigo","text":"El c\u00f3digo de los m\u00f3dulos puede cargarse utilizando la palabra import , como en el siguiente ejemplo: >>> import json Tambi\u00e9n podemos cargar parte del c\u00f3digo de los m\u00f3dulos como por ejemplo random es un m\u00f3dulo que contiene m\u00e9todos y propiedades. Podemos cargar solo uno de los m\u00e9todos que tienes como es .random() y asignarle un alias para trabajar con \u00e9l como en le siguiente ejemplo: >>> from random import random as GenerarAleatorio >>> GenerarAleatorio() 0.9037083824066462","title":"\u00bfC\u00f3mo cargar este c\u00f3digo?"},{"location":"desarrollo/python/modulos/#que-pasa-si-no-me-se-las-propiedades-o-metodos-de-un-modulo","text":"No pasa nada, puedes revisar siempre la documentaci\u00f3n de Python pulsando aqu\u00ed","title":"\u00bfQu\u00e9 pasa si no me s\u00e9 las propiedades o m\u00e9todos de un m\u00f3dulo?"},{"location":"desarrollo/python/programacion-orientada-a-objetos/","text":"Programaci\u00f3n orientada a objetos Python es un lenguaje como ya mencionamos anteriormente orientado a objetos. Los objetos contienen una serie de m\u00e9todos y propiedades que lo definen. Si pensamos en un humano, tenemos como propiedades el color de ojos, color de piel, altura\u2026 y los m\u00e9todos ser\u00edan las acciones como el baile, leer, saltar, correr\u2026 Esta metodolog\u00eda de programaci\u00f3n nos permite reusar el c\u00f3digo las veces que queramos sin tener que estar escribiendo m\u00faltiples l\u00edneas con funciones espec\u00edficas para determinadas partes de nuestro c\u00f3digo si lo hicieramos en una programacio\u0144 estructurada o procedural. Principios b\u00e1sicos En Python tenemos los siguientes principios: Clase : Tipo de dato que contiene un esquema de m\u00e9todos y propiedades que se usar\u00e1n para construir un objeto. Objeto : Una clase que se ha inicializado, es decir, existe y tiene nombres y apellidos propios en su ejecucio\u0144. Herencia : Propiedades o m\u00e9todos que ha recibido una clase hija por parte de una clase padre, esto no quiere decir que vaya a heredar todos los m\u00e9todos y propiedades, solo aquellos que se le permitan. Encapsulaci\u00f3n : La habilidad de ense\u00f1ar aquello que solo se pueda mostrar y esconder lo que no nos interesa visibilizar. Polimorfismo : La capacidad que tiene un objeto para cambiar su rol al mismo tiempo, puede actuar de un rol y en otro rol al mismo tiempo. \u00bfQu\u00e9 es una clase? Una clase es la plantilla que tendr\u00e1 el objeto que queremos crear, contiene una serie de m\u00e9otodos y propiedades que los utilizaremos una vez generemos el objeto. Por supuesto, una clase es un tipo de dato dentro de Python. \u00bfC\u00f3mo declaramos una clase? Para generar una clase seguiremos esta sintaxis: class NombreClase: # Bloque de c\u00f3digo \u00bfC\u00f3mo podemos a\u00f1adirle propiedades y m\u00e9todos a una clase? De la siguiente forma: class Coche: propiedad = valor def m\u00e9todo(self): # Bloque de c\u00f3digo Un ejemplo podr\u00eda ser: class Coche: marca = \"Toyota\" modelo = \"Corolla\" def publicidad(self): print(\"De 0 a 100 en 10 segundos\") Tenemos la clase Coche, con unas propiedades definidas que son la marca y el modelo, adem\u00e1s, tenemos un m\u00e9todo llamado publicidad que muestra un mensaje. En el siguiente apartado, veremos como trabajar con esta clase pero desde la vista de un objeto. \u00bfQu\u00e9 es un objeto? Un objeto es la materializaci\u00f3n de una clase, es decir, cuando lo generamos a partir de unas instrucciones ya empieza a existir en nuestro programa que estemos desarrollando. Por ejemplo, tenemos la clase Casa, evidentemente, las casas que declaremos tiene propiedades y m\u00e9todos diferentes, por ejemplo, tiene una direcci\u00f3n, un n\u00famero, una elevaci\u00f3n, una funci\u00f3n, un espacio diferente. Si creamos 5 casas, hemos creado 5 objetos partiendo de una sola clase que es la clase Casa. En resumen: Es la unidad b\u00e1sica de POO Representa una instancia particular partiendo de una clase Puede haber m\u00e1s instancias partiendo de una misma clase Cada objeto puede contener y mantener su informaci\u00f3n \u00bfC\u00f3mo declaramos un objeto? La sintaxis es: NombreObjeto = NombreClase() En este ejemplo creamos 3 objetos diferentes partiendo de la clase anterior. NombreObjeto = NombreClase() NombreObjeto2 = NombreClase() NombreObjeto3 = NombreClase() Para acceder a sus propiedades NombreObjeto.propiedad1 Para acceder a sus m\u00e9todos NombreObjeto.m\u00e9todo1() Utilizando el ejemplo que hemos creado antes: class Coche: marca = \"Toyota\" modelo = \"Corolla\" publicidad = \"De 0 a 100 en 10 segundos\" def eslogan(self): print(\"Este es un m\u00e9todo\",self.publicidad) Sara = Coche() Ionela = Coche() Tenemos a dos personas que utilizan el mismo coche Ionela y Sara y lo vemos: print(Ionela.marca,Ionela.modelo) Toyota Corolla Ionela.eslogan() De 0 a 100 en 10 segundos print(Sara.marca,Sara.modelo) Toyota Corolla Sara.eslogan() De 0 a 100 en 10 segundos \u00bfQu\u00e9 pasa si Sara quiere cambiar de coche? Sara.marca = \"Citr\u00f6en\" Sara.modelo = \"Xsara\" Sara.publicidad = \"El confort no es discutible.\" print(Sara.marca,Sara.modelo) Citr\u00f6en Xsara Sara.eslogan() El confort no es discutible. \u00bfPero Ionela ha cambiado de coche? print(Ionela.marca,Ionela.modelo) Toyota Corolla Ionela.eslogan() De 0 a 100 en 10 segundos \u00a1Ya lo tenemos! Podemos instanciar objetos diferentes partiendo de una misma clase y cambiar sus propiedades sin afectar al resto de objetos. \u00bfA qu\u00e9 es sencillo? Pero, \u00bfQu\u00e9 pasa si queremos cualquier persona pueda tener un coche diferente desde el principio? Pues a pesar de que se puede hacer creando un m\u00e9todo que le asigne el valor a las propiedades, lo m\u00e1s correcto es utilizando el m\u00e9todo __init__ . Este m\u00e9todo constructor (que permite inicializar un objeto) asigna valores a las propiedades del objeto cuando se construye, por ejemplo. class NombreClase: def __init__(self, valor_propiedad1, valor_propiedad2): self.propiedad1 = valor_propiedad1 self.propiedad2 = valor_propiedad2 def metodo1(self): # Bloque de c\u00f3digo Para crear el objeto: Variable=NombreClase(\"Valor de ejemplo n1\",\"Valor de ejemplo n2\") Si parece dificultoso de entender, no pasa nada, este es otro ejemplo con comentarios ( \u00a1Ser\u00e1 por ejemplos! ): # Definimos la clase Coche class Coche: # Definimos el constructor que sustituir\u00e1 los # valores de las propiedades cuando las definamos al inicializar el objeto. def __init__(self,marca,modelo, velocidad): self.marca = marca self.modelo = modelo self.velocidad = velocidad # Cuando se llama a este m\u00e9todo la velocidad se incrementa +1. def acelerar(self): self.velocidad += 1 print(self.velocidad) # Cuando se llama a este m\u00e9todo la velocidad disminuye en -1. def frenar(self): self.velocidad -= 1 print(self.velocidad) # Creamos los objetos: Chami = Coche(\"Nissan\", \"Almera\", 0) Jose = Coche(\"Toyota\",\"Corolla AE92 GTi Twin Cam\", 0) # Imprimimos los valores que tienen las propiedades de cada objeto: print(\"El coche de Chami es un:\",Chami.marca,Chami.modelo,\"y ahora va a\",Chami.velocidad,\"km/h.\") print(\"El coche de Jose es un:\",Jose.marca,Jose.modelo,\"y ahora va a\",Jose.velocidad,\"km/h.\") # Aumentamos la velocidad a uno de los objetos: Chami.acelerar() # Si queremos aumentar m\u00e1s veces la velocidad, podemos usar un bucle for x in range(0, 100): Chami.acelerar() # Imprimimos la velocidad actual print(\"Chami va a una velocidad de %i\" % Chami.velocidad) Este ejemplo si lo ejecutamos dar\u00e1 como resultado: El coche de Chami es un: Nissan Almaera y ahora va a 0 km/h. El coche de Jose es un: Toyota Corolla AE92 GTi Twin Cam y ahora va a 0 km/h. Herencia Una de las propiedades que mencionamos que pod\u00edan tener los objetos es la herencia, por lo que una clase hija puede contener propiedades y m\u00e9todos de una clase padre. Veamos un ejemplo: # Definimos la clase padre: class ClasePadre: # Decimos que se ejecute el c\u00f3digo sin hacer nada. pass # Y aqu\u00ed la clase hija: class ClaseHija(ClasePadre): pass # Creamos el objeto Objeto = ClaseHija() Este es un ejemplo: # Definimos la clase Familia class Familia(): # Con sus propiedades que se rellenar\u00e1n cuando se inicialice el objeto. def __init__(self, miembros, apellidos): self.miembros = miembros self.apellidos = apellidos # Cuando se cree la clase, mostrar\u00e1 el apellido que ha recibido. print(\"Apellidos: %s\" % (self.apellidos)) # Creamos la clase Hijo que hereda de Familia class Hijo(Familia): # Se rellenar\u00e1n propiedades para este objeto. def __init__(self, nombre, apellidos): # Si queremos heredar propiedades y m\u00e9todos, tendremos que hacer uso de la funci\u00f3n super() # super() lo explicaremos m\u00e1s adelante. # Aqu\u00ed llamamos la propiedad espec\u00edfica de Familia, Familia.apellidos y la inicializamos super().__init__(self,apellidos) # Definimos aqu\u00ed los valores que tendr\u00e1n estas propiedades self.nombre = nombre self.apellidos = apellidos # A\u00f1adimos un m\u00e9todo para el Hijo def mostrar_info(self): # Decimos que imprima self.nombre y self.apellidos. print(\"Soy %s y soy de la familia %s\" % (self.nombre,self.apellidos)) # Creamos el objeto Pugsley = Hijo(\"Pugsley\",\"Adams\") # Llamamos al m\u00e9todo mostrar_info() Pugsley.mostrar_info() Seguro que te preguntas sobre super().__init__(...) , esta funci\u00f3n como comentamos permite heredar propiedades y m\u00e9todos de otra clase. Vendr\u00eda a ser lo mismo que: class A: def __init__(self, ejemplo): self.ejemplo = ejemplo class B(A): def __init__(self, x, y, z): # Este procedimiento es m\u00e1s complicado y m\u00e1s tedioso de hacer. self.guardar_info = A(x) obj = B(2,3,4) print(obj.guardar_info.ejemplo) Sobreescribiendo m\u00e9todos en clases hijas Se puede hacer evidentemente, si en la clase A tenemos un m\u00e9todo llamado saludar() , y la clase B que hereda de la clase A, le podemos definir el contenido del mensaje que devolver\u00e1 el m\u00e9todo saludar() . class A: def saludar(self): print(\"Hola mundo\") class B(A): def saludar(self): print(\"Hello everybody\") obj = B obj.saludar() Y devolver\u00e1 Hello everybody . Tipos de herencia Bien, habiendo visto un ejemplo de herencia, tambi\u00e9n os cuento, que hay distintos ejemplos de herencia: Simple M\u00faltiple Multi nivel Jer\u00e1rquica H\u00edbrida Simple Es el tipo de herencia que hemos visto hasta ahora. class A: pass class B(A): pass M\u00faltiple Es una clase que hereda desde otras clases, por lo que tendr\u00e1 propiedades y m\u00e9todos de ambas clases (A y B). class A: pass class B: pass class C(A,B): pass # Establecemos una comparaci\u00f3n para ver si realmente son subclases o no. # Devolver\u00e1 True o False dependiendo de si es correcto o no. issubclass(C,A) and issubclass(C,B) Multinivel Esto se refiere, a que tenemos una clase abuelo, de la cu\u00e1l hereda una clase padre, del cu\u00e1l hereda una clase hijo. class A: pass class B(A): pass class C(B): pass Como vemos, la clase C hereda de la clase B, la clase B de la clase A, y A es la clase principial de primer nivel. Por lo tanto, la clase C hereder\u00e1 propiedades y m\u00e9todos de todas sus clases superiores a menos que se establezca qu\u00e9 propiedades o m\u00e9todos se podr\u00e1n heredar, esto forma parte del encapsulamiento que veremos m\u00e1s tarde. Jer\u00e1rquica Tenemos m\u00faltiples clases que heredan de una sola clase, es decir. class A: pass class B(A): pass class C(A): pass class D(A): pass Un ejemplo puede ser, clase Jefe/Jefa de una empresa que tiene el rol m\u00e1s alto de una organizaci\u00f3n y que por debajo de ellos hay otros roles acordes a la labor de la empresa que tienen menos privilegios, otras funciones\u2026etc H\u00edbrido Es la combinaci\u00f3n de una o m\u00faltiples clases con una o m\u00faltiples clases por ejemplo: Imaginamos que tenemos 5 clases (A,B,C,D,E). Clase A es una clase padre. Clase B,C,D heredan de la clase A Clase E, hereda de la clase B y D. Clase E es la clase padre de B y D. Aqu\u00ed podemos identificar varios tipos de herencia: A, B, C, D, C = Herencia h\u00edbrida B, C, D que heredan de A = Herencia jer\u00e1rquica E que hereda de B y D = Herencia m\u00faltiple C hereda de A = Herencia simple Un ejemplo de sintaxis: class A: pass class B(A): pass class C(A): pass class D(A): pass class E(B,D) Si a\u00f1adimos una variable en la clase A, creamos un objeto que referencie a E: class A: hello_world = \"Hola Mundo\" class B(A): pass class C(A): pass class D(A): pass class E(B,D): pass obj = E() print(obj.hello_world) obj habr\u00e1 impreso \"Hola Mundo\" . Funci\u00f3n super() Se utiliza para llamar a m\u00e9todos de una clase padre, hemos visto en un ejemplo anterior como llam\u00e1bamos a super().__init__(self, nombre, apellidos) en el ejemplo de la Familia Adams. Aqu\u00ed est\u00e1bamos llamando al m\u00e9todo inicializador de la clase Familia . Pero podemos llamar a otros m\u00e9todos tambi\u00e9n. super().m\u00e9todo() . class Vehiculo: def arrancar(self): print(\"Arrancamos el coche\") def parar(self): print(\"Paramos el coche\") class Conductor(Vehiculo): def soplar(self): print(\"Soplando, soplando y soplando...\") def control_policia(self): super().parar() print(\"Persona - Hola agente, buenos d\u00edas\") print(\"Polic\u00eda - Hola, vamos hacerle una prueba de alcoholemia, por favor, sople en la boquilla\") print(\"Persona - Vale\") self.soplar() print(\"Polic\u00eda - Genial, puede usted proseguir\") super().arrancar() Antonio = Conductor() Antonio.control_policia() Como vemos, no hace falta que llamemos a __init__ porque __no estamos inicializando ning\u00fan valor en ninguna propiedad __ y como se ejecutan los m\u00e9todos parar() y arrancar() que forman parte de la clase Vehiculo . Encapsulamiento Encapsular permite abstraer cierta informaci\u00f3n al mundo y mostrar solo aquella que interese. Por ejemplo, cuando enviamos un paquete por correos, el personal de correos no puede ver el contenido del paquete, pero si que puede ver el destinatario y el remitente, pudiendo identificar a las dos personas implicadas y saber sus direcciones de correo postal. \u00bfC\u00f3mo encapsular? Para encapsular, b\u00e1sicamente tendremos que a\u00f1adirle dos guiones bajos \"_ __ _ \" delante de la propiedad que queremos ocultar. class A: self._propiedad = valor Veamos un ejemplo: class Persona: def __init__(self): self.nombre = \"Susana\" self.__apellidos = \"Bramura\" self._tlfno = \"777 777 777\" Carlos = Persona() print(Carlos.apellidos) Veremos un error parecido a este: Traceback (most recent call last): File \"main.py\", line 9, in <module> print(Carlos.apellidos) AttributeError: 'Persona' object has no attribute 'apellidos' Y nos preguntaremos\u2026 Pero, si llamamos a Carlos.apellidos y nosotros hemos puesto: Carlos.__apellidos , \u00bfno ser\u00eda m\u00e1s correcto para querer obtener el valor de los apellidos de la clase Persona? Bueno, aunque pensemos esto, si utilizamos __ igualmente dar\u00e1 el mismo error porque no se puede acceder desde fuera a una propiedad o m\u00e9todo encapsulado. print(Carlos.__apellidos) Traceback (most recent call last): File \"main.py\", line 8, in <module> print(Carlos.__apellidos) AttributeError: 'Persona' object has no attribute '__apellidos' \u00bfC\u00f3mo podemos acceder o modificar las variables, propiedades, o los m\u00e9todos de \u00e1mbito privado? Tendremos que crear m\u00e9todos espec\u00edficos que puedan acceder a esas variables, propiedades o m\u00e9todos. class A: # Constructor de clase def __init__(self): # Asignamos 20 a esta propiedad privada self.__propiedad = 20 def __metodo(self): print(\"Soy un m\u00e9todo privado.\") # Soy un m\u00e9todo p\u00fablico que leer\u00e1 y ejecutar\u00e1 contenido privado. def mostrar(self): self.__metodo() print(self.__variable) def cambiar(self,propiedad): self.__propiedad = propiedad print(\"Esta es la nueva propiedad %i % (self.__propiedad)) # Instanciamos el objeto obj = A() # Ejecutamos el m\u00e9todo p\u00fablico mostrar() obj.mostrar() # Modificamos el valor propiedad obj.cambiar(300) Polimorfismo Es la capacidad que tiene un objeto para ser y poder ser otra cosa al mismo tiempo. Por ejemplo, un p\u00e1jaro. Un p\u00e1jaro puede ser un ping\u00fcino y un gorri\u00f3n, ambos tienen propiedades en com\u00fan como las patas, ojos, orejas; el color de las plumas, de los ojos, de los picos. Tambi\u00e9n, tienen una serie de m\u00e9todos similares como volar, poner huevos, comer, dormir\u2026 \u00bfQu\u00e9 tienen en com\u00fan todos ellos? Que son p\u00e1jaros. Por lo tanto, un p\u00e1jaro puede ser un gorri\u00f3n o puede ser un ping\u00fcino al mismo tiempo sin perder lo que es su esencia, que es ser un p\u00e1jaro. # Creamos la clase P\u00e1jaro class Pajaro: # M\u00e9todo volar def nadar(self): print(\"Puedo nadar.\") def volar(self): print(\"Puedo volar.\") class Pinguino(Pajaro): def nadar(self): print(\"Puedo nadar.\") def volar(self): print(\"No puedo volar.\") def ver_volar(birds) birds.volar() gorrion=Pajaro() pinguino=Pinguino() # Este imprimir\u00e1 que pude volar ver_volar(gorrion) # Este imprimir\u00e1 que no puede volar ver_volar(pinguino)","title":"Programaci\u00f3n orientada a objetos"},{"location":"desarrollo/python/programacion-orientada-a-objetos/#programacion-orientada-a-objetos","text":"Python es un lenguaje como ya mencionamos anteriormente orientado a objetos. Los objetos contienen una serie de m\u00e9todos y propiedades que lo definen. Si pensamos en un humano, tenemos como propiedades el color de ojos, color de piel, altura\u2026 y los m\u00e9todos ser\u00edan las acciones como el baile, leer, saltar, correr\u2026 Esta metodolog\u00eda de programaci\u00f3n nos permite reusar el c\u00f3digo las veces que queramos sin tener que estar escribiendo m\u00faltiples l\u00edneas con funciones espec\u00edficas para determinadas partes de nuestro c\u00f3digo si lo hicieramos en una programacio\u0144 estructurada o procedural.","title":"Programaci\u00f3n orientada a objetos"},{"location":"desarrollo/python/programacion-orientada-a-objetos/#principios-basicos","text":"En Python tenemos los siguientes principios: Clase : Tipo de dato que contiene un esquema de m\u00e9todos y propiedades que se usar\u00e1n para construir un objeto. Objeto : Una clase que se ha inicializado, es decir, existe y tiene nombres y apellidos propios en su ejecucio\u0144. Herencia : Propiedades o m\u00e9todos que ha recibido una clase hija por parte de una clase padre, esto no quiere decir que vaya a heredar todos los m\u00e9todos y propiedades, solo aquellos que se le permitan. Encapsulaci\u00f3n : La habilidad de ense\u00f1ar aquello que solo se pueda mostrar y esconder lo que no nos interesa visibilizar. Polimorfismo : La capacidad que tiene un objeto para cambiar su rol al mismo tiempo, puede actuar de un rol y en otro rol al mismo tiempo.","title":"Principios b\u00e1sicos"},{"location":"desarrollo/python/programacion-orientada-a-objetos/#que-es-una-clase","text":"Una clase es la plantilla que tendr\u00e1 el objeto que queremos crear, contiene una serie de m\u00e9otodos y propiedades que los utilizaremos una vez generemos el objeto. Por supuesto, una clase es un tipo de dato dentro de Python.","title":"\u00bfQu\u00e9 es una clase?"},{"location":"desarrollo/python/programacion-orientada-a-objetos/#como-declaramos-una-clase","text":"Para generar una clase seguiremos esta sintaxis: class NombreClase: # Bloque de c\u00f3digo","title":"\u00bfC\u00f3mo declaramos una clase?"},{"location":"desarrollo/python/programacion-orientada-a-objetos/#como-podemos-anadirle-propiedades-y-metodos-a-una-clase","text":"De la siguiente forma: class Coche: propiedad = valor def m\u00e9todo(self): # Bloque de c\u00f3digo Un ejemplo podr\u00eda ser: class Coche: marca = \"Toyota\" modelo = \"Corolla\" def publicidad(self): print(\"De 0 a 100 en 10 segundos\") Tenemos la clase Coche, con unas propiedades definidas que son la marca y el modelo, adem\u00e1s, tenemos un m\u00e9todo llamado publicidad que muestra un mensaje. En el siguiente apartado, veremos como trabajar con esta clase pero desde la vista de un objeto.","title":"\u00bfC\u00f3mo podemos a\u00f1adirle propiedades y m\u00e9todos a una clase?"},{"location":"desarrollo/python/programacion-orientada-a-objetos/#que-es-un-objeto","text":"Un objeto es la materializaci\u00f3n de una clase, es decir, cuando lo generamos a partir de unas instrucciones ya empieza a existir en nuestro programa que estemos desarrollando. Por ejemplo, tenemos la clase Casa, evidentemente, las casas que declaremos tiene propiedades y m\u00e9todos diferentes, por ejemplo, tiene una direcci\u00f3n, un n\u00famero, una elevaci\u00f3n, una funci\u00f3n, un espacio diferente. Si creamos 5 casas, hemos creado 5 objetos partiendo de una sola clase que es la clase Casa. En resumen: Es la unidad b\u00e1sica de POO Representa una instancia particular partiendo de una clase Puede haber m\u00e1s instancias partiendo de una misma clase Cada objeto puede contener y mantener su informaci\u00f3n","title":"\u00bfQu\u00e9 es un objeto?"},{"location":"desarrollo/python/programacion-orientada-a-objetos/#como-declaramos-un-objeto","text":"La sintaxis es: NombreObjeto = NombreClase() En este ejemplo creamos 3 objetos diferentes partiendo de la clase anterior. NombreObjeto = NombreClase() NombreObjeto2 = NombreClase() NombreObjeto3 = NombreClase()","title":"\u00bfC\u00f3mo declaramos un objeto?"},{"location":"desarrollo/python/programacion-orientada-a-objetos/#para-acceder-a-sus-propiedades","text":"NombreObjeto.propiedad1","title":"Para acceder a sus propiedades"},{"location":"desarrollo/python/programacion-orientada-a-objetos/#para-acceder-a-sus-metodos","text":"NombreObjeto.m\u00e9todo1() Utilizando el ejemplo que hemos creado antes: class Coche: marca = \"Toyota\" modelo = \"Corolla\" publicidad = \"De 0 a 100 en 10 segundos\" def eslogan(self): print(\"Este es un m\u00e9todo\",self.publicidad) Sara = Coche() Ionela = Coche() Tenemos a dos personas que utilizan el mismo coche Ionela y Sara y lo vemos: print(Ionela.marca,Ionela.modelo) Toyota Corolla Ionela.eslogan() De 0 a 100 en 10 segundos print(Sara.marca,Sara.modelo) Toyota Corolla Sara.eslogan() De 0 a 100 en 10 segundos \u00bfQu\u00e9 pasa si Sara quiere cambiar de coche? Sara.marca = \"Citr\u00f6en\" Sara.modelo = \"Xsara\" Sara.publicidad = \"El confort no es discutible.\" print(Sara.marca,Sara.modelo) Citr\u00f6en Xsara Sara.eslogan() El confort no es discutible. \u00bfPero Ionela ha cambiado de coche? print(Ionela.marca,Ionela.modelo) Toyota Corolla Ionela.eslogan() De 0 a 100 en 10 segundos \u00a1Ya lo tenemos! Podemos instanciar objetos diferentes partiendo de una misma clase y cambiar sus propiedades sin afectar al resto de objetos. \u00bfA qu\u00e9 es sencillo? Pero, \u00bfQu\u00e9 pasa si queremos cualquier persona pueda tener un coche diferente desde el principio? Pues a pesar de que se puede hacer creando un m\u00e9todo que le asigne el valor a las propiedades, lo m\u00e1s correcto es utilizando el m\u00e9todo __init__ . Este m\u00e9todo constructor (que permite inicializar un objeto) asigna valores a las propiedades del objeto cuando se construye, por ejemplo. class NombreClase: def __init__(self, valor_propiedad1, valor_propiedad2): self.propiedad1 = valor_propiedad1 self.propiedad2 = valor_propiedad2 def metodo1(self): # Bloque de c\u00f3digo Para crear el objeto: Variable=NombreClase(\"Valor de ejemplo n1\",\"Valor de ejemplo n2\") Si parece dificultoso de entender, no pasa nada, este es otro ejemplo con comentarios ( \u00a1Ser\u00e1 por ejemplos! ): # Definimos la clase Coche class Coche: # Definimos el constructor que sustituir\u00e1 los # valores de las propiedades cuando las definamos al inicializar el objeto. def __init__(self,marca,modelo, velocidad): self.marca = marca self.modelo = modelo self.velocidad = velocidad # Cuando se llama a este m\u00e9todo la velocidad se incrementa +1. def acelerar(self): self.velocidad += 1 print(self.velocidad) # Cuando se llama a este m\u00e9todo la velocidad disminuye en -1. def frenar(self): self.velocidad -= 1 print(self.velocidad) # Creamos los objetos: Chami = Coche(\"Nissan\", \"Almera\", 0) Jose = Coche(\"Toyota\",\"Corolla AE92 GTi Twin Cam\", 0) # Imprimimos los valores que tienen las propiedades de cada objeto: print(\"El coche de Chami es un:\",Chami.marca,Chami.modelo,\"y ahora va a\",Chami.velocidad,\"km/h.\") print(\"El coche de Jose es un:\",Jose.marca,Jose.modelo,\"y ahora va a\",Jose.velocidad,\"km/h.\") # Aumentamos la velocidad a uno de los objetos: Chami.acelerar() # Si queremos aumentar m\u00e1s veces la velocidad, podemos usar un bucle for x in range(0, 100): Chami.acelerar() # Imprimimos la velocidad actual print(\"Chami va a una velocidad de %i\" % Chami.velocidad) Este ejemplo si lo ejecutamos dar\u00e1 como resultado: El coche de Chami es un: Nissan Almaera y ahora va a 0 km/h. El coche de Jose es un: Toyota Corolla AE92 GTi Twin Cam y ahora va a 0 km/h.","title":"Para acceder a sus m\u00e9todos"},{"location":"desarrollo/python/programacion-orientada-a-objetos/#herencia","text":"Una de las propiedades que mencionamos que pod\u00edan tener los objetos es la herencia, por lo que una clase hija puede contener propiedades y m\u00e9todos de una clase padre. Veamos un ejemplo: # Definimos la clase padre: class ClasePadre: # Decimos que se ejecute el c\u00f3digo sin hacer nada. pass # Y aqu\u00ed la clase hija: class ClaseHija(ClasePadre): pass # Creamos el objeto Objeto = ClaseHija() Este es un ejemplo: # Definimos la clase Familia class Familia(): # Con sus propiedades que se rellenar\u00e1n cuando se inicialice el objeto. def __init__(self, miembros, apellidos): self.miembros = miembros self.apellidos = apellidos # Cuando se cree la clase, mostrar\u00e1 el apellido que ha recibido. print(\"Apellidos: %s\" % (self.apellidos)) # Creamos la clase Hijo que hereda de Familia class Hijo(Familia): # Se rellenar\u00e1n propiedades para este objeto. def __init__(self, nombre, apellidos): # Si queremos heredar propiedades y m\u00e9todos, tendremos que hacer uso de la funci\u00f3n super() # super() lo explicaremos m\u00e1s adelante. # Aqu\u00ed llamamos la propiedad espec\u00edfica de Familia, Familia.apellidos y la inicializamos super().__init__(self,apellidos) # Definimos aqu\u00ed los valores que tendr\u00e1n estas propiedades self.nombre = nombre self.apellidos = apellidos # A\u00f1adimos un m\u00e9todo para el Hijo def mostrar_info(self): # Decimos que imprima self.nombre y self.apellidos. print(\"Soy %s y soy de la familia %s\" % (self.nombre,self.apellidos)) # Creamos el objeto Pugsley = Hijo(\"Pugsley\",\"Adams\") # Llamamos al m\u00e9todo mostrar_info() Pugsley.mostrar_info() Seguro que te preguntas sobre super().__init__(...) , esta funci\u00f3n como comentamos permite heredar propiedades y m\u00e9todos de otra clase. Vendr\u00eda a ser lo mismo que: class A: def __init__(self, ejemplo): self.ejemplo = ejemplo class B(A): def __init__(self, x, y, z): # Este procedimiento es m\u00e1s complicado y m\u00e1s tedioso de hacer. self.guardar_info = A(x) obj = B(2,3,4) print(obj.guardar_info.ejemplo)","title":"Herencia"},{"location":"desarrollo/python/programacion-orientada-a-objetos/#sobreescribiendo-metodos-en-clases-hijas","text":"Se puede hacer evidentemente, si en la clase A tenemos un m\u00e9todo llamado saludar() , y la clase B que hereda de la clase A, le podemos definir el contenido del mensaje que devolver\u00e1 el m\u00e9todo saludar() . class A: def saludar(self): print(\"Hola mundo\") class B(A): def saludar(self): print(\"Hello everybody\") obj = B obj.saludar() Y devolver\u00e1 Hello everybody .","title":"Sobreescribiendo m\u00e9todos en clases hijas"},{"location":"desarrollo/python/programacion-orientada-a-objetos/#tipos-de-herencia","text":"Bien, habiendo visto un ejemplo de herencia, tambi\u00e9n os cuento, que hay distintos ejemplos de herencia: Simple M\u00faltiple Multi nivel Jer\u00e1rquica H\u00edbrida","title":"Tipos de herencia"},{"location":"desarrollo/python/programacion-orientada-a-objetos/#simple","text":"Es el tipo de herencia que hemos visto hasta ahora. class A: pass class B(A): pass","title":"Simple"},{"location":"desarrollo/python/programacion-orientada-a-objetos/#multiple","text":"Es una clase que hereda desde otras clases, por lo que tendr\u00e1 propiedades y m\u00e9todos de ambas clases (A y B). class A: pass class B: pass class C(A,B): pass # Establecemos una comparaci\u00f3n para ver si realmente son subclases o no. # Devolver\u00e1 True o False dependiendo de si es correcto o no. issubclass(C,A) and issubclass(C,B)","title":"M\u00faltiple"},{"location":"desarrollo/python/programacion-orientada-a-objetos/#multinivel","text":"Esto se refiere, a que tenemos una clase abuelo, de la cu\u00e1l hereda una clase padre, del cu\u00e1l hereda una clase hijo. class A: pass class B(A): pass class C(B): pass Como vemos, la clase C hereda de la clase B, la clase B de la clase A, y A es la clase principial de primer nivel. Por lo tanto, la clase C hereder\u00e1 propiedades y m\u00e9todos de todas sus clases superiores a menos que se establezca qu\u00e9 propiedades o m\u00e9todos se podr\u00e1n heredar, esto forma parte del encapsulamiento que veremos m\u00e1s tarde.","title":"Multinivel"},{"location":"desarrollo/python/programacion-orientada-a-objetos/#jerarquica","text":"Tenemos m\u00faltiples clases que heredan de una sola clase, es decir. class A: pass class B(A): pass class C(A): pass class D(A): pass Un ejemplo puede ser, clase Jefe/Jefa de una empresa que tiene el rol m\u00e1s alto de una organizaci\u00f3n y que por debajo de ellos hay otros roles acordes a la labor de la empresa que tienen menos privilegios, otras funciones\u2026etc","title":"Jer\u00e1rquica"},{"location":"desarrollo/python/programacion-orientada-a-objetos/#hibrido","text":"Es la combinaci\u00f3n de una o m\u00faltiples clases con una o m\u00faltiples clases por ejemplo: Imaginamos que tenemos 5 clases (A,B,C,D,E). Clase A es una clase padre. Clase B,C,D heredan de la clase A Clase E, hereda de la clase B y D. Clase E es la clase padre de B y D. Aqu\u00ed podemos identificar varios tipos de herencia: A, B, C, D, C = Herencia h\u00edbrida B, C, D que heredan de A = Herencia jer\u00e1rquica E que hereda de B y D = Herencia m\u00faltiple C hereda de A = Herencia simple Un ejemplo de sintaxis: class A: pass class B(A): pass class C(A): pass class D(A): pass class E(B,D) Si a\u00f1adimos una variable en la clase A, creamos un objeto que referencie a E: class A: hello_world = \"Hola Mundo\" class B(A): pass class C(A): pass class D(A): pass class E(B,D): pass obj = E() print(obj.hello_world) obj habr\u00e1 impreso \"Hola Mundo\" .","title":"H\u00edbrido"},{"location":"desarrollo/python/programacion-orientada-a-objetos/#funcion-super","text":"Se utiliza para llamar a m\u00e9todos de una clase padre, hemos visto en un ejemplo anterior como llam\u00e1bamos a super().__init__(self, nombre, apellidos) en el ejemplo de la Familia Adams. Aqu\u00ed est\u00e1bamos llamando al m\u00e9todo inicializador de la clase Familia . Pero podemos llamar a otros m\u00e9todos tambi\u00e9n. super().m\u00e9todo() . class Vehiculo: def arrancar(self): print(\"Arrancamos el coche\") def parar(self): print(\"Paramos el coche\") class Conductor(Vehiculo): def soplar(self): print(\"Soplando, soplando y soplando...\") def control_policia(self): super().parar() print(\"Persona - Hola agente, buenos d\u00edas\") print(\"Polic\u00eda - Hola, vamos hacerle una prueba de alcoholemia, por favor, sople en la boquilla\") print(\"Persona - Vale\") self.soplar() print(\"Polic\u00eda - Genial, puede usted proseguir\") super().arrancar() Antonio = Conductor() Antonio.control_policia() Como vemos, no hace falta que llamemos a __init__ porque __no estamos inicializando ning\u00fan valor en ninguna propiedad __ y como se ejecutan los m\u00e9todos parar() y arrancar() que forman parte de la clase Vehiculo .","title":"Funci\u00f3n super()"},{"location":"desarrollo/python/programacion-orientada-a-objetos/#encapsulamiento","text":"Encapsular permite abstraer cierta informaci\u00f3n al mundo y mostrar solo aquella que interese. Por ejemplo, cuando enviamos un paquete por correos, el personal de correos no puede ver el contenido del paquete, pero si que puede ver el destinatario y el remitente, pudiendo identificar a las dos personas implicadas y saber sus direcciones de correo postal.","title":"Encapsulamiento"},{"location":"desarrollo/python/programacion-orientada-a-objetos/#como-encapsular","text":"Para encapsular, b\u00e1sicamente tendremos que a\u00f1adirle dos guiones bajos \"_ __ _ \" delante de la propiedad que queremos ocultar. class A: self._propiedad = valor Veamos un ejemplo: class Persona: def __init__(self): self.nombre = \"Susana\" self.__apellidos = \"Bramura\" self._tlfno = \"777 777 777\" Carlos = Persona() print(Carlos.apellidos) Veremos un error parecido a este: Traceback (most recent call last): File \"main.py\", line 9, in <module> print(Carlos.apellidos) AttributeError: 'Persona' object has no attribute 'apellidos' Y nos preguntaremos\u2026 Pero, si llamamos a Carlos.apellidos y nosotros hemos puesto: Carlos.__apellidos , \u00bfno ser\u00eda m\u00e1s correcto para querer obtener el valor de los apellidos de la clase Persona? Bueno, aunque pensemos esto, si utilizamos __ igualmente dar\u00e1 el mismo error porque no se puede acceder desde fuera a una propiedad o m\u00e9todo encapsulado. print(Carlos.__apellidos) Traceback (most recent call last): File \"main.py\", line 8, in <module> print(Carlos.__apellidos) AttributeError: 'Persona' object has no attribute '__apellidos'","title":"\u00bfC\u00f3mo encapsular?"},{"location":"desarrollo/python/programacion-orientada-a-objetos/#como-podemos-acceder-o-modificar-las-variables-propiedades-o-los-metodos-de-ambito-privado","text":"Tendremos que crear m\u00e9todos espec\u00edficos que puedan acceder a esas variables, propiedades o m\u00e9todos. class A: # Constructor de clase def __init__(self): # Asignamos 20 a esta propiedad privada self.__propiedad = 20 def __metodo(self): print(\"Soy un m\u00e9todo privado.\") # Soy un m\u00e9todo p\u00fablico que leer\u00e1 y ejecutar\u00e1 contenido privado. def mostrar(self): self.__metodo() print(self.__variable) def cambiar(self,propiedad): self.__propiedad = propiedad print(\"Esta es la nueva propiedad %i % (self.__propiedad)) # Instanciamos el objeto obj = A() # Ejecutamos el m\u00e9todo p\u00fablico mostrar() obj.mostrar() # Modificamos el valor propiedad obj.cambiar(300)","title":"\u00bfC\u00f3mo podemos acceder o modificar las variables, propiedades, o los m\u00e9todos de \u00e1mbito privado?"},{"location":"desarrollo/python/programacion-orientada-a-objetos/#polimorfismo","text":"Es la capacidad que tiene un objeto para ser y poder ser otra cosa al mismo tiempo. Por ejemplo, un p\u00e1jaro. Un p\u00e1jaro puede ser un ping\u00fcino y un gorri\u00f3n, ambos tienen propiedades en com\u00fan como las patas, ojos, orejas; el color de las plumas, de los ojos, de los picos. Tambi\u00e9n, tienen una serie de m\u00e9todos similares como volar, poner huevos, comer, dormir\u2026 \u00bfQu\u00e9 tienen en com\u00fan todos ellos? Que son p\u00e1jaros. Por lo tanto, un p\u00e1jaro puede ser un gorri\u00f3n o puede ser un ping\u00fcino al mismo tiempo sin perder lo que es su esencia, que es ser un p\u00e1jaro. # Creamos la clase P\u00e1jaro class Pajaro: # M\u00e9todo volar def nadar(self): print(\"Puedo nadar.\") def volar(self): print(\"Puedo volar.\") class Pinguino(Pajaro): def nadar(self): print(\"Puedo nadar.\") def volar(self): print(\"No puedo volar.\") def ver_volar(birds) birds.volar() gorrion=Pajaro() pinguino=Pinguino() # Este imprimir\u00e1 que pude volar ver_volar(gorrion) # Este imprimir\u00e1 que no puede volar ver_volar(pinguino)","title":"Polimorfismo"},{"location":"desarrollo/python/tipos-de-operadores/","text":"Tipos de operadores En Python tenemos varios tipos de oepradores para hacer comparaciones, c\u00e1lculos, valorar expresiones l\u00f3gicas\u2026 Aritm\u00e9tico Asignaci\u00f3n Comparaci\u00f3n L\u00f3gico Bit a bit ( bitwise ) Identidad Membres\u00eda Aritm\u00e9ticos Se utiliza para realizar operaciones matem\u00e1ticas y se utilizando dos operandos para llevarlas a cabo. Operador Descripci\u00f3n + Se utiliza para realizar operaciones de adicci\u00f3n (suma) - Operaciones de sustracci\u00f3n (resta) * Multiplicaci\u00f3n / Divisi\u00f3n (cociente) % M\u00f3dulo (resto de una divisi\u00f3n) Adicci\u00f3n >>> 2 + 3 5 Sustracci\u00f3n >>> 1 - 2 -1 Multiplicaci\u00f3n >>> 2 * 1 2 Divisi\u00f3n (cociente) >>> 4 / 2 0 M\u00f3dulo, ( resto de una divisi\u00f3n ) >>> 4 % 2 2.0 Operadores de asignaci\u00f3n Estos operadores permiten asignar valores, por norma general a variables, pero no olvidemos que podemos involucrar otros tipos de identificadores como pueden ser listas, tuplas\u2026 Operador Descripci\u00f3n = Asigna un valor += Suma un valor al valor actual y guardar el nuevo valor -= Resta un valor al valor actual y guardar el nuevo valor *= Multiplica un valor al valor actual y guardar el nuevo valor Igual ( = ) >>> variable = 10 >>> print(variable) 10 M\u00e1s e igual ( += ) >>> variable = 1 >>> variable += 2 >>> print(variable) 3 Menos e igual ( -= ) >>> variable = 1 >>> variable -= 2 >>> print(variable) -1 Multiplicar e igual ( *= ) >>> variable = 2 >>> variable *= 2 >>> print(variable) 4 Operadores de comparaci\u00f3n Estos operadores te permiten realizar una comparaci\u00f3n entre dos valores, son muy utilizados en los condicionales o en validaciones como pueden ser bucles\u2026etc. Adem\u00e1s, los valores comparados devuelven un True o un False ( booleano ) si la comparaci\u00f3n se cumple o no. Operador Descripci\u00f3n < Menor que > Mayor que <= Menor o igual que >= Mayor o igual que != Distinto de Menor que >>> 1 < 2 True Mayor que >>> 1 > 2 False Menor igual que >>> 1 <= 2 True Mayor igual que >>> 1 >= 2 False Distinto de >>> 1 != 2 True Operadores l\u00f3gicos Estos permiten realizar operaciones l\u00f3gicas y devuelven True o False seg\u00fan el resultado. Operador Descripci\u00f3n and Deben cumplirse las condiciones s\u00ed o s\u00ed or Debe cumplir al menos una de las condiciones evaluadas not Devuelve False si el resultado es verdadero Operador and >>> 1<2 and 2<3 True >>> x = 100 < 20 and 2>3 >>>print(x) False Operador or >>> 1<2 and 100>100 True Operador not >>> not(2 != 100 and 90<200) False Operadores bitwise Operador Descripci\u00f3n & Convierte el primer y segundo n\u00ba decimal en n\u00ba binarios, compara ambos n\u00ba.Cuando se encuentra 1 bit en el primer n\u00ba, y en el segundo tambi\u00e9n, se establece 1.Cuando se encuentra 1 bit en el primer n\u00ba y un 0 en el segundo tambi\u00e9n se establece un 0. \\ Convierte el primer y segundo n\u00ba decimal en n\u00ba binarios, compara ambos n\u00ba.Cuando se encuentra 1 bit en el primer n\u00ba, y en el segundo tambi\u00e9n, se establece 1.Cuando se encuentra 1 bit en el primer n\u00ba y un 0 en el segundo tambi\u00e9n se establece un 1. >> Convierte el primer y segundo n\u00ba decimal en n\u00ba binarios, compara ambos n\u00ba.Cuando se encuentra 1 bit en el segundo n\u00ba, y se desplaza el bit en el segundo tambi\u00e9n, se establece 1.Cuando se encuentra 1 bit en el primer n\u00ba y un 0 en el segundo tambi\u00e9n se establece un 1. << Lo anterior pero desde la izquierda ~ Devuelve el complemento del n\u00ba menos el n\u00ba que obtenemos cambiado cada 1 por un 0 y un 0 por un 1. Es lo mismo que -n\u00ba-1 Ampersan (&) >>> 7 & 2 2 \u00bfPor qu\u00e9 nos devuelve 2? Si nosotros pasamos a binario ambos n\u00fameros: 7 = 0 0 0 0 0 1 1 1 2 = 0 0 0 0 0 0 1 0 Cuando coincida el 1 del primer valor, con el 1 del segundo quedar\u00e1 como 1. Si el primer valor hay un 0 y en el segundo hay 1, se quedar\u00e1 el 0 por encima del 1 quedando tal que as\u00ed: 0 0 0 0 0 1 1 1 0 0 0 0 0 0 1 0 --------------------- 0 0 0 0 0 0 1 0 Si conviertes este n\u00famero binario a decimal te dar\u00e1 2. Tuber\u00eda o pipe >>> 190 | 9 191 \u00bfPor qu\u00e9 nos devuelve 191? Si nosotros pasamos a binario ambos n\u00fameros: 190 = 1 0 1 1 1 1 1 0 9 = 0 0 0 0 1 0 0 1 Cuando coincida el 1 del primer valor, con el 1 del segundo quedar\u00e1 como 1. Si el primer valor hay un 0 y en el segundo hay 1, se quedar\u00e1 el 1 por encima del 0 quedando tal que as\u00ed: 1 0 1 1 1 1 1 0 0 0 0 1 0 0 0 1 --------------------- 1 0 1 1 1 1 1 1 Si conviertes este n\u00famero binario a decimal te dar\u00e1 191. Desplazamiento hacia la derecha o ( shift-to-right ) >>> 10 >> 2 2 \u00bfPor qu\u00e9 nos devuelve 2? Si pasas el n\u00ba 10 a binario: 10 = 0 0 0 0 1 0 1 0 Desplazas 2 posiciones a\u00f1adiendo dos ceros hacia la derecha, y te quedar\u00eda: 0 0 0 0 0 0 1 0 Si conviertes este n\u00famero binario a decimal te dar\u00e1 2. Desplazamiento hacia la izquierda o ( shift-to-left ) Este procedimiento es el mismo que el anterior, pero hacia el otro lado. >>> 10 << 2 40 \u00bfPor qu\u00e9 devuelve 2? Si pasas a binario el n\u00ba 10: 10 = 0 0 0 0 1 0 1 0 Desplazas 2 posiciones a\u00f1adiendo dos ceros hacia la izquierda, y te quedar\u00eda: 0 0 1 0 1 0 0 0 Si conviertes este n\u00famero binario a decimal te dar\u00e1 40. Inversi\u00f3n bitwise >>> ~100 -101 \u00bfPor qu\u00e9 devuelve -101? Devuelve el complemento del n\u00ba menos el n\u00ba que obtenemos cambiado cada 1 por un 0 y un 0 por un 1. Es lo mismo que -n\u00ba-1 Operador de identidad Prueba si dos operandos comparten una identidad. Aqu\u00ed hay dos tipos de operadores is e is not . Operador is Por ejemplo, comparamos si un valor almacenado en x es igual a su valor: >>> x = 10 >>> x is 10 True Oeprador is not Aqu\u00ed utilizamos el ejemplo anterior pero a la inversa. >>> x = 10 >>> x is not 10 False Operadores de membres\u00eda Estos operadores permiten verificar si hay un str en otro str , list , dict , tuple \u2026 Se utiliza in para buscar y devolver True si encuentra dicho str , o, not in para verificar que no est\u00e1. Operador in >>> \"echemos\" in \"echemos un bitstazo\" True Operador not in >>> \".es\" not in \"echemos un bitstazo\" True","title":"Tipos de operadores"},{"location":"desarrollo/python/tipos-de-operadores/#tipos-de-operadores","text":"En Python tenemos varios tipos de oepradores para hacer comparaciones, c\u00e1lculos, valorar expresiones l\u00f3gicas\u2026 Aritm\u00e9tico Asignaci\u00f3n Comparaci\u00f3n L\u00f3gico Bit a bit ( bitwise ) Identidad Membres\u00eda","title":"Tipos de operadores"},{"location":"desarrollo/python/tipos-de-operadores/#aritmeticos","text":"Se utiliza para realizar operaciones matem\u00e1ticas y se utilizando dos operandos para llevarlas a cabo. Operador Descripci\u00f3n + Se utiliza para realizar operaciones de adicci\u00f3n (suma) - Operaciones de sustracci\u00f3n (resta) * Multiplicaci\u00f3n / Divisi\u00f3n (cociente) % M\u00f3dulo (resto de una divisi\u00f3n)","title":"Aritm\u00e9ticos"},{"location":"desarrollo/python/tipos-de-operadores/#adiccion","text":">>> 2 + 3 5","title":"Adicci\u00f3n"},{"location":"desarrollo/python/tipos-de-operadores/#sustraccion","text":">>> 1 - 2 -1","title":"Sustracci\u00f3n"},{"location":"desarrollo/python/tipos-de-operadores/#multiplicacion","text":">>> 2 * 1 2","title":"Multiplicaci\u00f3n"},{"location":"desarrollo/python/tipos-de-operadores/#division-cociente","text":">>> 4 / 2 0","title":"Divisi\u00f3n (cociente)"},{"location":"desarrollo/python/tipos-de-operadores/#modulo-resto-de-una-division","text":">>> 4 % 2 2.0","title":"M\u00f3dulo, (resto de una divisi\u00f3n)"},{"location":"desarrollo/python/tipos-de-operadores/#operadores-de-asignacion","text":"Estos operadores permiten asignar valores, por norma general a variables, pero no olvidemos que podemos involucrar otros tipos de identificadores como pueden ser listas, tuplas\u2026 Operador Descripci\u00f3n = Asigna un valor += Suma un valor al valor actual y guardar el nuevo valor -= Resta un valor al valor actual y guardar el nuevo valor *= Multiplica un valor al valor actual y guardar el nuevo valor","title":"Operadores de asignaci\u00f3n"},{"location":"desarrollo/python/tipos-de-operadores/#igual","text":">>> variable = 10 >>> print(variable) 10","title":"Igual (=)"},{"location":"desarrollo/python/tipos-de-operadores/#mas-e-igual","text":">>> variable = 1 >>> variable += 2 >>> print(variable) 3","title":"M\u00e1s e igual (+=)"},{"location":"desarrollo/python/tipos-de-operadores/#menos-e-igual-","text":">>> variable = 1 >>> variable -= 2 >>> print(variable) -1","title":"Menos e igual (-=)"},{"location":"desarrollo/python/tipos-de-operadores/#multiplicar-e-igual","text":">>> variable = 2 >>> variable *= 2 >>> print(variable) 4","title":"Multiplicar e igual (*=)"},{"location":"desarrollo/python/tipos-de-operadores/#operadores-de-comparacion","text":"Estos operadores te permiten realizar una comparaci\u00f3n entre dos valores, son muy utilizados en los condicionales o en validaciones como pueden ser bucles\u2026etc. Adem\u00e1s, los valores comparados devuelven un True o un False ( booleano ) si la comparaci\u00f3n se cumple o no. Operador Descripci\u00f3n < Menor que > Mayor que <= Menor o igual que >= Mayor o igual que != Distinto de","title":"Operadores de comparaci\u00f3n"},{"location":"desarrollo/python/tipos-de-operadores/#menor-que","text":">>> 1 < 2 True","title":"Menor que"},{"location":"desarrollo/python/tipos-de-operadores/#mayor-que","text":">>> 1 > 2 False","title":"Mayor que"},{"location":"desarrollo/python/tipos-de-operadores/#menor-igual-que","text":">>> 1 <= 2 True","title":"Menor igual que"},{"location":"desarrollo/python/tipos-de-operadores/#mayor-igual-que","text":">>> 1 >= 2 False","title":"Mayor igual que"},{"location":"desarrollo/python/tipos-de-operadores/#distinto-de","text":">>> 1 != 2 True","title":"Distinto de"},{"location":"desarrollo/python/tipos-de-operadores/#operadores-logicos","text":"Estos permiten realizar operaciones l\u00f3gicas y devuelven True o False seg\u00fan el resultado. Operador Descripci\u00f3n and Deben cumplirse las condiciones s\u00ed o s\u00ed or Debe cumplir al menos una de las condiciones evaluadas not Devuelve False si el resultado es verdadero","title":"Operadores l\u00f3gicos"},{"location":"desarrollo/python/tipos-de-operadores/#operador-and","text":">>> 1<2 and 2<3 True >>> x = 100 < 20 and 2>3 >>>print(x) False","title":"Operador and"},{"location":"desarrollo/python/tipos-de-operadores/#operador-or","text":">>> 1<2 and 100>100 True","title":"Operador or"},{"location":"desarrollo/python/tipos-de-operadores/#operador-not","text":">>> not(2 != 100 and 90<200) False","title":"Operador not"},{"location":"desarrollo/python/tipos-de-operadores/#operadores-bitwise","text":"Operador Descripci\u00f3n & Convierte el primer y segundo n\u00ba decimal en n\u00ba binarios, compara ambos n\u00ba.Cuando se encuentra 1 bit en el primer n\u00ba, y en el segundo tambi\u00e9n, se establece 1.Cuando se encuentra 1 bit en el primer n\u00ba y un 0 en el segundo tambi\u00e9n se establece un 0. \\ Convierte el primer y segundo n\u00ba decimal en n\u00ba binarios, compara ambos n\u00ba.Cuando se encuentra 1 bit en el primer n\u00ba, y en el segundo tambi\u00e9n, se establece 1.Cuando se encuentra 1 bit en el primer n\u00ba y un 0 en el segundo tambi\u00e9n se establece un 1. >> Convierte el primer y segundo n\u00ba decimal en n\u00ba binarios, compara ambos n\u00ba.Cuando se encuentra 1 bit en el segundo n\u00ba, y se desplaza el bit en el segundo tambi\u00e9n, se establece 1.Cuando se encuentra 1 bit en el primer n\u00ba y un 0 en el segundo tambi\u00e9n se establece un 1. << Lo anterior pero desde la izquierda ~ Devuelve el complemento del n\u00ba menos el n\u00ba que obtenemos cambiado cada 1 por un 0 y un 0 por un 1. Es lo mismo que -n\u00ba-1","title":"Operadores bitwise"},{"location":"desarrollo/python/tipos-de-operadores/#ampersan","text":">>> 7 & 2 2 \u00bfPor qu\u00e9 nos devuelve 2? Si nosotros pasamos a binario ambos n\u00fameros: 7 = 0 0 0 0 0 1 1 1 2 = 0 0 0 0 0 0 1 0 Cuando coincida el 1 del primer valor, con el 1 del segundo quedar\u00e1 como 1. Si el primer valor hay un 0 y en el segundo hay 1, se quedar\u00e1 el 0 por encima del 1 quedando tal que as\u00ed: 0 0 0 0 0 1 1 1 0 0 0 0 0 0 1 0 --------------------- 0 0 0 0 0 0 1 0 Si conviertes este n\u00famero binario a decimal te dar\u00e1 2.","title":"Ampersan (&amp;)"},{"location":"desarrollo/python/tipos-de-operadores/#tuberia-o-pipe","text":">>> 190 | 9 191 \u00bfPor qu\u00e9 nos devuelve 191? Si nosotros pasamos a binario ambos n\u00fameros: 190 = 1 0 1 1 1 1 1 0 9 = 0 0 0 0 1 0 0 1 Cuando coincida el 1 del primer valor, con el 1 del segundo quedar\u00e1 como 1. Si el primer valor hay un 0 y en el segundo hay 1, se quedar\u00e1 el 1 por encima del 0 quedando tal que as\u00ed: 1 0 1 1 1 1 1 0 0 0 0 1 0 0 0 1 --------------------- 1 0 1 1 1 1 1 1 Si conviertes este n\u00famero binario a decimal te dar\u00e1 191.","title":"Tuber\u00eda o pipe"},{"location":"desarrollo/python/tipos-de-operadores/#desplazamiento-hacia-la-derecha-o-shift-to-right","text":">>> 10 >> 2 2 \u00bfPor qu\u00e9 nos devuelve 2? Si pasas el n\u00ba 10 a binario: 10 = 0 0 0 0 1 0 1 0 Desplazas 2 posiciones a\u00f1adiendo dos ceros hacia la derecha, y te quedar\u00eda: 0 0 0 0 0 0 1 0 Si conviertes este n\u00famero binario a decimal te dar\u00e1 2.","title":"Desplazamiento hacia la derecha o (shift-to-right)"},{"location":"desarrollo/python/tipos-de-operadores/#desplazamiento-hacia-la-izquierda-o-shift-to-left","text":"Este procedimiento es el mismo que el anterior, pero hacia el otro lado. >>> 10 << 2 40 \u00bfPor qu\u00e9 devuelve 2? Si pasas a binario el n\u00ba 10: 10 = 0 0 0 0 1 0 1 0 Desplazas 2 posiciones a\u00f1adiendo dos ceros hacia la izquierda, y te quedar\u00eda: 0 0 1 0 1 0 0 0 Si conviertes este n\u00famero binario a decimal te dar\u00e1 40.","title":"Desplazamiento hacia la izquierda o (shift-to-left)"},{"location":"desarrollo/python/tipos-de-operadores/#inversion-bitwise","text":">>> ~100 -101 \u00bfPor qu\u00e9 devuelve -101? Devuelve el complemento del n\u00ba menos el n\u00ba que obtenemos cambiado cada 1 por un 0 y un 0 por un 1. Es lo mismo que -n\u00ba-1","title":"Inversi\u00f3n bitwise"},{"location":"desarrollo/python/tipos-de-operadores/#operador-de-identidad","text":"Prueba si dos operandos comparten una identidad. Aqu\u00ed hay dos tipos de operadores is e is not .","title":"Operador de identidad"},{"location":"desarrollo/python/tipos-de-operadores/#operador-is","text":"Por ejemplo, comparamos si un valor almacenado en x es igual a su valor: >>> x = 10 >>> x is 10 True","title":"Operador is"},{"location":"desarrollo/python/tipos-de-operadores/#oeprador-is-not","text":"Aqu\u00ed utilizamos el ejemplo anterior pero a la inversa. >>> x = 10 >>> x is not 10 False","title":"Oeprador is not"},{"location":"desarrollo/python/tipos-de-operadores/#operadores-de-membresia","text":"Estos operadores permiten verificar si hay un str en otro str , list , dict , tuple \u2026 Se utiliza in para buscar y devolver True si encuentra dicho str , o, not in para verificar que no est\u00e1.","title":"Operadores de membres\u00eda"},{"location":"desarrollo/python/tipos-de-operadores/#operador-in","text":">>> \"echemos\" in \"echemos un bitstazo\" True","title":"Operador in"},{"location":"desarrollo/python/tipos-de-operadores/#operador-not-in","text":">>> \".es\" not in \"echemos un bitstazo\" True","title":"Operador not in"},{"location":"desarrollo/python/tuplas-dic-sets-listas-y-mas/","text":"Tuplas Conjunto de valores que no cambian dentro del flujo de la ejecuci\u00f3n del programa. Pueden contener como valor todo tipo de dato incluyendo otra tupla. M\u00e1s info en la doc oficial de Python >>> nacionalidad = ( 'Espa\u00f1ol', 'Turco', 'Italiano') >>> paises = ( 'Espa\u00f1a', nacionalidad, 'Turqu\u00eda', 'Italia' ) >>> print(paises) ('Espa\u00f1a', ('Espa\u00f1ol', 'Turco', 'Italiano'), 'Turqu\u00eda', 'Italia') A\u00f1adir elementos a la tupla >>> nacionalidad = ( 'Espa\u00f1ol', 'Turco', 'Italiano') >>> paises = ( 'Espa\u00f1a', nacionalidad, 'Turqu\u00eda', 'Italia' ) >>> paises += ('Francia', 'Munich') >>> print(paises) ('Espa\u00f1a', ('Espa\u00f1ol', 'Turco', 'Italiano'), 'Turqu\u00eda', 'Italia', 'Francia', 'Munich') Duplicar el str o caracter que obtengamos por un n\u00ba de veces >>> nacionalidad = ( 'Espa\u00f1ol', 'Turco', 'Italiano') >>> nacionalidad * 2 ('Espa\u00f1ol', 'Turco', 'Italiano', 'Espa\u00f1ol', 'Turco', 'Italiano') Muestra el str que est\u00e9 ubicada en una posici\u00f3n >>> nacionalidad = ( 'Espa\u00f1ol', 'Turco', 'Italiano') >>> print(nacionalidad[2]) 'Italiano' Mostrar un conjunto de valores espec\u00edficos de la tupla haciendo uso de su posici\u00f3n >>> paises = ( 'Espa\u00f1a', nacionalidad, 'Turqu\u00eda', 'Italia','Francia', 'Munich') >>> print(paises[3:5]) ('Italia', 'Francia') Listas Grupo de valores representados dentro de unos [], se pueden cambiar de forma simple y sencilla. M\u00e1s info en la doc oficial de las listas en Python Declarando una lista: >>> animales = [ 'gato', 'perro', 'b\u00faho' ] A\u00f1adir valores en la \u00faltima posici\u00f3n de la lista, ( similar a la tupla ) >>> animales = [ 'gato', 'perro', 'b\u00faho' ] >>> animales += [ 'lagartija', 'pez' ] >>> print(animales) ['gato', 'perro', 'b\u00faho', 'lagartija', 'pez'] Tambi\u00e9n podemos utilizar .extend() >>> animales = [ 'gato', 'perro', 'b\u00faho' ] >>> animales.extend([ 'lagartija', 'pez' ]) >>> print(animales) ['gato', 'perro', 'b\u00faho', 'lagartija', 'pez'] Por otro lado podemos a\u00f1adir un valor a partir de una posici\u00f3n espec\u00edfica dentro de la lista .insert() >>> animales = [ 'gato', 'perro', 'b\u00faho' ] >>> animales.insert(0, 'lagartija') >>> print(animales) ['lagartija', 'gato', 'perro', 'b\u00faho'] Eliminar un valor de la lista >>> animales = [ 'gato', 'perro', 'b\u00faho' ] >>> animales.remove('gato') >>> print(animales) [ 'perro', 'b\u00faho' ] Multiplicar el n\u00ba veces los valores de la lista >>> animales = [ 'gato', 'perro', 'b\u00faho' ] >>> animales * 2 ['gato', 'perro', 'b\u00faho', 'gato', 'perro', 'b\u00faho'] Mostrar valores espec\u00edficos utilizando la posici\u00f3n de dichos valores en la lista >>> animales = [ 'gato', 'perro', 'b\u00faho' ] >>> print(animales[0:2]) ['gato', 'perro'] Diccionarios Son un conjunto de valores que se almacenan en modo clave:valor , separados los valores por comas, y todas las claves y sus valores van encerrados en {} como JSON. Las claves no pueden contener tuplas, diccionarios, sets\u2026 solo str o int . M\u00e1s info en la doc oficial >>> ciudades = { 'Andaluc\u00eda': 'Sevilla', 'Pa\u00eds Vasco': 'Bilbao', 'Baleares':'Palma' } Accediendo a un valor del diccionario >>> ciudades = { 'Andaluc\u00eda': 'Sevilla', 'Pa\u00eds Vasco': 'Bilbao', 'Baleares':'Palma' } >>> print(ciudades['Andaluc\u00eda']) Sevilla Obtener el n\u00ba de posiciones de una lista >>> ciudades = { 'Andaluc\u00eda': 'Sevilla', 'Pa\u00eds Vasco': 'Bilbao', 'Baleares':'Palma' } >>> len(ciudades) 3 Obtener las claves de un diccionario >>> ciudades = { 'Andaluc\u00eda': 'Sevilla', 'Pa\u00eds Vasco': 'Bilbao', 'Baleares':'Palma' } >>> ciudades.keys() dict_keys(['Andaluc\u00eda', 'Pa\u00eds Vasco', 'Baleares']) Obtener los valores de un diccionario >>> ciudades = { 'Andaluc\u00eda': 'Sevilla', 'Pa\u00eds Vasco': 'Bilbao', 'Baleares':'Palma' } >>> ciudades.values() dict_values(['Sevilla', 'Bilbao', 'Palma']) Obtener un valor de una clave del diccionario >>> print(ciudades.get('Baleares')) Eliminar un valor de una clave del diccionario del ciudades['Baleares'] # Esto de volver\u00e1 None. print(ciudades.get('Baleares')) Cambiar el valor de una clave del diccionario ciudades['Baleares'] = 'Menorca' # Esto de volver\u00e1 Menorca. print(ciudades.get('Baleares')) Sets Son un conjunto sin orden de valores encerrados en {} que se ordenan cuando se imprimen: _M\u00e1s info en la doc oficial de los Sets en Python >>> marcas_coche = { 'Opel', 'Citr\u00f6en', 'Tesla' } >>> print(marcas_coche) {'Citr\u00f6en', 'Opel', 'Tesla'} Comparar 2 sets y mostrar los valores no duplicados de ambas listas >>> marcas_coche = { 'Opel', 'Citr\u00f6en', 'Tesla' } >>> marcas_moto = { 'Suzuki', 'Citr\u00f6en', 'Tesla', 'Yamaha' } >>> marcas_coche | marcas_moto {'Citr\u00f6en', 'Opel', 'Suzuki', 'Tesla', 'Yamaha'} Comparar 2 sets y mostrar los valores duplicados de ambas listas como sin repetirlos >>> marcas_coche = { 'Opel', 'Citr\u00f6en', 'Tesla' } >>> marcas_moto = { 'Suzuki', 'Citr\u00f6en', 'Tesla', 'Yamaha' } >>> marcas_coche & marcas_moto {'Citr\u00f6en', 'Tesla'} Comparar 2 sets y mostrar diferencias >>> marcas_coche = { 'Opel', 'Citr\u00f6en', 'Tesla' } >>> marcas_moto = { 'Suzuki', 'Citr\u00f6en', 'Tesla', 'Yamaha' } >>> marcas_coche - marcas_moto {'Opel'} >>> marcas_moto - marcas_coche {'Suzuki', 'Yamaha'} A\u00f1adir un conjunto de valores a un set y que queden en primer lugar marcas_coche.update([[\"2\",\"3\",\"4\"]) print(marcas_coche) {2, 3, 4, 'Opel', 'Citr\u00f6en', 'Tesla'} A\u00f1adir un valor al set marcas_coche.add(\"Valor\") print(marcas_coche) {2, 3, 4, 'Opel', 'Citr\u00f6en', 'Tesla', 'Valor'} Eliminar un valor del set marcas_coche.remove(\"Opel\") print(marcas_coche) {2, 3, 4, 'Citr\u00f6en', 'Tesla', 'Valor'} Imprimir dos sets en uno setA = {1,2,3,4,5} setB = {6,7,8,9,10} print(setA|setB) {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}","title":"Tuplas"},{"location":"desarrollo/python/tuplas-dic-sets-listas-y-mas/#tuplas","text":"Conjunto de valores que no cambian dentro del flujo de la ejecuci\u00f3n del programa. Pueden contener como valor todo tipo de dato incluyendo otra tupla. M\u00e1s info en la doc oficial de Python >>> nacionalidad = ( 'Espa\u00f1ol', 'Turco', 'Italiano') >>> paises = ( 'Espa\u00f1a', nacionalidad, 'Turqu\u00eda', 'Italia' ) >>> print(paises) ('Espa\u00f1a', ('Espa\u00f1ol', 'Turco', 'Italiano'), 'Turqu\u00eda', 'Italia')","title":"Tuplas"},{"location":"desarrollo/python/tuplas-dic-sets-listas-y-mas/#anadir-elementos-a-la-tupla","text":">>> nacionalidad = ( 'Espa\u00f1ol', 'Turco', 'Italiano') >>> paises = ( 'Espa\u00f1a', nacionalidad, 'Turqu\u00eda', 'Italia' ) >>> paises += ('Francia', 'Munich') >>> print(paises) ('Espa\u00f1a', ('Espa\u00f1ol', 'Turco', 'Italiano'), 'Turqu\u00eda', 'Italia', 'Francia', 'Munich')","title":"A\u00f1adir elementos a la tupla"},{"location":"desarrollo/python/tuplas-dic-sets-listas-y-mas/#duplicar-el-str-o-caracter-que-obtengamos-por-un-no-de-veces","text":">>> nacionalidad = ( 'Espa\u00f1ol', 'Turco', 'Italiano') >>> nacionalidad * 2 ('Espa\u00f1ol', 'Turco', 'Italiano', 'Espa\u00f1ol', 'Turco', 'Italiano')","title":"Duplicar el str o caracter que obtengamos por un n\u00ba de veces"},{"location":"desarrollo/python/tuplas-dic-sets-listas-y-mas/#muestra-el-str-que-este-ubicada-en-una-posicion","text":">>> nacionalidad = ( 'Espa\u00f1ol', 'Turco', 'Italiano') >>> print(nacionalidad[2]) 'Italiano'","title":"Muestra el str que est\u00e9 ubicada en una posici\u00f3n"},{"location":"desarrollo/python/tuplas-dic-sets-listas-y-mas/#mostrar-un-conjunto-de-valores-especificos-de-la-tupla-haciendo-uso-de-su-posicion","text":">>> paises = ( 'Espa\u00f1a', nacionalidad, 'Turqu\u00eda', 'Italia','Francia', 'Munich') >>> print(paises[3:5]) ('Italia', 'Francia')","title":"Mostrar un conjunto de valores espec\u00edficos de la tupla haciendo uso de su posici\u00f3n"},{"location":"desarrollo/python/tuplas-dic-sets-listas-y-mas/#listas","text":"Grupo de valores representados dentro de unos [], se pueden cambiar de forma simple y sencilla. M\u00e1s info en la doc oficial de las listas en Python Declarando una lista: >>> animales = [ 'gato', 'perro', 'b\u00faho' ]","title":"Listas"},{"location":"desarrollo/python/tuplas-dic-sets-listas-y-mas/#anadir-valores-en-la-ultima-posicion-de-la-lista-similar-a-la-tupla","text":">>> animales = [ 'gato', 'perro', 'b\u00faho' ] >>> animales += [ 'lagartija', 'pez' ] >>> print(animales) ['gato', 'perro', 'b\u00faho', 'lagartija', 'pez']","title":"A\u00f1adir valores en la \u00faltima posici\u00f3n de la lista, (similar a la tupla)"},{"location":"desarrollo/python/tuplas-dic-sets-listas-y-mas/#tambien-podemos-utilizar-extend","text":">>> animales = [ 'gato', 'perro', 'b\u00faho' ] >>> animales.extend([ 'lagartija', 'pez' ]) >>> print(animales) ['gato', 'perro', 'b\u00faho', 'lagartija', 'pez'] Por otro lado podemos a\u00f1adir un valor a partir de una posici\u00f3n espec\u00edfica dentro de la lista .insert() >>> animales = [ 'gato', 'perro', 'b\u00faho' ] >>> animales.insert(0, 'lagartija') >>> print(animales) ['lagartija', 'gato', 'perro', 'b\u00faho']","title":"Tambi\u00e9n podemos utilizar .extend()"},{"location":"desarrollo/python/tuplas-dic-sets-listas-y-mas/#eliminar-un-valor-de-la-lista","text":">>> animales = [ 'gato', 'perro', 'b\u00faho' ] >>> animales.remove('gato') >>> print(animales) [ 'perro', 'b\u00faho' ]","title":"Eliminar un valor de la lista"},{"location":"desarrollo/python/tuplas-dic-sets-listas-y-mas/#multiplicar-el-no-veces-los-valores-de-la-lista","text":">>> animales = [ 'gato', 'perro', 'b\u00faho' ] >>> animales * 2 ['gato', 'perro', 'b\u00faho', 'gato', 'perro', 'b\u00faho']","title":"Multiplicar el n\u00ba veces los valores de la lista"},{"location":"desarrollo/python/tuplas-dic-sets-listas-y-mas/#mostrar-valores-especificos-utilizando-la-posicion-de-dichos-valores-en-la-lista","text":">>> animales = [ 'gato', 'perro', 'b\u00faho' ] >>> print(animales[0:2]) ['gato', 'perro']","title":"Mostrar valores espec\u00edficos utilizando la posici\u00f3n de dichos valores en la lista"},{"location":"desarrollo/python/tuplas-dic-sets-listas-y-mas/#diccionarios","text":"Son un conjunto de valores que se almacenan en modo clave:valor , separados los valores por comas, y todas las claves y sus valores van encerrados en {} como JSON. Las claves no pueden contener tuplas, diccionarios, sets\u2026 solo str o int . M\u00e1s info en la doc oficial >>> ciudades = { 'Andaluc\u00eda': 'Sevilla', 'Pa\u00eds Vasco': 'Bilbao', 'Baleares':'Palma' }","title":"Diccionarios"},{"location":"desarrollo/python/tuplas-dic-sets-listas-y-mas/#accediendo-a-un-valor-del-diccionario","text":">>> ciudades = { 'Andaluc\u00eda': 'Sevilla', 'Pa\u00eds Vasco': 'Bilbao', 'Baleares':'Palma' } >>> print(ciudades['Andaluc\u00eda']) Sevilla","title":"Accediendo a un valor del diccionario"},{"location":"desarrollo/python/tuplas-dic-sets-listas-y-mas/#obtener-el-no-de-posiciones-de-una-lista","text":">>> ciudades = { 'Andaluc\u00eda': 'Sevilla', 'Pa\u00eds Vasco': 'Bilbao', 'Baleares':'Palma' } >>> len(ciudades) 3","title":"Obtener el n\u00ba de posiciones de una lista"},{"location":"desarrollo/python/tuplas-dic-sets-listas-y-mas/#obtener-las-claves-de-un-diccionario","text":">>> ciudades = { 'Andaluc\u00eda': 'Sevilla', 'Pa\u00eds Vasco': 'Bilbao', 'Baleares':'Palma' } >>> ciudades.keys() dict_keys(['Andaluc\u00eda', 'Pa\u00eds Vasco', 'Baleares'])","title":"Obtener las claves de un diccionario"},{"location":"desarrollo/python/tuplas-dic-sets-listas-y-mas/#obtener-los-valores-de-un-diccionario","text":">>> ciudades = { 'Andaluc\u00eda': 'Sevilla', 'Pa\u00eds Vasco': 'Bilbao', 'Baleares':'Palma' } >>> ciudades.values() dict_values(['Sevilla', 'Bilbao', 'Palma'])","title":"Obtener los valores de un diccionario"},{"location":"desarrollo/python/tuplas-dic-sets-listas-y-mas/#obtener-un-valor-de-una-clave-del-diccionario","text":">>> print(ciudades.get('Baleares'))","title":"Obtener un valor de una clave del diccionario"},{"location":"desarrollo/python/tuplas-dic-sets-listas-y-mas/#eliminar-un-valor-de-una-clave-del-diccionario","text":"del ciudades['Baleares'] # Esto de volver\u00e1 None. print(ciudades.get('Baleares'))","title":"Eliminar un valor de una clave del diccionario"},{"location":"desarrollo/python/tuplas-dic-sets-listas-y-mas/#cambiar-el-valor-de-una-clave-del-diccionario","text":"ciudades['Baleares'] = 'Menorca' # Esto de volver\u00e1 Menorca. print(ciudades.get('Baleares'))","title":"Cambiar el valor de una clave del diccionario"},{"location":"desarrollo/python/tuplas-dic-sets-listas-y-mas/#sets","text":"Son un conjunto sin orden de valores encerrados en {} que se ordenan cuando se imprimen: _M\u00e1s info en la doc oficial de los Sets en Python >>> marcas_coche = { 'Opel', 'Citr\u00f6en', 'Tesla' } >>> print(marcas_coche) {'Citr\u00f6en', 'Opel', 'Tesla'}","title":"Sets"},{"location":"desarrollo/python/tuplas-dic-sets-listas-y-mas/#comparar-2-sets-y-mostrar-los-valores-no-duplicados-de-ambas-listas","text":">>> marcas_coche = { 'Opel', 'Citr\u00f6en', 'Tesla' } >>> marcas_moto = { 'Suzuki', 'Citr\u00f6en', 'Tesla', 'Yamaha' } >>> marcas_coche | marcas_moto {'Citr\u00f6en', 'Opel', 'Suzuki', 'Tesla', 'Yamaha'}","title":"Comparar 2 sets y mostrar los valores no duplicados de ambas listas"},{"location":"desarrollo/python/tuplas-dic-sets-listas-y-mas/#comparar-2-sets-y-mostrar-los-valores-duplicados-de-ambas-listas-como-sin-repetirlos","text":">>> marcas_coche = { 'Opel', 'Citr\u00f6en', 'Tesla' } >>> marcas_moto = { 'Suzuki', 'Citr\u00f6en', 'Tesla', 'Yamaha' } >>> marcas_coche & marcas_moto {'Citr\u00f6en', 'Tesla'}","title":"Comparar 2 sets y mostrar los valores duplicados de ambas listas como sin repetirlos"},{"location":"desarrollo/python/tuplas-dic-sets-listas-y-mas/#comparar-2-sets-y-mostrar-diferencias","text":">>> marcas_coche = { 'Opel', 'Citr\u00f6en', 'Tesla' } >>> marcas_moto = { 'Suzuki', 'Citr\u00f6en', 'Tesla', 'Yamaha' } >>> marcas_coche - marcas_moto {'Opel'} >>> marcas_moto - marcas_coche {'Suzuki', 'Yamaha'}","title":"Comparar 2 sets y mostrar diferencias"},{"location":"desarrollo/python/tuplas-dic-sets-listas-y-mas/#anadir-un-conjunto-de-valores-a-un-set-y-que-queden-en-primer-lugar","text":"marcas_coche.update([[\"2\",\"3\",\"4\"]) print(marcas_coche) {2, 3, 4, 'Opel', 'Citr\u00f6en', 'Tesla'}","title":"A\u00f1adir un conjunto de valores a un set y que queden en primer lugar"},{"location":"desarrollo/python/tuplas-dic-sets-listas-y-mas/#anadir-un-valor-al-set","text":"marcas_coche.add(\"Valor\") print(marcas_coche) {2, 3, 4, 'Opel', 'Citr\u00f6en', 'Tesla', 'Valor'}","title":"A\u00f1adir un valor al set"},{"location":"desarrollo/python/tuplas-dic-sets-listas-y-mas/#eliminar-un-valor-del-set","text":"marcas_coche.remove(\"Opel\") print(marcas_coche) {2, 3, 4, 'Citr\u00f6en', 'Tesla', 'Valor'}","title":"Eliminar un valor del set"},{"location":"desarrollo/python/tuplas-dic-sets-listas-y-mas/#imprimir-dos-sets-en-uno","text":"setA = {1,2,3,4,5} setB = {6,7,8,9,10} print(setA|setB) {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}","title":"Imprimir dos sets en uno"},{"location":"redes/conversion-numeros/","text":"Conversi\u00f3n de n\u00fameros Introducci\u00f3n En inform\u00e1tica tendremos que enfrentarnos con varios problemas que requieren de soluciones distintas haciendo uso de la capacidad resolutiva para seg\u00fan que problemas con los que nos podamos encontrar en el \u00e1mbito de sistemas, haciendo uso de algoritmos para sacarnos de apuros en desarrollo Web, e incluso, haciendo un proceso de descartes en base a pruebas de rendimiento. Aqu\u00ed todo es posible, sin embargo, tambi\u00e9n debemos aprender las unidades b\u00e1sicas con la que las m\u00e1quinas trabajan para enviar informaci\u00f3n a bajo nivel, obtener un color para nuestros desarrollos Web\u2026etc Todo esto lo aprenderemos aqu\u00ed. Binario Los n\u00fameros binarios son aquellos que est\u00e1n comprendidos entre 0 y 1 utilizando como base el 2. Esto representa la condici\u00f3n el\u00e9ctrica, es decir, 0 es apagado y 1 es encendido. Binario => Decimal BIN->DEC Para convertir de binario a decimal tenemos dos formas de hacerlo. Mediante el uso de una tabla exponencial Tabla de exponentes Mediante posici\u00f3n Para convertir mediante posici\u00f3n, lo \u00fanico que deberemos hacer, es saber en qu\u00e9 posici\u00f3n tenemos cada n\u00famero y utilizar las potencias. 110101:sub:(2) => Decimal ((1*2\u2075)+(1*2\u2074)+(0*2\u00b3)+(1*2\u00b2)+(0*2\u00b9)+(1*2\u2070)) = ((1*2\u2075)+(1*2\u2074)+(1*2\u00b2)+(1*2\u2070)) = 53(10) 53:sub:(10) es nuestro n\u00famero decimal. Tabla de exponentes Dibujamos una tabla en relaci\u00f3n al n\u00famero que creemos que podamos obtener: 128 64 32 16 8 4 2 1 2 7 2 6 2 5 2 4 2 3 2 2 2 1 2 0 Y en base al n\u00famero que nos den, comenzamos a comparar de menor a mayor. Por ejemplo: N\u00ba 128 64 32 16 8 4 2 1 105 0 1 1 0 1 0 0 1 Binario => Hexadecimal Hexadecimal Binario 0 0000 1 0001 2 0010 3 0011 4 0100 5 0101 6 0110 7 0111 8 1000 9 1001 A 1010 B 1011 C 1100 D 1101 E 1110 F 1111 Para convertir tan solo necesitaremos traducir cifra por cifra en base a esta tabla. Por ejemplo: 1010111101100100 1010 = A 1111 = F 0110 = 6 0100 = 4 Nuestro n\u00famero es: AF64 Binario -> Octal Tenemos que tener presente la siguiente equivalencia: Decimal Binario 0 000 1 001 2 010 3 011 4 100 5 101 6 110 7 111 El octal solo hace uso de 3 bits, y no de 4 como el decimal o hexadecimal. Tomaremos los 3 primeros bits y los separamos para hacer la conversi\u00f3n. 1 010 010 111(2) = x(8) 1 010 111 => Vemos como el 1 est\u00e1 solo, por ello, le a\u00f1adimos 2 ceros para normalizarlo. 001 010 111. Nuestro n\u00famero es: 127:sub:(8) Decimal Son n\u00fameros comprendidos entre 0 y 9, hacen uso de base 10. Estos se suelen utilizar mucho para representar la numeraci\u00f3n IPv4, obtener un color para aplicarlo en desarrollo Web mediante la funci\u00f3n rgb/rgba()\u2026etc Decimal => Binario DEC->BIN Para convertir de binario a decimal tenemos dos formas de hacerlo: Mediante divisi\u00f3n Tabla exponencial Divisi\u00f3n Para convertir de decimal a binario, simplemente tenemos que tener en cuenta el resto de la divisi\u00f3n, ignorar los decimales y continuar dividiendo el n\u00famero del cociente hasta que ya no pueda dividirse m\u00e1s. Para reconstruir el n\u00famero, se seleccionan de derecha a izquierda. Por ejemplo: 362|2 = 0 181|2 = 1 90|2 = 0 45|2 = 1 22|2 = 0 11|2 = 1 5|2 = 1 2|2 = 0 0|2 = 1 101101010 Tabla de exponentes Dibujamos una tabla en relaci\u00f3n al n\u00famero que creemos que podamos obtener. 128 64 32 16 8 4 2 1 2 7 2 6 2 5 2 4 2 3 2 2 2 1 2 0 Y en base al n\u00famero que nos den, comenzamos a comparar de menor a mayor. Por ejemplo: N\u00ba 128 64 32 16 8 4 2 1 105 0 1 1 0 1 0 0 1 Decimal -> Hexadecimal Dividimos el n\u00famero entre 16 utilizamos el cociente para seguir dividiendo sin utilizar los decimales resultantes. Posteriormente, para obtener el resto, se multiplica el decimal obtenido de la divisi\u00f3n por 16 que es la base para obtener el resto. Por ejemplo: 2937:sub:(10) -> x:sub:(16) 2937|16 = 183.5625 -> Resto = 0.5625*16 = 9 183|16 = 11.4375 -> Re = 0.4375*16 = 7 11|16 = 0.6875 -> Re = 0.6875*16 = B Con lo que nuestro n\u00ba es: B79:sub:(16) Decimal -> Octal Se divide el n\u00famero decimal entre 8, se desestiman los decimales, y el \u00faltimo n\u00famero que ya no puede ser divisible se queda tal cual como resto formando parte del n\u00ba. Se lee de derecha hacia la izquierda. 210(10) = x(8) 210|8 = Resto =2 26|8 = Re = 2 3|8 = Re =3 Nuestro n\u00famero es: 322. Hexadecimal Estos n\u00fameros son muy utilizados sobre todo cuando queremos manipular cierta informaci\u00f3n de archivos, contemplan un rango entre 0 y F, siendo F el n\u00famero 15, hace uso de base 16. Hexadecimal => Decimal Para convertir de hexadecimal a decimal Utilizamos las posiciones de los n\u00fameros y los multiplicamos por el resultado de su base. B79(16) = x(12) B*16\u00b2 + 7*16\u00b9 + 9*16\u2070 = 11*256 + 7*16 + 9*1 = 2816+112+9 = 2937(10) Hexadecimal => Binario Tenemos que tener en cuenta la siguiente equivalencia: Hexadecimal Binario 0 0000 1 0001 2 0010 3 0011 4 0100 5 0101 6 0110 7 0111 8 1000 9 1001 A 1010 B 1011 C 1100 D 1101 E 1110 F 1111 Para convertir tan solo necesitaremos traducir cifra por cifra en base a esta tabla. Por ejemplo: A7F0 A = 1010 7 = 0111 F = 1111 0 = 0000 Nuestro n\u00famero es: 1010011111110000 Hexadecimal -> Octal Realizar este proceso de conversi\u00f3n no es un m\u00e9todo directo. Primero hay que traducir de HEX->BIN y luego de BIN->OCT para obtener el valor. E67(16) = x(8) E(16) = 1110(2) 6(16) = 0110(2) 7(16) = 0111(2) N\u00ba convertido= 111001100111 Una vez obtenido el binario, lo pasamos a octal. 111001100111(2) = x(8) 111 001 100 111 = 7147(8) Nuestro n\u00famero es 7147:sub:(8) Octal \u00datil pero menos visto, nos permite obtener un n\u00famero comprendido entre 0-7, hace uso de base 8. Octal -> Decimal Se tiene en cuenta la posici\u00f3n de la cifra, ya que luego se multiplica por su base, y a su vez, la base se multiplica por s\u00ed misma tantas veces tenga n en el exponente. 7147(8) = x(10) 7*8\u00b3 + 1*8\u00b2 + 4*8\u00b9 + 7*8\u2070 = 3584 + 64 + 32 + 7 Nuestro n\u00famero es: 3,687 Octal -> Binario B\u00e1sicamente utilizamos 3 bits por d\u00edgito, hay que tener en cuenta la siguiente equivalencia: Tenemos que tener presente la siguiente equivalencia: Decimal Binario 0 000 1 001 2 010 3 011 4 100 5 101 6 110 7 111 7420:sub:(8)-> x:sub:(2) 7 = 111 4 = 100 2 = 010 0 = 000 Nuestro n\u00famero es: 111100010000:sub:(2) Octal -> Hexadecimal Como hemos dicho anteriormente, es un proceso que no se hace directo y hay que hacer uso del paso anterior para obtener el n\u00famero hexadecimal. 7456(8) -> x(2) 7 = 111 4 = 100 5 = 101 6 = 110 N\u00ba binario: 111100101110 Para obtener el n\u00famero hexadecimal, bastar\u00e1 con separar 4 bits los d\u00edgitos del n\u00ba binario. 1111 0010 1110(2) -> x(16) 1111 = F 0010 = 2 1110 = E Nuestro n\u00famero es: F2E Fuentes Wikipedia Conversor n\u00fameros Youtube Calculadora Conversor Img de cabecera","title":"Conversi\u00f3n de n\u00fameros"},{"location":"redes/conversion-numeros/#conversion-de-numeros","text":"","title":"Conversi\u00f3n de n\u00fameros"},{"location":"redes/conversion-numeros/#introduccion","text":"En inform\u00e1tica tendremos que enfrentarnos con varios problemas que requieren de soluciones distintas haciendo uso de la capacidad resolutiva para seg\u00fan que problemas con los que nos podamos encontrar en el \u00e1mbito de sistemas, haciendo uso de algoritmos para sacarnos de apuros en desarrollo Web, e incluso, haciendo un proceso de descartes en base a pruebas de rendimiento. Aqu\u00ed todo es posible, sin embargo, tambi\u00e9n debemos aprender las unidades b\u00e1sicas con la que las m\u00e1quinas trabajan para enviar informaci\u00f3n a bajo nivel, obtener un color para nuestros desarrollos Web\u2026etc Todo esto lo aprenderemos aqu\u00ed.","title":"Introducci\u00f3n"},{"location":"redes/conversion-numeros/#binario","text":"Los n\u00fameros binarios son aquellos que est\u00e1n comprendidos entre 0 y 1 utilizando como base el 2. Esto representa la condici\u00f3n el\u00e9ctrica, es decir, 0 es apagado y 1 es encendido.","title":"Binario"},{"location":"redes/conversion-numeros/#binario-decimal-bin-dec","text":"Para convertir de binario a decimal tenemos dos formas de hacerlo. Mediante el uso de una tabla exponencial Tabla de exponentes","title":"Binario =&gt; Decimal BIN-&gt;DEC"},{"location":"redes/conversion-numeros/#mediante-posicion","text":"Para convertir mediante posici\u00f3n, lo \u00fanico que deberemos hacer, es saber en qu\u00e9 posici\u00f3n tenemos cada n\u00famero y utilizar las potencias. 110101:sub:(2) => Decimal ((1*2\u2075)+(1*2\u2074)+(0*2\u00b3)+(1*2\u00b2)+(0*2\u00b9)+(1*2\u2070)) = ((1*2\u2075)+(1*2\u2074)+(1*2\u00b2)+(1*2\u2070)) = 53(10) 53:sub:(10) es nuestro n\u00famero decimal. Tabla de exponentes Dibujamos una tabla en relaci\u00f3n al n\u00famero que creemos que podamos obtener: 128 64 32 16 8 4 2 1 2 7 2 6 2 5 2 4 2 3 2 2 2 1 2 0 Y en base al n\u00famero que nos den, comenzamos a comparar de menor a mayor. Por ejemplo: N\u00ba 128 64 32 16 8 4 2 1 105 0 1 1 0 1 0 0 1","title":"Mediante posici\u00f3n"},{"location":"redes/conversion-numeros/#binario-hexadecimal","text":"Hexadecimal Binario 0 0000 1 0001 2 0010 3 0011 4 0100 5 0101 6 0110 7 0111 8 1000 9 1001 A 1010 B 1011 C 1100 D 1101 E 1110 F 1111 Para convertir tan solo necesitaremos traducir cifra por cifra en base a esta tabla. Por ejemplo: 1010111101100100 1010 = A 1111 = F 0110 = 6 0100 = 4 Nuestro n\u00famero es: AF64","title":"Binario =&gt; Hexadecimal"},{"location":"redes/conversion-numeros/#binario-octal","text":"Tenemos que tener presente la siguiente equivalencia: Decimal Binario 0 000 1 001 2 010 3 011 4 100 5 101 6 110 7 111 El octal solo hace uso de 3 bits, y no de 4 como el decimal o hexadecimal. Tomaremos los 3 primeros bits y los separamos para hacer la conversi\u00f3n. 1 010 010 111(2) = x(8) 1 010 111 => Vemos como el 1 est\u00e1 solo, por ello, le a\u00f1adimos 2 ceros para normalizarlo. 001 010 111. Nuestro n\u00famero es: 127:sub:(8)","title":"Binario -&gt; Octal"},{"location":"redes/conversion-numeros/#decimal","text":"Son n\u00fameros comprendidos entre 0 y 9, hacen uso de base 10. Estos se suelen utilizar mucho para representar la numeraci\u00f3n IPv4, obtener un color para aplicarlo en desarrollo Web mediante la funci\u00f3n rgb/rgba()\u2026etc","title":"Decimal"},{"location":"redes/conversion-numeros/#decimal-binario-dec-bin","text":"Para convertir de binario a decimal tenemos dos formas de hacerlo: Mediante divisi\u00f3n Tabla exponencial","title":"Decimal =&gt; Binario DEC-&gt;BIN"},{"location":"redes/conversion-numeros/#division","text":"Para convertir de decimal a binario, simplemente tenemos que tener en cuenta el resto de la divisi\u00f3n, ignorar los decimales y continuar dividiendo el n\u00famero del cociente hasta que ya no pueda dividirse m\u00e1s. Para reconstruir el n\u00famero, se seleccionan de derecha a izquierda. Por ejemplo: 362|2 = 0 181|2 = 1 90|2 = 0 45|2 = 1 22|2 = 0 11|2 = 1 5|2 = 1 2|2 = 0 0|2 = 1 101101010 Tabla de exponentes Dibujamos una tabla en relaci\u00f3n al n\u00famero que creemos que podamos obtener. 128 64 32 16 8 4 2 1 2 7 2 6 2 5 2 4 2 3 2 2 2 1 2 0 Y en base al n\u00famero que nos den, comenzamos a comparar de menor a mayor. Por ejemplo: N\u00ba 128 64 32 16 8 4 2 1 105 0 1 1 0 1 0 0 1","title":"Divisi\u00f3n"},{"location":"redes/conversion-numeros/#decimal-hexadecimal","text":"Dividimos el n\u00famero entre 16 utilizamos el cociente para seguir dividiendo sin utilizar los decimales resultantes. Posteriormente, para obtener el resto, se multiplica el decimal obtenido de la divisi\u00f3n por 16 que es la base para obtener el resto. Por ejemplo: 2937:sub:(10) -> x:sub:(16) 2937|16 = 183.5625 -> Resto = 0.5625*16 = 9 183|16 = 11.4375 -> Re = 0.4375*16 = 7 11|16 = 0.6875 -> Re = 0.6875*16 = B Con lo que nuestro n\u00ba es: B79:sub:(16)","title":"Decimal -&gt; Hexadecimal"},{"location":"redes/conversion-numeros/#decimal-octal","text":"Se divide el n\u00famero decimal entre 8, se desestiman los decimales, y el \u00faltimo n\u00famero que ya no puede ser divisible se queda tal cual como resto formando parte del n\u00ba. Se lee de derecha hacia la izquierda. 210(10) = x(8) 210|8 = Resto =2 26|8 = Re = 2 3|8 = Re =3 Nuestro n\u00famero es: 322.","title":"Decimal -&gt; Octal"},{"location":"redes/conversion-numeros/#hexadecimal","text":"Estos n\u00fameros son muy utilizados sobre todo cuando queremos manipular cierta informaci\u00f3n de archivos, contemplan un rango entre 0 y F, siendo F el n\u00famero 15, hace uso de base 16.","title":"Hexadecimal"},{"location":"redes/conversion-numeros/#hexadecimal-decimal","text":"Para convertir de hexadecimal a decimal Utilizamos las posiciones de los n\u00fameros y los multiplicamos por el resultado de su base. B79(16) = x(12) B*16\u00b2 + 7*16\u00b9 + 9*16\u2070 = 11*256 + 7*16 + 9*1 = 2816+112+9 = 2937(10)","title":"Hexadecimal =&gt; Decimal"},{"location":"redes/conversion-numeros/#hexadecimal-binario","text":"Tenemos que tener en cuenta la siguiente equivalencia: Hexadecimal Binario 0 0000 1 0001 2 0010 3 0011 4 0100 5 0101 6 0110 7 0111 8 1000 9 1001 A 1010 B 1011 C 1100 D 1101 E 1110 F 1111 Para convertir tan solo necesitaremos traducir cifra por cifra en base a esta tabla. Por ejemplo: A7F0 A = 1010 7 = 0111 F = 1111 0 = 0000 Nuestro n\u00famero es: 1010011111110000","title":"Hexadecimal =&gt; Binario"},{"location":"redes/conversion-numeros/#hexadecimal-octal","text":"Realizar este proceso de conversi\u00f3n no es un m\u00e9todo directo. Primero hay que traducir de HEX->BIN y luego de BIN->OCT para obtener el valor. E67(16) = x(8) E(16) = 1110(2) 6(16) = 0110(2) 7(16) = 0111(2) N\u00ba convertido= 111001100111 Una vez obtenido el binario, lo pasamos a octal. 111001100111(2) = x(8) 111 001 100 111 = 7147(8) Nuestro n\u00famero es 7147:sub:(8)","title":"Hexadecimal -&gt; Octal"},{"location":"redes/conversion-numeros/#octal","text":"\u00datil pero menos visto, nos permite obtener un n\u00famero comprendido entre 0-7, hace uso de base 8.","title":"Octal"},{"location":"redes/conversion-numeros/#octal-decimal","text":"Se tiene en cuenta la posici\u00f3n de la cifra, ya que luego se multiplica por su base, y a su vez, la base se multiplica por s\u00ed misma tantas veces tenga n en el exponente. 7147(8) = x(10) 7*8\u00b3 + 1*8\u00b2 + 4*8\u00b9 + 7*8\u2070 = 3584 + 64 + 32 + 7 Nuestro n\u00famero es: 3,687","title":"Octal -&gt; Decimal"},{"location":"redes/conversion-numeros/#octal-binario","text":"B\u00e1sicamente utilizamos 3 bits por d\u00edgito, hay que tener en cuenta la siguiente equivalencia: Tenemos que tener presente la siguiente equivalencia: Decimal Binario 0 000 1 001 2 010 3 011 4 100 5 101 6 110 7 111 7420:sub:(8)-> x:sub:(2) 7 = 111 4 = 100 2 = 010 0 = 000 Nuestro n\u00famero es: 111100010000:sub:(2)","title":"Octal -&gt; Binario"},{"location":"redes/conversion-numeros/#octal-hexadecimal","text":"Como hemos dicho anteriormente, es un proceso que no se hace directo y hay que hacer uso del paso anterior para obtener el n\u00famero hexadecimal. 7456(8) -> x(2) 7 = 111 4 = 100 5 = 101 6 = 110 N\u00ba binario: 111100101110 Para obtener el n\u00famero hexadecimal, bastar\u00e1 con separar 4 bits los d\u00edgitos del n\u00ba binario. 1111 0010 1110(2) -> x(16) 1111 = F 0010 = 2 1110 = E Nuestro n\u00famero es: F2E","title":"Octal -&gt; Hexadecimal"},{"location":"redes/conversion-numeros/#fuentes","text":"Wikipedia Conversor n\u00fameros Youtube Calculadora Conversor Img de cabecera","title":"Fuentes"},{"location":"servicios/monitorizacion/zabbix/","text":"Introducci\u00f3n Software de monitorizaci\u00f3n elaborado en PHP\u2026. Instalaci\u00f3n en CentOS 8 Actualizar el sistema dnf upgrade Instalar el repositorio rpm -Uvh https://repo.zabbix.com/zabbix/5.0/rhel/8/x86_64/zabbix-release-5.0-1.el8.noarch.rpm dnf clean all Instalar el software necesario dnf install zabbix-server-mysql zabbix-web-mysql zabbix-nginx-conf zabbix-agent mariadb-server Configurando por primera vez la base de datos Habilitando al arranque y arrancando MariaDB systemctl enable --now mariadb.service Configurando la base de datos Nota Solo hay que seguir los pasos. mysql_secure_installation Configurando la base de datos para Zabbix mysql mysql -u root -p mysql> CREATE DATABASE zabbix CHARACTER SET utf8 COLLATE utf8_bin; mysql> CREATE USER zabbix@localhost identified BY 'AQUI_UNA_CONTRASE\u00d1A'; mysql> GRANT ALL PRIVILEGES ON zabbix.* TO zabbix@localhost; mysql> QUIT; Importando el esquema de base de datos zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -u zabbix -p AQUI_UNA_CONTRASE\u00d1A Configurando la base de datos para el servidor Editar el archivo /etc/zabbix/zabbix_server.conf y cambiar la contrase\u00f1a de BBDD: DBPassword=AQUI_UNA_CONTRASE\u00d1A Editar archivo /etc/nginx/conf.d/zabbix.conf Nota Descomentar y configurar las directivas listen y server_name # listen 80; # server_name example.com; Escoger el huso horario /etc/php-fpm.d/zabbix.conf php php_value[date.timezone] = Atlantic/Canary Arrancando y habilitando Zabbix en el sistema systemctl enable --now zabbix-server.service zabbix-agent.service nginx.service php-fpm.service Accediendo al portal de configuraci\u00f3n Accedemos mediante el dominio que hemos configurado anteriormente: Usuario: Admin Contrase\u00f1a: zabbix Let\u2019s Encrypt Instalar el software necesario dnf install epel-release dnf install certbot python3-certbot-nginx Nota Teniendo el dominio apuntando al servidor y certificando en DNS Checker que el resultado del registro es la IP del dominio, procedemos a generar el certificado. Generando el certificado certbot --nginx -d DOMINIO -m TU_EMAIL --agree-tos --non-interactive Reiniciando el servidor web systemctl restart nginx.service Ya tendremos nuestro servidor web protegido via SSL. Firewalld Instalar firewalld dnf install firewalld Habilitando al arranque e inici\u00e1ndolo systemctl enable --now firewalld.service Abriendo los puertos para Zabbix firewall-cmd --add-service http --add-service https --zone public --permanent firewall-cmd --reload Procedimiento de backup Exportar todas las bases de datos mysqldump -u root --all-databases -p > dump-$(date +%d-%m-%y).sql * :code:`-u root`: Usuario root * :code:`--all-databases`: Todas las bases de datos * :code:`-p`: Pregunta por la contrase\u00f1a * :code:`>` : Redirige el flujo hacia el fichero salida :code:`dump-$(date +%d-%m-%y).sql` Comprimir los directorios esenciales tar zcfv /root/zabbix-$(date +%d-%m-%y).tar.gz /etc/zabbix /usr/share/zabbix --acls --xattrs --selinux Siguiente Anterior","title":"Introducci\u00f3n"},{"location":"servicios/monitorizacion/zabbix/#introduccion","text":"Software de monitorizaci\u00f3n elaborado en PHP\u2026.","title":"Introducci\u00f3n"},{"location":"servicios/monitorizacion/zabbix/#instalacion-en-centos-8","text":"","title":"Instalaci\u00f3n en CentOS 8"},{"location":"servicios/monitorizacion/zabbix/#actualizar-el-sistema","text":"dnf upgrade","title":"Actualizar el sistema"},{"location":"servicios/monitorizacion/zabbix/#instalar-el-repositorio","text":"rpm -Uvh https://repo.zabbix.com/zabbix/5.0/rhel/8/x86_64/zabbix-release-5.0-1.el8.noarch.rpm dnf clean all","title":"Instalar el repositorio"},{"location":"servicios/monitorizacion/zabbix/#instalar-el-software-necesario","text":"dnf install zabbix-server-mysql zabbix-web-mysql zabbix-nginx-conf zabbix-agent mariadb-server","title":"Instalar el software necesario"},{"location":"servicios/monitorizacion/zabbix/#configurando-por-primera-vez-la-base-de-datos","text":"","title":"Configurando por primera vez la base de datos"},{"location":"servicios/monitorizacion/zabbix/#habilitando-al-arranque-y-arrancando-mariadb","text":"systemctl enable --now mariadb.service","title":"Habilitando al arranque y arrancando MariaDB"},{"location":"servicios/monitorizacion/zabbix/#configurando-la-base-de-datos","text":"Nota Solo hay que seguir los pasos. mysql_secure_installation","title":"Configurando la base de datos"},{"location":"servicios/monitorizacion/zabbix/#configurando-la-base-de-datos-para-zabbix","text":"mysql mysql -u root -p mysql> CREATE DATABASE zabbix CHARACTER SET utf8 COLLATE utf8_bin; mysql> CREATE USER zabbix@localhost identified BY 'AQUI_UNA_CONTRASE\u00d1A'; mysql> GRANT ALL PRIVILEGES ON zabbix.* TO zabbix@localhost; mysql> QUIT;","title":"Configurando la base de datos para Zabbix"},{"location":"servicios/monitorizacion/zabbix/#importando-el-esquema-de-base-de-datos","text":"zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -u zabbix -p AQUI_UNA_CONTRASE\u00d1A","title":"Importando el esquema de base de datos"},{"location":"servicios/monitorizacion/zabbix/#configurando-la-base-de-datos-para-el-servidor","text":"Editar el archivo /etc/zabbix/zabbix_server.conf y cambiar la contrase\u00f1a de BBDD: DBPassword=AQUI_UNA_CONTRASE\u00d1A","title":"Configurando la base de datos para el servidor"},{"location":"servicios/monitorizacion/zabbix/#editar-archivo-etcnginxconfdzabbixconf","text":"Nota Descomentar y configurar las directivas listen y server_name # listen 80; # server_name example.com;","title":"Editar archivo /etc/nginx/conf.d/zabbix.conf"},{"location":"servicios/monitorizacion/zabbix/#escoger-el-huso-horario-etcphp-fpmdzabbixconf","text":"php php_value[date.timezone] = Atlantic/Canary","title":"Escoger el huso horario /etc/php-fpm.d/zabbix.conf"},{"location":"servicios/monitorizacion/zabbix/#arrancando-y-habilitando-zabbix-en-el-sistema","text":"systemctl enable --now zabbix-server.service zabbix-agent.service nginx.service php-fpm.service","title":"Arrancando y habilitando Zabbix en el sistema"},{"location":"servicios/monitorizacion/zabbix/#accediendo-al-portal-de-configuracion","text":"Accedemos mediante el dominio que hemos configurado anteriormente: Usuario: Admin Contrase\u00f1a: zabbix","title":"Accediendo al portal de configuraci\u00f3n"},{"location":"servicios/monitorizacion/zabbix/#lets-encrypt","text":"","title":"Let\u2019s Encrypt"},{"location":"servicios/monitorizacion/zabbix/#instalar-el-software-necesario_1","text":"dnf install epel-release dnf install certbot python3-certbot-nginx Nota Teniendo el dominio apuntando al servidor y certificando en DNS Checker que el resultado del registro es la IP del dominio, procedemos a generar el certificado.","title":"Instalar el software necesario"},{"location":"servicios/monitorizacion/zabbix/#generando-el-certificado","text":"certbot --nginx -d DOMINIO -m TU_EMAIL --agree-tos --non-interactive","title":"Generando el certificado"},{"location":"servicios/monitorizacion/zabbix/#reiniciando-el-servidor-web","text":"systemctl restart nginx.service Ya tendremos nuestro servidor web protegido via SSL.","title":"Reiniciando el servidor web"},{"location":"servicios/monitorizacion/zabbix/#firewalld","text":"","title":"Firewalld"},{"location":"servicios/monitorizacion/zabbix/#instalar-firewalld","text":"dnf install firewalld","title":"Instalar firewalld"},{"location":"servicios/monitorizacion/zabbix/#habilitando-al-arranque-e-iniciandolo","text":"systemctl enable --now firewalld.service","title":"Habilitando al arranque e inici\u00e1ndolo"},{"location":"servicios/monitorizacion/zabbix/#abriendo-los-puertos-para-zabbix","text":"firewall-cmd --add-service http --add-service https --zone public --permanent firewall-cmd --reload","title":"Abriendo los puertos para Zabbix"},{"location":"servicios/monitorizacion/zabbix/#procedimiento-de-backup","text":"","title":"Procedimiento de backup"},{"location":"servicios/monitorizacion/zabbix/#exportar-todas-las-bases-de-datos","text":"mysqldump -u root --all-databases -p > dump-$(date +%d-%m-%y).sql * :code:`-u root`: Usuario root * :code:`--all-databases`: Todas las bases de datos * :code:`-p`: Pregunta por la contrase\u00f1a * :code:`>` : Redirige el flujo hacia el fichero salida :code:`dump-$(date +%d-%m-%y).sql`","title":"Exportar todas las bases de datos"},{"location":"servicios/monitorizacion/zabbix/#comprimir-los-directorios-esenciales","text":"tar zcfv /root/zabbix-$(date +%d-%m-%y).tar.gz /etc/zabbix /usr/share/zabbix --acls --xattrs --selinux Siguiente Anterior","title":"Comprimir los directorios esenciales"},{"location":"servicios/web/NGINX/","text":"NGINX Introducci\u00f3n Es un servidor HTTP que puede actuar como proxy reverso de tipo HTTP, correo electr\u00f3nico o TCP/UDP. Fue desarrollado por Igor Sysoev, distribuido bajo licencia de tipo BSD de 2 cl\u00e1usulas , tiene soporte comercial Nginx, Inc. y ha sido ejecutado desde hace tiempo en sitios web rusos como Yandex , Mail.Ru , VK , and Rambler , y que tambi\u00e9n utilizan servicios como Dropbox , Netflix , Wordpress.com , FastMail.FM . Instalaci\u00f3n Nota: Esta documentaci\u00f3n est\u00e1 elaborada para Rocky Linux, deber\u00e1s buscar tus adaptaciones para la distribuci\u00f3n que utilices. sudo dnf install -y nginx Gesti\u00f3n del servicio Iniciando el servicio sudo systemctl start nginx.service Parando el servicio sudo systemctl stop nginx.service Obteniendo el estado del servicio sudo systemctl status nginx.service Recargando el servicio sin pararlo sudo systemctl reload nginx.service Habilitando el servicio en el arranque sudo systemctl enable nginx.service Deshabilitando el servicio en el arranque sudo systemctl disable nginx.service Comprobar si el servicio est\u00e1 habilitado en el arranque sudo systemctl is-enabled nginx.service Estructura del fichero de configuraci\u00f3n Est\u00e1 basado en m\u00f3dulos que se controlan por directivas definidas en archivos de configuraci\u00f3n espec\u00edficos. La sintaxis parte de un nombre y par\u00e1metros separados por espacios y que terminan en (;). Sin embargo, tenemos directivas que se encuentran dentro de una serie de bloques que empiezan y terminan con llaves ({ }) como podemos ver en el siguiente ejemplo: server { listen 80; } Por supuesto, dentro de la documentaci\u00f3n de cada m\u00f3dulo, podemos ver que se pueden anidar bloques de bloques como es el caso de events , http , server , y location este tipo de configuraci\u00f3n recibe el nombre de contexto. http { server { listen 80; } } La configuraci\u00f3n se puede almacenar en el fichero troncal ubicado en /etc/nginx/nginx.conf , sin embargo, se pueden almacenar en /etc/nginx/conf.d/ cuya extensi\u00f3n del archivo debe ser .conf . Conceptos NOTA: Recomiendo la b\u00fasqueda de qu\u00e9 es URI o URL en el glosario facilitado por la Mozilla Foundation que puedes encontrar aqu\u00ed Server block Los Server Blocks , son bloques de directivas pertenecientes al m\u00f3dulo server y que se utilizan para servir o redirigir ( reverse proxy ) seg\u00fan el URI que configuremos. server { } \u00c9stos deben diferenciarse por puerto y por nombre del servidor, ya que nosotros podemos dar servicio a otros dominios con un mismo servidor. NGINX decidir\u00e1 qu\u00e9 servidor procesar\u00e1 la petici\u00f3n, y posteriormente comprobar\u00e1 la URI especificada en la URL. Esta URI puede configurarse a\u00f1adiendo un bloque con location . server { listen 80; server_name example.com; location URI { } }","title":"NGINX"},{"location":"servicios/web/NGINX/#nginx","text":"","title":"NGINX"},{"location":"servicios/web/NGINX/#introduccion","text":"Es un servidor HTTP que puede actuar como proxy reverso de tipo HTTP, correo electr\u00f3nico o TCP/UDP. Fue desarrollado por Igor Sysoev, distribuido bajo licencia de tipo BSD de 2 cl\u00e1usulas , tiene soporte comercial Nginx, Inc. y ha sido ejecutado desde hace tiempo en sitios web rusos como Yandex , Mail.Ru , VK , and Rambler , y que tambi\u00e9n utilizan servicios como Dropbox , Netflix , Wordpress.com , FastMail.FM .","title":"Introducci\u00f3n"},{"location":"servicios/web/NGINX/#instalacion","text":"Nota: Esta documentaci\u00f3n est\u00e1 elaborada para Rocky Linux, deber\u00e1s buscar tus adaptaciones para la distribuci\u00f3n que utilices. sudo dnf install -y nginx","title":"Instalaci\u00f3n"},{"location":"servicios/web/NGINX/#gestion-del-servicio","text":"Iniciando el servicio sudo systemctl start nginx.service Parando el servicio sudo systemctl stop nginx.service Obteniendo el estado del servicio sudo systemctl status nginx.service Recargando el servicio sin pararlo sudo systemctl reload nginx.service Habilitando el servicio en el arranque sudo systemctl enable nginx.service Deshabilitando el servicio en el arranque sudo systemctl disable nginx.service Comprobar si el servicio est\u00e1 habilitado en el arranque sudo systemctl is-enabled nginx.service","title":"Gesti\u00f3n del servicio"},{"location":"servicios/web/NGINX/#estructura-del-fichero-de-configuracion","text":"Est\u00e1 basado en m\u00f3dulos que se controlan por directivas definidas en archivos de configuraci\u00f3n espec\u00edficos. La sintaxis parte de un nombre y par\u00e1metros separados por espacios y que terminan en (;). Sin embargo, tenemos directivas que se encuentran dentro de una serie de bloques que empiezan y terminan con llaves ({ }) como podemos ver en el siguiente ejemplo: server { listen 80; } Por supuesto, dentro de la documentaci\u00f3n de cada m\u00f3dulo, podemos ver que se pueden anidar bloques de bloques como es el caso de events , http , server , y location este tipo de configuraci\u00f3n recibe el nombre de contexto. http { server { listen 80; } } La configuraci\u00f3n se puede almacenar en el fichero troncal ubicado en /etc/nginx/nginx.conf , sin embargo, se pueden almacenar en /etc/nginx/conf.d/ cuya extensi\u00f3n del archivo debe ser .conf .","title":"Estructura del fichero de configuraci\u00f3n"},{"location":"servicios/web/NGINX/#conceptos","text":"NOTA: Recomiendo la b\u00fasqueda de qu\u00e9 es URI o URL en el glosario facilitado por la Mozilla Foundation que puedes encontrar aqu\u00ed","title":"Conceptos"},{"location":"servicios/web/NGINX/#server-block","text":"Los Server Blocks , son bloques de directivas pertenecientes al m\u00f3dulo server y que se utilizan para servir o redirigir ( reverse proxy ) seg\u00fan el URI que configuremos. server { } \u00c9stos deben diferenciarse por puerto y por nombre del servidor, ya que nosotros podemos dar servicio a otros dominios con un mismo servidor. NGINX decidir\u00e1 qu\u00e9 servidor procesar\u00e1 la petici\u00f3n, y posteriormente comprobar\u00e1 la URI especificada en la URL. Esta URI puede configurarse a\u00f1adiendo un bloque con location . server { listen 80; server_name example.com; location URI { } }","title":"Server block"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/","text":"Gesti\u00f3n de usuari@s y grupos Algunos conceptos Linux al igual que otro sistema operativo basado en UNIX, por herencia obtiene uno de los hitos que marc\u00f3 un antes y despu\u00e9s en la era de los sistemas, y es el t\u00e9rmino multiusuario . Esto quiere decir que nos permite tener diferentes cuentas de distintos usuari@s iniciadas en el sistema corriendo n procesos a la vez pertenecientes a cada usuario. Anteriormente, si quer\u00edas hacer uso del sistema y otra persona quer\u00eda utilizarlo, no pod\u00edas ya que tod@s dispon\u00edan de una sola sesi\u00f3n de usuario, sin embargo con los avances que hicieron en el pasado, sacaron adelante esta magn\u00edfica caracter\u00edstica, la del multiusuario . Usuari@s L@s usuari@s son personas que tienen un determinado nivel de acceso tanto a la empresa d\u00f3nde resida el equipo al que pueden acceder y operar, como en su equipo personal. A nivel l\u00f3gico, esto se conoce como cuentas de usuari@, las cu\u00e1les contienen como m\u00ednimo un nombre para la cuenta siendo este el nombre de usuari@ y una contrase\u00f1a. No obstante, l@s desarrolladores de sistemas operativos o de cualquier otro tipo de software intentan simplificar el tratamiento de las cuentas de usuarios mediante un ID num\u00e9rico, ya que se consume menos recursos buscando n\u00fameros que letras. En Linux, esos ID asignados a los usuarios se les denominan UID User Identifier o identificador de usuario. Seg\u00fan la distribuci\u00f3n, el primer usuario o la primera usuaria del sistema, este establece un UID de 1000, y comienza a sumarse +1 a los posteriores UID creados. Tambi\u00e9n, se a\u00f1ade un grupo nuevo al sistema con el mismo nombre de la cuenta del usuario o de la usuaria y se establece como un grupo primario con el mismo ID. \u00bfC\u00f3mo crear un(a) usuari@? Como norma general y es altamente recomendado hacer uso de los comandos useradd(8) o adduser(8) podr\u00edamos crear un(a) usuari@ a mano, haciendo los siguientes pasos y como usuario root o haciendo uso de sudo(1) : Averiguamos cual es el \u00faltimo UID/GID antes de crear nuestr@ usuari@ grep 100* /etc/group``grep 100* /etc/passwd Modificar la entrada del fichero /etc/passwd haciendo uso de :code: vipw(8) a\u00f1adiendo la informaci\u00f3n m\u00ednima para tener un(a) usuari@, vamos ha hacerlo con \u00abpepito\u00bb: pepito:x:1004:1004::/home/pepito:/bin/bash Creamos un grupo para nuestro usuario /etc/group pepito:x:1004: Creamos una entrada en /etc/shadow mediante haciendo uso de vipw -s : Nota: Para saber que algoritmo cifrado utilizar, podemos comprobarlo en el fichero /etc/login.defs , en la variable ENCRYPT_METHOD lo que pasa que utiliza el sistema un salto o varios (lo desconocemos) para generar la contrase\u00f1a a parte de la codificiaci\u00f3n. Para visualizar el prefijo que necesitamos se puede consultar en: * man 3 crypt * $1$ : MD5 * $2a$ : Blowfish * $5$ : SHA-256 * $6$ : SHA-512 Sin embargo, es altamente recomendable generar una contrase\u00f1a nueva haciendo uso del comando passwd(1) , ya que esta genera la contrase\u00f1a con el salto correcto, el algoritmo correcto y se genera autom\u00e1ticamente la entrada en /etc/shadow : passwd pepito Creamos el directorio: /home/nombre_usuari@ Creamos el archivo: /var/spool/mail/nombre_usuari@ Copiamos los archivos /etc/skel/* en /home/nombre_usuari@ Fijamos los permisos correspondientes usuari@/grupo al directorio /home/nombre_usuari@ nombre_usuari@:grupo_usuari@ + chmod 700 Declaramos los permisos chmod 660 /var/spool/mail/nombre_usuari@ Y listo, tendremos a nuestr@ usuari@ cread@. No obstante, este proceso, adem\u00e1s de ser tedioso, complejo y propenso a errores, es preferible hacer uso de unos comandos que nos facilitan crearlo. Comando useradd Con este comando generamos un(a) usuari@ en \u00a1menos que canta un gallo! Todo lo que tenemos que hacer es: .. code-block:: bash sudo useradd pepito -m sudo passwd pepito Y ya directamente tenemos usuari@ con su directorio /home y /var/spool/mail por defecto con sus correspondientes permisos, con la entrada correctamente creada en el fichero /etc/passwd , /etc/shadow y /etc/group listo para identificarse. \u00bfF\u00e1cil verdad? Tambi\u00e9n hay que tener en cuenta, que la configuraci\u00f3n por defecto del comando useradd(8) que se encuentra en /etc/default/useradd , ya que puede haber otras distribuciones que tengan otros par\u00e1metros, o directamente, no contenga ning\u00fan fichero y hay que especificarlo de forma manual tal que as\u00ed: .. code-block:: bash sudo useradd pepito -m -k /etc/skel -U sudo passwd pepito -m : Genera un directorio en /home con el nombre de pepito -k /etc/skel : Copia los archivos b\u00e1sicos para que funcione plenamente bash(1) -U : Crea un grupo con el mismo nombre que el usuario Comando adduser Si no tenemos suficiente con el anterior, podemos hacer uso de adduser(8) . Es un comando parecido al anterior, no hay mucha diferencia de usabilidad al menos en Linux. En FreeBSD, este comando tiene por defecto un asistente interactivo que nos va preguntando paso por paso c\u00f3mo crearlo facilit\u00e1ndonos un poco la tarea. Este comando toma los valores para crear el usuario del fichero /etc/default/useradd como el comando anterior. Ficheros implicados en el uso de ambos comandos Seg\u00fan el man de ambos comandos, tenemos una serie de ficheros implicados cuando ejecutamos uno de los dos comandos para crear el o la usuari@. /etc/passwd : Archivo clave con la informaci\u00f3n de la cuenta de usuari@ /etc/shadow : Informaci\u00f3n sobre la seguridad de la cuenta de usuari@ /etc/group : Grupos con sus correspondienes GID, usuari@s unid@s\u2026 /etc/gshadow : Informaci\u00f3n relevante sobre la seguridad de los grupos /etc/default/useradd : Esquema por defecto sobre c\u00f3mo crear la cuenta de usuari@ /etc/skel/ : Directorio que contiene ficheros por defecto para el/la usuari@ /etc/login.defs : Configuraci\u00f3n del cifrado de las contrase\u00f1as, permisos\u2026etc \u00bfC\u00f3mo autenticarse con un(a) usuari@ en nuestra sesi\u00f3n? Si nos encontramos logeados mediante nuestr@ usuari@ rutinario, pero queremos acceder a otras cuentas del sistema, podemos hacerlo haciendo uso del comando su(1) . Estamos en la cuenta de pepito, y queremos pasar a la de susana. su - susana \u00bfC\u00f3mo modificar la informaci\u00f3n de un(a) usuari@? Tenemos un comando ( \u00bfC\u00f3mo no? ), para modificar y actualizar la informaci\u00f3n de nuestr@ usuari@. Este comando se llama usermod(8) . Entre otras cosas, nos permite bloquear una cuenta, actualizar y gestionar l\u00e1 fecha de demora y fecha l\u00edmite para cambiar la contrase\u00f1a, a\u00f1adir un usuario a grupos secundarios\u2026 Bloquear una cuenta sudo usermod -L pepito Si vemos el /etc/passwd , habr\u00e1 a\u00f1adido delante de la contrase\u00f1a una (!), eso quiere decir que se encuentra bloqueada la cuenta. Desbloqueando la cuenta sudo usermod -U pepito A\u00f1adiendo un(a) usuari@ a un grupo nuevo sudo usermod -a -G pepito video Cambiando el grupo principal sudo usermod -g users pepito Modificando el shell del/la usuari@ sudo usermod -s /bin/bash pepito Cambiando el directorio de trabajo sudo usermod -d /srv pepito Insertando un comentario sudo usermod -c \"Comentario\" pepito Podemos obtener m\u00e1s informaci\u00f3n accediendo al man(1) de usermod(8) \u00bfC\u00f3mo eliminar un(a) usuari@? Como la mayor parte de las cosas en Linux o sistemas UNIX-like, se puede hacer pr\u00e1cticamente todo a mano, esto se puede hacer al sentido inverso cuando creamos el/la usuari@ en el sistema. Eliminar la entrada del usuario pepito de /etc/passwd haciendo uso de vipw(8) Destruir el directorio /home/pepito o el asignado, en caso de haber escogido otro directorio Eliminar el fichero del directorio /var/spool/mail/pepito Quitar el grupo que se cre\u00f3 junto con el/la usuari@ por defecto del fichero /etc/groups pero haciendo uso de vigr(8) Y si queremos evitarnos tanta historia, bastar\u00e1 con hacer uso del comando userdel(8) Tan solo con ejecutar: sudo userdel -r pepito Habremos hecho todos los pasos anteriores con un sencillo comando. \u00bfDirectorio de trabajo? Tod@s l@s usuari@s poseen un entorno de trabajo por defecto que se encuentra en el directorio /home . Este entorno de trabajo contiene el nombre de la cuenta del/la usuari@ y le permite trabajar en \u00e9l y que, por defecto, se van almacenando archivos de configuraci\u00f3n de programas entre un largo etc\u00e9tera. \u00bfSuper usuario? Existe un usuario por defecto creado en el sistema llamado root . Este usuario por defecto en todos los sistemas UNIX, UNIX-like como Liux, FreeBSD, Minix\u2026etc tiene acceso a tod@s los archivos, carpetas, operaciones con dispositivos, procesos\u2026 del sistema. Es muy importante utilizarlo lo menos posible y nunca revelar su contrase\u00f1a, o ejecutar aplicaciones sobre todo gr\u00e1ficas con este usuario. Grupos Por lo general, los grupos son agrupaciones de personas que tienen un objetivo en com\u00fan, si bien pueden ser personas que tienen el mismo gusto por ver a su cantante favorito como obtener los mejores dise\u00f1os de sus productos para una empresa. En nuestro caso, los grupos permiten formar un conjunto de usuari@s que desempe\u00f1en un rol determinado dentro del sistema. Creando, modificando documentos que ell@s hayan generado pero que otr@s que no pertenezca a dicho grupo no tengan permisos para hacerlo. Un usuario, o una usuaria puede formar parte de m\u00e1s de un grupo a la vez, pero por defecto, tienen un grupo primario al que pertenecen. Los grupos como l@s usuari@s, contienen un ID que faciliten su recuperaci\u00f3n dentro del sistema, en este caso se llama GID de Group Identifier o Identificador de grupo. El sistema por defecto tiene unos grupos ya asignados para determinadas actividades del mismo para diferentes tareas como el acceso a los dispositivos de audio y video entre otras cosas. \u00bfGrupos primarios? Los grupos primarios son algo as\u00ed como el grupo principal al que pertenece un/una usuari@. Cada archivo que cree o modifique deber\u00e1 contener el mismo grupo o si no, no podr\u00e1 hacerlo a menos que se encuentre a\u00f1adido a un grupo secundario. Un grupo primario como su nombre indica, es el primer grupo al que pertenece y por ende solo podr\u00e1 tener un GID asociado a la cuenta. Sin embargo, una cuenta de usuari@ puede pertenecer a muchos grupos secundarios. \u00bfC\u00f3mo Linux sabe qu\u00e9 hace una cosa y un grupo otra? Existen una serie de ficheros clave que todo administrador debe saber que existen: /etc/passwd : Contiene los nombres de usuario, contrase\u00f1as (en antiguas versiones que no usen shadow(5) , UID, GID, descripci\u00f3n, directorio de trabajo y el int\u00e9rprete de comandos que utilice. Cuando en el campo de la contrase\u00f1a se encuentra una \u00abx\u00bb quiere decir que hace uso del archivo /etc/shadow /etc/shadow : Es un fichero que contiene todas las contrase\u00f1as ya sean de grupos o de usuari@s cifradas en un algoritmo determinado por el sistema, se utiliza para evitar que las contrase\u00f1as se puedan leer en /etc/passwd ya que tod@s l@s usuari@s tienen acceso lectura. Este archivo contiene: Nombre de la cuenta de usuari@ Contrase\u00f1a encriptada, o bien puede incluir (!) que aparece como cuenta bloqueada en el sistema, un ejemplo de esto es cuando creamos una nueva cuenta sin haberle asignado una contrase\u00f1a. Fecha del \u00faltimo cambio de contrase\u00f1a, si se encuentra vac\u00edo, es que no est\u00e1n habilitadas las gestiones de cuentas de l@s usuari@s. Fecha m\u00ednima para efectuar un cambio de contrase\u00f1a Fecha m\u00e1xima l\u00edmite para modificar la contrase\u00f1a Periodo de aviso para cambiarla N\u00famero de d\u00edas con el usuario inactivo despu\u00e9s de que haya expirado la contrase\u00f1a Fecha de expiraci\u00f3n de la cuenta Campo reservado /etc/shadow- : Copia de seguridad del fichero anterior /etc/group : Contiene nombre del grupo, contrase\u00f1a (en caso de no usar shadow(5) ), GID, lista de usuarios adjuntos Son los archivos principales y que tod@s tenemos que tener hechos una copia de seguridad en caso de que falle el sistema o nos equivoquemos editando alguno de ellos. Nota A pesar de no ser altamente recomendable su edici\u00f3n, si queremos editar a mano los ficheros passwd(5) o shadow(5) tenemos que utilizar los comandos vigr(1) para edici\u00f3n de grupos y vipw(1) para edici\u00f3n de los ficheros tanto passwd(5) como shadow(5) . \u00bfC\u00f3mo crear un grupo? Los grupos se pueden crear manualmente al igual que l@s usuari@s haciendo uso del comando vigr(8) . No obstante, es preferible como siempre hacer uso de los comandos que nos faciliten las cosas m\u00e1s que nada para evitar incorrecciones de cualquier \u00edndole. Comando groupadd groupadd(8) es una bella herramienta con la que crear un grupo, edita el fichero /etc/group y a su vez actualiza el /etc/gshadow para a\u00f1adir la contrase\u00f1a asignada Creando un grupo sudo groupadd sysadmins Creando un grupo con GID espec\u00edfico sudo groupadd -g 1200 sysadmins Asignando contrase\u00f1a a un grupo sudo groupadd -p contrase\u00f1a sysadmins \u00bfC\u00f3mo modificar un grupo? Como podemos modificar l@s usuari@s, \u00bfPor qu\u00e9 no los grupos? Pues claro que s\u00ed podemos hacerlo con groupmod(8) . Comando groupmod Este comando nos permitir\u00e1 modificar cierta informaci\u00f3n de los grupos que tenemos como por ejemplo: Cambiando el nombre del grupo sudo groupmod -n devels sysadmins Cambiando el GID sudo groupmod -g 1203 devels Modificando la contrase\u00f1a sudo groupmod -p \"Contrase\u00f1a\" devels \u00bfC\u00f3mo eliminar el grupo? Tambi\u00e9n es otra operaci\u00f3n que podemos hacer con vigr(8) , pero es mejor utilizando este m\u00e9todo. sudo groupdel devels \u00bfC\u00f3mo cambiar temporalmente nuestr@ grupo primario? Los usuarios siempre utilizamos un grupo primario que permite identificarnos con diversas partes o \u00e1reas del sistema. En caso de haber actualizado algo que requiera de una persona conectada al ordenador, se puede hacer pasar por la otra persona para saber que\u2026 Entonces existen una serie de restricciones intr\u00ednsecas como no editar un documento a la vez, si has instalado un software reciente que requiere permisos y por tanto reiniciar la sesi\u00f3n gr\u00e1fica, se puede evitar. B\u00e1sicamente es gracias al comando newgrp(1) newgrp finance Y con esto, se activa nuestro grupo secundario como primario. Visualizando los grupos en los que estoy Se puede ver f\u00e1cilmente haciendo uso del comando groups Comod\u00edn Tenemos un peque\u00f1o comod\u00edn que nos permite modificar ciertas cosas de nuestr@ usuari@ o de un grupo en concreto como su contrase\u00f1a. Esta herramienta se llama gpasswd(1) y la tenemos instalada por defecto. A\u00f1adiendo un(a) usuari@ a un grupo sudo gpasswd -a pepito users Eliminando un(a) usuari@ de un grupo sudo gpasswd -d pepito users Suprimir contrase\u00f1a en un grupo sudo gpasswd -r users Permisos Poco sentido tiene diferenciar usuarios y grupos si no les atribu\u00edmos alg\u00fan permiso especial que permita establecer una cierta jerarqu\u00eda o distinci\u00f3n, ya que si no, estar\u00edamos dejando un sistema horizontal en el que tod@s l@s usuari@s puedan hacer lo que quieran dentro del sistema. Aqu\u00ed entra en juego el factor permisos. Los permisos en UNIX se rigen por una serie de campos Usuario: Solo el autor puede leer, escribir, ejecutar, o una combinaci\u00f3n de los mismos, el poder en este caso sobre el fichero solo lo tiene \u00e9l o ella o el usuario root . Grupo: Tod@s l@s usuari@s que formen parte del grupo, dependiendo de los permisos que tenga establecido en este apartado el fichero o directorio podr\u00e1n o no leer, escribir, o ejecutar en caso de ser un fichero ejecutable. Todo el mundo: El resto de usuari@s del sistema que no pertenezcan ni al grupo, ni sea el autor del fichero, dependiendo de los permisos podr\u00e1 o no acceder a los directorios y ficheros. Imaginemos que tenemos el siguiente ejemplo: Somos jefes(as) de un proyecto de desarrollo, y tenemos vari@s emplead@s a nuestro cargo. Nosotr@s como jefe(as) del proyecto, tenemos plena acci\u00f3n sobre todos los ficheros (somos autores). Y, seleccionamos determinados ficheros para determinados grupos, por ejemplo, todos aquellos ficheros que tengan que ver con el departamento de comunicaci\u00f3n que tiene m\u00faltiples usuari@s, solo podr\u00e1n acceder los de comunicaci\u00f3n; el grupo de desarrolladores(as) tiene sus ficheros a cargo\u2026etc Y cada usuari@ dentro de su grupo, tiene acceso pleno a los ficheros, sin embargo, las personas de otros grupos no pueden acceder a dichos archivos por las restricciones. Y luego, tenemos un apartado p\u00fablico, que solo podr\u00e1 leer determinados archivos. \u00a1Voil\u00e1! hemos explicado el funcionamiento de usuarios y grupos de una forma sencilla. Jefes(as) de proyecto \\\u00ba/ \\\u00aa/ | |-------------------| | Contabilidad | | Directivas | | Contratos | |-------------------| ________________|________ / \\ Comunicaci\u00f3n Desarrollo \\\u00ba/ \\\u00aa/ \\\u00ba/ \\\u00aa/ | | |-----------------| |-----------------| | Inventario RRSS | | C\u00f3digo fuente | | Inversores | | Contrase\u00f1as OS | | Media | | Servidores | | ... | | ... | |-----------------| |-----------------| | | | Todo el mundo | \\\u00ba/ \\\u00aa/\\\u00ba/ \\\u00aa/ *-------------------------> \\\u00ba/ \\\u00aa/\\\u00ba/ \\\u00aa/ \\\u00aa/ | |-------------| | index.html | | setup.sh | | screenshots | | Twitter | | Facebook | | Google+ | |-------------| Ahora vamos a traducir las palabras en el lenguaje que lo interpreta el sistema, tenemos hasta tres formas de conceder, modificar o leer permisos: Formato verbal o por car\u00e1cter: Se hacen uso de las letras para asignar, modificar o simplemente leer los permisos: r: read solo lectura w: writable solo escritura ( debe ir acompa\u00f1ado de lectura para que pueda modificarse ) x: executable solo ejecutable ( debe ir acompa\u00f1ado del permiso lectura para poder ejecutarse ) # r w x rw rx wx rwx Usuario chmod u+r f1 u+w u+x u+rw u+rx u+wx u+rwx Grupo chmod g+r f1 g+r g+x g+rw g+rx g+wx g+rwx Todo el mundo chmod o+r f1 o+r o+x o+rw o+rx o+wx o+rwx Tod@s chmod a+r f1 a+r a+x a+rw a+rx a+wx a+rwx Formato num\u00e9rico basado en Octal: Se hace uso del 1 al 7 para definir los permisos # r w x rw rx wx rwx Usuario 400 200 100 600 500 300 700 Grupo 040 020 010 060 050 030 070 Todo el mundo 004 002 001 006 005 003 007 Usuario + Grupo 440 220 110 660 550 330 770 Grupo + Mundo 044 022 011 066 055 033 077 Usuario + M 404 202 101 606 505 303 707 Tod@s 444 222 111 666 555 333 777 Mediante m\u00e1scara: Esta es la forma menos com\u00fan de declarar los permisos, pero tambi\u00e9n se utiliza. Para declarar un valor hay que hacer uso del comando umask(1p) Si queremos asignar el valor 022 a la m\u00e1scara, este es el valor que le tendremos que restar al n\u00famero actual de permisos que se encuentre en el directorio actual. Por ejemplo: 002 = 777 - 002 = 775 (rwrwxr-x) 444 = 644 - 444 = 200 (-w\u2014\u2014-) 020 = 660 - 020 = 640 (rw\u2013r\u2014-) Para declarar el valor de una m\u00e1scara se hace uso de umask(1p) tal que as\u00ed: umask 020 Cuando se declara una m\u00e1scara en un directorio, todos los archivos y rutas que se creen dentro de \u00e9l, heredar\u00e1n estos permisos. No es que se aplique directamente al archivo/directorio. \u00bfC\u00f3mo ver los permisos? Para visualizar los permisos tenemos el magn\u00edfico comando ls(1) ls -al Este comando muestra todos los archivos y directorios que se encuentren en el directorio actual adem\u00e1s de los ocultos. En suma, muestra los enlaces tanto duros como simb\u00f3licos. En la siguiente salida, si nos fijamos en la primera columna de la izquierda veremos los permisos y el tipo de archivo. lrwxrwxrwx. 1 sincorchetes sincorchetes 37 May 19 21:51 .steampath -> /home/sincorchetes/.steam/sdk32/steam lrwxrwxrwx. 1 sincorchetes sincorchetes 35 May 19 21:51 .steampid -> /home/sincorchetes/.steam/steam.pid drwxrwxr-x. 3 sincorchetes sincorchetes 4096 Mar 7 14:17 .subversion -rw-rw-r--. 1 sincorchetes sincorchetes 8 Mar 28 22:29 .tasks drwxrwxr-x. 2 sincorchetes sincorchetes 4096 Jan 20 04:25 .themes drwx------. 3 sincorchetes sincorchetes 4096 Feb 12 01:10 .thumbnails drwx------. 3 sincorchetes sincorchetes 4096 Jan 20 11:05 .thunderbird drwxrwxr-x. 3 sincorchetes sincorchetes 4096 May 27 19:56 .tmux -rw-rw-r--. 1 sincorchetes sincorchetes 370 May 27 19:57 .tmux.conf drwxrwxr-x. 7 sincorchetes sincorchetes 4096 Jun 2 12:38 .vagrant.d drwxr-xr-x. 2 sincorchetes sincorchetes 4096 Jun 4 17:08 Videos Los archivos que contienen una \u00abl\u00bb en los permisos denotan que son enlaces simb\u00f3licos y se puede adem\u00e1s saber porque apuntan a otro directorio/fichero \u00ab->\u00bb. Aquellos que contienen una \u00abd\u00bb, denotan que son directorios y los que no contienen nada m\u00e1s que un \u00ab-\u00bb se interpretan como archivos. Modificando la autor\u00eda de archivos/directorios Como podemos ver, se pueden asignar m\u00faltiples permisos a los archiv@s, ahora bien, \u00bfQu\u00e9 pasa si queremos cambiar el autor del fichero, el grupo o ambos? Podemos hacerlo gracias al comando chown(1) : chown usuario fichero/directorio : Cambiando el autor del fichero y/o directorio chown usuario:grupo : Cambiando el autor y el grupo al fichero y/o directorio Se puede asignar un autor a un fichero y tener un grupo diferente, el autor podr\u00e1 modificarlo, leerlo o ejecutarlo en cualquier momento, es indiferente. Permisos especiales Sticky Bit \u00bfQu\u00e9 pasa si tenemos much@s usuari@s dentro de un grupo cuyo grupo tiene asignado un directorio de trabajo y el usuario \u00abPepe\u00bb crea un fichero y la usuaria \u00abSusana\u00bb intenta eliminarlo? Que podr\u00e1 hacerlo siempre y cuando, se aplique una restricci\u00f3n llamada \u00abSticky Bit\u00bb del ingl\u00e9s, \u00abbit pegajoso\u00bb. Este permiso especial, permite restringir los archivos creados y modificados por l@s miembr@s de un grupo y evitar que se genere un \u00abautosabotaje\u00bb o un borrado por error. Para habilitarlo bastar\u00e1 con efectuar: chmod 1000 archivo/directorio \u00f3 .. code-block:: bash chmod u+t archivo/directorio Aplicar permisos recursivos en los ficheros y subdirectorios de un directorio chmod 1000 -R directorio Cuando ejecutemos un ls(1) , veremos que en los permisos se habr\u00e1 a\u00f1adido un \u00abt\u00bb al final tanto para directorios como para ficheros, esto nos indica la activaci\u00f3n del Sticky Bit, tambi\u00e9n aparecer\u00e1 modo de ejecuci\u00f3n permitido. Si aparece una \u00abT\u00bb en vez de una \u00abt\u00bb, esto quiere decir, que se ha activado el Sticky Bit pero solo para el usuario actual, si vemos el resultado, no contienen permisos de ejecuci\u00f3n y por lo tanto no se permitir\u00e1 crear archivos/directorios. Salida con Sticky Bit activado ls -al total 8 drwxrwxrwt. 2 root root 4096 Jun 11 07:41 . drwxrwxrwt. 3 root users 4096 Jun 11 07:41 .. Salida con Sticky Bit activado para el usuari@ actual ls -al total 8 drwxrwxrwx. 2 root users 4096 Jun 11 07:38 . drwxrwxrwx. 3 sincorchetes sincorchetes 4096 Jun 11 07:37 .. -rwxrw-rwT. 1 sincorchetes sincorchetes 0 Jun 11 07:38 12 Aqu\u00ed os podemos mostrar con m\u00e1s claridad el funcionamiento: SUID y SGUID En Linux existen una serie de condiciones especiales para determinados ejecutables, archivos\u2026 que pueden editarse o ejecutarse sin ser el propietario de los mismos. Esta caracter\u00edstica nos otorga una cierta ventaja como por ejemplo, si queremos cambiar la contrase\u00f1a de nuestr@ usuari@ podemos hacerlo sin ser usuario \u00abroot\u00bb. Si nos fijamos en los permisos del comando passwd , veremos que tiene la letra \u00abs\u00bb dentro de la ristra de permisos. ls -al /usr/bin -rwsr-xr-x. 1 root root 29008 Apr 12 11:24 passwd Digamos que el/la usuari@ se hace pasar por \u00abroot\u00bb para intentar cambiar su contrase\u00f1a y lo puede hacer gracias a estos permisos. Estos se llaman SUID Set User ID Bit o SGID Set Group ID Bit. Podemos verificar si un archivo o directorio lo tiene activado porque en los permisos del usuario tiene una \u00abs\u00bb o en los permisos del grupo contiene \u00abs\u00bb. Solo el propietario del fichero/directorio puede declarar estos permisos \u00abextendidos\u00bb. Nota En caso de contener una \u00abS\u00bb, esto quiere decir, que tanto el autor del archivo/directorio como el grupo y el resto del mundo no podr\u00e1 editar, modificar y/o ejecutar archivos dentro del directorio. De hecho, veremos como se encuentra reducida la salida de permisos._ Referencias man pages The Linux Document Project","title":"Gesti\u00f3n de usuari@s y grupos"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#gestion-de-usuaris-y-grupos","text":"","title":"Gesti\u00f3n de usuari@s y grupos"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#algunos-conceptos","text":"Linux al igual que otro sistema operativo basado en UNIX, por herencia obtiene uno de los hitos que marc\u00f3 un antes y despu\u00e9s en la era de los sistemas, y es el t\u00e9rmino multiusuario . Esto quiere decir que nos permite tener diferentes cuentas de distintos usuari@s iniciadas en el sistema corriendo n procesos a la vez pertenecientes a cada usuario. Anteriormente, si quer\u00edas hacer uso del sistema y otra persona quer\u00eda utilizarlo, no pod\u00edas ya que tod@s dispon\u00edan de una sola sesi\u00f3n de usuario, sin embargo con los avances que hicieron en el pasado, sacaron adelante esta magn\u00edfica caracter\u00edstica, la del multiusuario .","title":"Algunos conceptos"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#usuaris","text":"L@s usuari@s son personas que tienen un determinado nivel de acceso tanto a la empresa d\u00f3nde resida el equipo al que pueden acceder y operar, como en su equipo personal. A nivel l\u00f3gico, esto se conoce como cuentas de usuari@, las cu\u00e1les contienen como m\u00ednimo un nombre para la cuenta siendo este el nombre de usuari@ y una contrase\u00f1a. No obstante, l@s desarrolladores de sistemas operativos o de cualquier otro tipo de software intentan simplificar el tratamiento de las cuentas de usuarios mediante un ID num\u00e9rico, ya que se consume menos recursos buscando n\u00fameros que letras. En Linux, esos ID asignados a los usuarios se les denominan UID User Identifier o identificador de usuario. Seg\u00fan la distribuci\u00f3n, el primer usuario o la primera usuaria del sistema, este establece un UID de 1000, y comienza a sumarse +1 a los posteriores UID creados. Tambi\u00e9n, se a\u00f1ade un grupo nuevo al sistema con el mismo nombre de la cuenta del usuario o de la usuaria y se establece como un grupo primario con el mismo ID.","title":"Usuari@s"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#como-crear-una-usuari","text":"Como norma general y es altamente recomendado hacer uso de los comandos useradd(8) o adduser(8) podr\u00edamos crear un(a) usuari@ a mano, haciendo los siguientes pasos y como usuario root o haciendo uso de sudo(1) : Averiguamos cual es el \u00faltimo UID/GID antes de crear nuestr@ usuari@ grep 100* /etc/group``grep 100* /etc/passwd Modificar la entrada del fichero /etc/passwd haciendo uso de :code: vipw(8) a\u00f1adiendo la informaci\u00f3n m\u00ednima para tener un(a) usuari@, vamos ha hacerlo con \u00abpepito\u00bb: pepito:x:1004:1004::/home/pepito:/bin/bash Creamos un grupo para nuestro usuario /etc/group pepito:x:1004: Creamos una entrada en /etc/shadow mediante haciendo uso de vipw -s : Nota: Para saber que algoritmo cifrado utilizar, podemos comprobarlo en el fichero /etc/login.defs , en la variable ENCRYPT_METHOD lo que pasa que utiliza el sistema un salto o varios (lo desconocemos) para generar la contrase\u00f1a a parte de la codificiaci\u00f3n. Para visualizar el prefijo que necesitamos se puede consultar en: * man 3 crypt * $1$ : MD5 * $2a$ : Blowfish * $5$ : SHA-256 * $6$ : SHA-512 Sin embargo, es altamente recomendable generar una contrase\u00f1a nueva haciendo uso del comando passwd(1) , ya que esta genera la contrase\u00f1a con el salto correcto, el algoritmo correcto y se genera autom\u00e1ticamente la entrada en /etc/shadow : passwd pepito Creamos el directorio: /home/nombre_usuari@ Creamos el archivo: /var/spool/mail/nombre_usuari@ Copiamos los archivos /etc/skel/* en /home/nombre_usuari@ Fijamos los permisos correspondientes usuari@/grupo al directorio /home/nombre_usuari@ nombre_usuari@:grupo_usuari@ + chmod 700 Declaramos los permisos chmod 660 /var/spool/mail/nombre_usuari@ Y listo, tendremos a nuestr@ usuari@ cread@. No obstante, este proceso, adem\u00e1s de ser tedioso, complejo y propenso a errores, es preferible hacer uso de unos comandos que nos facilitan crearlo.","title":"\u00bfC\u00f3mo crear un(a) usuari@?"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#comando-useradd","text":"Con este comando generamos un(a) usuari@ en \u00a1menos que canta un gallo! Todo lo que tenemos que hacer es: .. code-block:: bash sudo useradd pepito -m sudo passwd pepito Y ya directamente tenemos usuari@ con su directorio /home y /var/spool/mail por defecto con sus correspondientes permisos, con la entrada correctamente creada en el fichero /etc/passwd , /etc/shadow y /etc/group listo para identificarse. \u00bfF\u00e1cil verdad? Tambi\u00e9n hay que tener en cuenta, que la configuraci\u00f3n por defecto del comando useradd(8) que se encuentra en /etc/default/useradd , ya que puede haber otras distribuciones que tengan otros par\u00e1metros, o directamente, no contenga ning\u00fan fichero y hay que especificarlo de forma manual tal que as\u00ed: .. code-block:: bash sudo useradd pepito -m -k /etc/skel -U sudo passwd pepito -m : Genera un directorio en /home con el nombre de pepito -k /etc/skel : Copia los archivos b\u00e1sicos para que funcione plenamente bash(1) -U : Crea un grupo con el mismo nombre que el usuario","title":"Comando useradd"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#comando-adduser","text":"Si no tenemos suficiente con el anterior, podemos hacer uso de adduser(8) . Es un comando parecido al anterior, no hay mucha diferencia de usabilidad al menos en Linux. En FreeBSD, este comando tiene por defecto un asistente interactivo que nos va preguntando paso por paso c\u00f3mo crearlo facilit\u00e1ndonos un poco la tarea. Este comando toma los valores para crear el usuario del fichero /etc/default/useradd como el comando anterior.","title":"Comando adduser"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#ficheros-implicados-en-el-uso-de-ambos-comandos","text":"Seg\u00fan el man de ambos comandos, tenemos una serie de ficheros implicados cuando ejecutamos uno de los dos comandos para crear el o la usuari@. /etc/passwd : Archivo clave con la informaci\u00f3n de la cuenta de usuari@ /etc/shadow : Informaci\u00f3n sobre la seguridad de la cuenta de usuari@ /etc/group : Grupos con sus correspondienes GID, usuari@s unid@s\u2026 /etc/gshadow : Informaci\u00f3n relevante sobre la seguridad de los grupos /etc/default/useradd : Esquema por defecto sobre c\u00f3mo crear la cuenta de usuari@ /etc/skel/ : Directorio que contiene ficheros por defecto para el/la usuari@ /etc/login.defs : Configuraci\u00f3n del cifrado de las contrase\u00f1as, permisos\u2026etc","title":"Ficheros implicados en el uso de ambos comandos"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#como-autenticarse-con-una-usuari-en-nuestra-sesion","text":"Si nos encontramos logeados mediante nuestr@ usuari@ rutinario, pero queremos acceder a otras cuentas del sistema, podemos hacerlo haciendo uso del comando su(1) . Estamos en la cuenta de pepito, y queremos pasar a la de susana. su - susana","title":"\u00bfC\u00f3mo autenticarse con un(a) usuari@ en nuestra sesi\u00f3n?"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#como-modificar-la-informacion-de-una-usuari","text":"Tenemos un comando ( \u00bfC\u00f3mo no? ), para modificar y actualizar la informaci\u00f3n de nuestr@ usuari@. Este comando se llama usermod(8) . Entre otras cosas, nos permite bloquear una cuenta, actualizar y gestionar l\u00e1 fecha de demora y fecha l\u00edmite para cambiar la contrase\u00f1a, a\u00f1adir un usuario a grupos secundarios\u2026","title":"\u00bfC\u00f3mo modificar la informaci\u00f3n de un(a) usuari@?"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#bloquear-una-cuenta","text":"sudo usermod -L pepito Si vemos el /etc/passwd , habr\u00e1 a\u00f1adido delante de la contrase\u00f1a una (!), eso quiere decir que se encuentra bloqueada la cuenta.","title":"Bloquear una cuenta"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#desbloqueando-la-cuenta","text":"sudo usermod -U pepito","title":"Desbloqueando la cuenta"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#anadiendo-una-usuari-a-un-grupo-nuevo","text":"sudo usermod -a -G pepito video","title":"A\u00f1adiendo un(a) usuari@ a un grupo nuevo"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#cambiando-el-grupo-principal","text":"sudo usermod -g users pepito","title":"Cambiando el grupo principal"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#modificando-el-shell-della-usuari","text":"sudo usermod -s /bin/bash pepito","title":"Modificando el shell del/la usuari@"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#cambiando-el-directorio-de-trabajo","text":"sudo usermod -d /srv pepito","title":"Cambiando el directorio de trabajo"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#insertando-un-comentario","text":"sudo usermod -c \"Comentario\" pepito Podemos obtener m\u00e1s informaci\u00f3n accediendo al man(1) de usermod(8)","title":"Insertando un comentario"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#como-eliminar-una-usuari","text":"Como la mayor parte de las cosas en Linux o sistemas UNIX-like, se puede hacer pr\u00e1cticamente todo a mano, esto se puede hacer al sentido inverso cuando creamos el/la usuari@ en el sistema. Eliminar la entrada del usuario pepito de /etc/passwd haciendo uso de vipw(8) Destruir el directorio /home/pepito o el asignado, en caso de haber escogido otro directorio Eliminar el fichero del directorio /var/spool/mail/pepito Quitar el grupo que se cre\u00f3 junto con el/la usuari@ por defecto del fichero /etc/groups pero haciendo uso de vigr(8) Y si queremos evitarnos tanta historia, bastar\u00e1 con hacer uso del comando userdel(8) Tan solo con ejecutar: sudo userdel -r pepito Habremos hecho todos los pasos anteriores con un sencillo comando.","title":"\u00bfC\u00f3mo eliminar un(a) usuari@?"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#directorio-de-trabajo","text":"Tod@s l@s usuari@s poseen un entorno de trabajo por defecto que se encuentra en el directorio /home . Este entorno de trabajo contiene el nombre de la cuenta del/la usuari@ y le permite trabajar en \u00e9l y que, por defecto, se van almacenando archivos de configuraci\u00f3n de programas entre un largo etc\u00e9tera.","title":"\u00bfDirectorio de trabajo?"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#super-usuario","text":"Existe un usuario por defecto creado en el sistema llamado root . Este usuario por defecto en todos los sistemas UNIX, UNIX-like como Liux, FreeBSD, Minix\u2026etc tiene acceso a tod@s los archivos, carpetas, operaciones con dispositivos, procesos\u2026 del sistema. Es muy importante utilizarlo lo menos posible y nunca revelar su contrase\u00f1a, o ejecutar aplicaciones sobre todo gr\u00e1ficas con este usuario.","title":"\u00bfSuper usuario?"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#grupos","text":"Por lo general, los grupos son agrupaciones de personas que tienen un objetivo en com\u00fan, si bien pueden ser personas que tienen el mismo gusto por ver a su cantante favorito como obtener los mejores dise\u00f1os de sus productos para una empresa. En nuestro caso, los grupos permiten formar un conjunto de usuari@s que desempe\u00f1en un rol determinado dentro del sistema. Creando, modificando documentos que ell@s hayan generado pero que otr@s que no pertenezca a dicho grupo no tengan permisos para hacerlo. Un usuario, o una usuaria puede formar parte de m\u00e1s de un grupo a la vez, pero por defecto, tienen un grupo primario al que pertenecen. Los grupos como l@s usuari@s, contienen un ID que faciliten su recuperaci\u00f3n dentro del sistema, en este caso se llama GID de Group Identifier o Identificador de grupo. El sistema por defecto tiene unos grupos ya asignados para determinadas actividades del mismo para diferentes tareas como el acceso a los dispositivos de audio y video entre otras cosas.","title":"Grupos"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#grupos-primarios","text":"Los grupos primarios son algo as\u00ed como el grupo principal al que pertenece un/una usuari@. Cada archivo que cree o modifique deber\u00e1 contener el mismo grupo o si no, no podr\u00e1 hacerlo a menos que se encuentre a\u00f1adido a un grupo secundario. Un grupo primario como su nombre indica, es el primer grupo al que pertenece y por ende solo podr\u00e1 tener un GID asociado a la cuenta. Sin embargo, una cuenta de usuari@ puede pertenecer a muchos grupos secundarios.","title":"\u00bfGrupos primarios?"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#como-linux-sabe-que-hace-una-cosa-y-un-grupo-otra","text":"Existen una serie de ficheros clave que todo administrador debe saber que existen: /etc/passwd : Contiene los nombres de usuario, contrase\u00f1as (en antiguas versiones que no usen shadow(5) , UID, GID, descripci\u00f3n, directorio de trabajo y el int\u00e9rprete de comandos que utilice. Cuando en el campo de la contrase\u00f1a se encuentra una \u00abx\u00bb quiere decir que hace uso del archivo /etc/shadow /etc/shadow : Es un fichero que contiene todas las contrase\u00f1as ya sean de grupos o de usuari@s cifradas en un algoritmo determinado por el sistema, se utiliza para evitar que las contrase\u00f1as se puedan leer en /etc/passwd ya que tod@s l@s usuari@s tienen acceso lectura. Este archivo contiene: Nombre de la cuenta de usuari@ Contrase\u00f1a encriptada, o bien puede incluir (!) que aparece como cuenta bloqueada en el sistema, un ejemplo de esto es cuando creamos una nueva cuenta sin haberle asignado una contrase\u00f1a. Fecha del \u00faltimo cambio de contrase\u00f1a, si se encuentra vac\u00edo, es que no est\u00e1n habilitadas las gestiones de cuentas de l@s usuari@s. Fecha m\u00ednima para efectuar un cambio de contrase\u00f1a Fecha m\u00e1xima l\u00edmite para modificar la contrase\u00f1a Periodo de aviso para cambiarla N\u00famero de d\u00edas con el usuario inactivo despu\u00e9s de que haya expirado la contrase\u00f1a Fecha de expiraci\u00f3n de la cuenta Campo reservado /etc/shadow- : Copia de seguridad del fichero anterior /etc/group : Contiene nombre del grupo, contrase\u00f1a (en caso de no usar shadow(5) ), GID, lista de usuarios adjuntos Son los archivos principales y que tod@s tenemos que tener hechos una copia de seguridad en caso de que falle el sistema o nos equivoquemos editando alguno de ellos. Nota A pesar de no ser altamente recomendable su edici\u00f3n, si queremos editar a mano los ficheros passwd(5) o shadow(5) tenemos que utilizar los comandos vigr(1) para edici\u00f3n de grupos y vipw(1) para edici\u00f3n de los ficheros tanto passwd(5) como shadow(5) .","title":"\u00bfC\u00f3mo Linux sabe qu\u00e9 hace una cosa y un grupo otra?"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#como-crear-un-grupo","text":"Los grupos se pueden crear manualmente al igual que l@s usuari@s haciendo uso del comando vigr(8) . No obstante, es preferible como siempre hacer uso de los comandos que nos faciliten las cosas m\u00e1s que nada para evitar incorrecciones de cualquier \u00edndole.","title":"\u00bfC\u00f3mo crear un grupo?"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#comando-groupadd","text":"groupadd(8) es una bella herramienta con la que crear un grupo, edita el fichero /etc/group y a su vez actualiza el /etc/gshadow para a\u00f1adir la contrase\u00f1a asignada","title":"Comando groupadd"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#creando-un-grupo","text":"sudo groupadd sysadmins","title":"Creando un grupo"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#creando-un-grupo-con-gid-especifico","text":"sudo groupadd -g 1200 sysadmins","title":"Creando un grupo con GID espec\u00edfico"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#asignando-contrasena-a-un-grupo","text":"sudo groupadd -p contrase\u00f1a sysadmins","title":"Asignando contrase\u00f1a a un grupo"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#como-modificar-un-grupo","text":"Como podemos modificar l@s usuari@s, \u00bfPor qu\u00e9 no los grupos? Pues claro que s\u00ed podemos hacerlo con groupmod(8) .","title":"\u00bfC\u00f3mo modificar un grupo?"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#comando-groupmod","text":"Este comando nos permitir\u00e1 modificar cierta informaci\u00f3n de los grupos que tenemos como por ejemplo:","title":"Comando groupmod"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#cambiando-el-nombre-del-grupo","text":"sudo groupmod -n devels sysadmins","title":"Cambiando el nombre del grupo"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#cambiando-el-gid","text":"sudo groupmod -g 1203 devels","title":"Cambiando el GID"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#modificando-la-contrasena","text":"sudo groupmod -p \"Contrase\u00f1a\" devels","title":"Modificando la contrase\u00f1a"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#como-eliminar-el-grupo","text":"Tambi\u00e9n es otra operaci\u00f3n que podemos hacer con vigr(8) , pero es mejor utilizando este m\u00e9todo. sudo groupdel devels","title":"\u00bfC\u00f3mo eliminar el grupo?"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#como-cambiar-temporalmente-nuestr-grupo-primario","text":"Los usuarios siempre utilizamos un grupo primario que permite identificarnos con diversas partes o \u00e1reas del sistema. En caso de haber actualizado algo que requiera de una persona conectada al ordenador, se puede hacer pasar por la otra persona para saber que\u2026 Entonces existen una serie de restricciones intr\u00ednsecas como no editar un documento a la vez, si has instalado un software reciente que requiere permisos y por tanto reiniciar la sesi\u00f3n gr\u00e1fica, se puede evitar. B\u00e1sicamente es gracias al comando newgrp(1) newgrp finance Y con esto, se activa nuestro grupo secundario como primario.","title":"\u00bfC\u00f3mo cambiar temporalmente nuestr@ grupo primario?"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#visualizando-los-grupos-en-los-que-estoy","text":"Se puede ver f\u00e1cilmente haciendo uso del comando groups","title":"Visualizando los grupos en los que estoy"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#comodin","text":"Tenemos un peque\u00f1o comod\u00edn que nos permite modificar ciertas cosas de nuestr@ usuari@ o de un grupo en concreto como su contrase\u00f1a. Esta herramienta se llama gpasswd(1) y la tenemos instalada por defecto.","title":"Comod\u00edn"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#anadiendo-una-usuari-a-un-grupo","text":"sudo gpasswd -a pepito users","title":"A\u00f1adiendo un(a) usuari@ a un grupo"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#eliminando-una-usuari-de-un-grupo","text":"sudo gpasswd -d pepito users","title":"Eliminando un(a) usuari@ de un grupo"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#suprimir-contrasena-en-un-grupo","text":"sudo gpasswd -r users","title":"Suprimir contrase\u00f1a en un grupo"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#permisos","text":"Poco sentido tiene diferenciar usuarios y grupos si no les atribu\u00edmos alg\u00fan permiso especial que permita establecer una cierta jerarqu\u00eda o distinci\u00f3n, ya que si no, estar\u00edamos dejando un sistema horizontal en el que tod@s l@s usuari@s puedan hacer lo que quieran dentro del sistema. Aqu\u00ed entra en juego el factor permisos. Los permisos en UNIX se rigen por una serie de campos Usuario: Solo el autor puede leer, escribir, ejecutar, o una combinaci\u00f3n de los mismos, el poder en este caso sobre el fichero solo lo tiene \u00e9l o ella o el usuario root . Grupo: Tod@s l@s usuari@s que formen parte del grupo, dependiendo de los permisos que tenga establecido en este apartado el fichero o directorio podr\u00e1n o no leer, escribir, o ejecutar en caso de ser un fichero ejecutable. Todo el mundo: El resto de usuari@s del sistema que no pertenezcan ni al grupo, ni sea el autor del fichero, dependiendo de los permisos podr\u00e1 o no acceder a los directorios y ficheros. Imaginemos que tenemos el siguiente ejemplo: Somos jefes(as) de un proyecto de desarrollo, y tenemos vari@s emplead@s a nuestro cargo. Nosotr@s como jefe(as) del proyecto, tenemos plena acci\u00f3n sobre todos los ficheros (somos autores). Y, seleccionamos determinados ficheros para determinados grupos, por ejemplo, todos aquellos ficheros que tengan que ver con el departamento de comunicaci\u00f3n que tiene m\u00faltiples usuari@s, solo podr\u00e1n acceder los de comunicaci\u00f3n; el grupo de desarrolladores(as) tiene sus ficheros a cargo\u2026etc Y cada usuari@ dentro de su grupo, tiene acceso pleno a los ficheros, sin embargo, las personas de otros grupos no pueden acceder a dichos archivos por las restricciones. Y luego, tenemos un apartado p\u00fablico, que solo podr\u00e1 leer determinados archivos. \u00a1Voil\u00e1! hemos explicado el funcionamiento de usuarios y grupos de una forma sencilla. Jefes(as) de proyecto \\\u00ba/ \\\u00aa/ | |-------------------| | Contabilidad | | Directivas | | Contratos | |-------------------| ________________|________ / \\ Comunicaci\u00f3n Desarrollo \\\u00ba/ \\\u00aa/ \\\u00ba/ \\\u00aa/ | | |-----------------| |-----------------| | Inventario RRSS | | C\u00f3digo fuente | | Inversores | | Contrase\u00f1as OS | | Media | | Servidores | | ... | | ... | |-----------------| |-----------------| | | | Todo el mundo | \\\u00ba/ \\\u00aa/\\\u00ba/ \\\u00aa/ *-------------------------> \\\u00ba/ \\\u00aa/\\\u00ba/ \\\u00aa/ \\\u00aa/ | |-------------| | index.html | | setup.sh | | screenshots | | Twitter | | Facebook | | Google+ | |-------------| Ahora vamos a traducir las palabras en el lenguaje que lo interpreta el sistema, tenemos hasta tres formas de conceder, modificar o leer permisos: Formato verbal o por car\u00e1cter: Se hacen uso de las letras para asignar, modificar o simplemente leer los permisos: r: read solo lectura w: writable solo escritura ( debe ir acompa\u00f1ado de lectura para que pueda modificarse ) x: executable solo ejecutable ( debe ir acompa\u00f1ado del permiso lectura para poder ejecutarse ) # r w x rw rx wx rwx Usuario chmod u+r f1 u+w u+x u+rw u+rx u+wx u+rwx Grupo chmod g+r f1 g+r g+x g+rw g+rx g+wx g+rwx Todo el mundo chmod o+r f1 o+r o+x o+rw o+rx o+wx o+rwx Tod@s chmod a+r f1 a+r a+x a+rw a+rx a+wx a+rwx Formato num\u00e9rico basado en Octal: Se hace uso del 1 al 7 para definir los permisos # r w x rw rx wx rwx Usuario 400 200 100 600 500 300 700 Grupo 040 020 010 060 050 030 070 Todo el mundo 004 002 001 006 005 003 007 Usuario + Grupo 440 220 110 660 550 330 770 Grupo + Mundo 044 022 011 066 055 033 077 Usuario + M 404 202 101 606 505 303 707 Tod@s 444 222 111 666 555 333 777 Mediante m\u00e1scara: Esta es la forma menos com\u00fan de declarar los permisos, pero tambi\u00e9n se utiliza. Para declarar un valor hay que hacer uso del comando umask(1p) Si queremos asignar el valor 022 a la m\u00e1scara, este es el valor que le tendremos que restar al n\u00famero actual de permisos que se encuentre en el directorio actual. Por ejemplo: 002 = 777 - 002 = 775 (rwrwxr-x) 444 = 644 - 444 = 200 (-w\u2014\u2014-) 020 = 660 - 020 = 640 (rw\u2013r\u2014-) Para declarar el valor de una m\u00e1scara se hace uso de umask(1p) tal que as\u00ed: umask 020 Cuando se declara una m\u00e1scara en un directorio, todos los archivos y rutas que se creen dentro de \u00e9l, heredar\u00e1n estos permisos. No es que se aplique directamente al archivo/directorio.","title":"Permisos"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#como-ver-los-permisos","text":"Para visualizar los permisos tenemos el magn\u00edfico comando ls(1) ls -al Este comando muestra todos los archivos y directorios que se encuentren en el directorio actual adem\u00e1s de los ocultos. En suma, muestra los enlaces tanto duros como simb\u00f3licos. En la siguiente salida, si nos fijamos en la primera columna de la izquierda veremos los permisos y el tipo de archivo. lrwxrwxrwx. 1 sincorchetes sincorchetes 37 May 19 21:51 .steampath -> /home/sincorchetes/.steam/sdk32/steam lrwxrwxrwx. 1 sincorchetes sincorchetes 35 May 19 21:51 .steampid -> /home/sincorchetes/.steam/steam.pid drwxrwxr-x. 3 sincorchetes sincorchetes 4096 Mar 7 14:17 .subversion -rw-rw-r--. 1 sincorchetes sincorchetes 8 Mar 28 22:29 .tasks drwxrwxr-x. 2 sincorchetes sincorchetes 4096 Jan 20 04:25 .themes drwx------. 3 sincorchetes sincorchetes 4096 Feb 12 01:10 .thumbnails drwx------. 3 sincorchetes sincorchetes 4096 Jan 20 11:05 .thunderbird drwxrwxr-x. 3 sincorchetes sincorchetes 4096 May 27 19:56 .tmux -rw-rw-r--. 1 sincorchetes sincorchetes 370 May 27 19:57 .tmux.conf drwxrwxr-x. 7 sincorchetes sincorchetes 4096 Jun 2 12:38 .vagrant.d drwxr-xr-x. 2 sincorchetes sincorchetes 4096 Jun 4 17:08 Videos Los archivos que contienen una \u00abl\u00bb en los permisos denotan que son enlaces simb\u00f3licos y se puede adem\u00e1s saber porque apuntan a otro directorio/fichero \u00ab->\u00bb. Aquellos que contienen una \u00abd\u00bb, denotan que son directorios y los que no contienen nada m\u00e1s que un \u00ab-\u00bb se interpretan como archivos. Modificando la autor\u00eda de archivos/directorios Como podemos ver, se pueden asignar m\u00faltiples permisos a los archiv@s, ahora bien, \u00bfQu\u00e9 pasa si queremos cambiar el autor del fichero, el grupo o ambos? Podemos hacerlo gracias al comando chown(1) : chown usuario fichero/directorio : Cambiando el autor del fichero y/o directorio chown usuario:grupo : Cambiando el autor y el grupo al fichero y/o directorio Se puede asignar un autor a un fichero y tener un grupo diferente, el autor podr\u00e1 modificarlo, leerlo o ejecutarlo en cualquier momento, es indiferente.","title":"\u00bfC\u00f3mo ver los permisos?"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#permisos-especiales","text":"","title":"Permisos especiales"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#sticky-bit","text":"\u00bfQu\u00e9 pasa si tenemos much@s usuari@s dentro de un grupo cuyo grupo tiene asignado un directorio de trabajo y el usuario \u00abPepe\u00bb crea un fichero y la usuaria \u00abSusana\u00bb intenta eliminarlo? Que podr\u00e1 hacerlo siempre y cuando, se aplique una restricci\u00f3n llamada \u00abSticky Bit\u00bb del ingl\u00e9s, \u00abbit pegajoso\u00bb. Este permiso especial, permite restringir los archivos creados y modificados por l@s miembr@s de un grupo y evitar que se genere un \u00abautosabotaje\u00bb o un borrado por error. Para habilitarlo bastar\u00e1 con efectuar: chmod 1000 archivo/directorio \u00f3 .. code-block:: bash chmod u+t archivo/directorio","title":"Sticky Bit"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#aplicar-permisos-recursivos-en-los-ficheros-y-subdirectorios-de-un-directorio","text":"chmod 1000 -R directorio Cuando ejecutemos un ls(1) , veremos que en los permisos se habr\u00e1 a\u00f1adido un \u00abt\u00bb al final tanto para directorios como para ficheros, esto nos indica la activaci\u00f3n del Sticky Bit, tambi\u00e9n aparecer\u00e1 modo de ejecuci\u00f3n permitido. Si aparece una \u00abT\u00bb en vez de una \u00abt\u00bb, esto quiere decir, que se ha activado el Sticky Bit pero solo para el usuario actual, si vemos el resultado, no contienen permisos de ejecuci\u00f3n y por lo tanto no se permitir\u00e1 crear archivos/directorios.","title":"Aplicar permisos recursivos en los ficheros y subdirectorios de un directorio"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#salida-con-sticky-bit-activado","text":"ls -al total 8 drwxrwxrwt. 2 root root 4096 Jun 11 07:41 . drwxrwxrwt. 3 root users 4096 Jun 11 07:41 ..","title":"Salida con Sticky Bit activado"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#salida-con-sticky-bit-activado-para-el-usuari-actual","text":"ls -al total 8 drwxrwxrwx. 2 root users 4096 Jun 11 07:38 . drwxrwxrwx. 3 sincorchetes sincorchetes 4096 Jun 11 07:37 .. -rwxrw-rwT. 1 sincorchetes sincorchetes 0 Jun 11 07:38 12 Aqu\u00ed os podemos mostrar con m\u00e1s claridad el funcionamiento:","title":"Salida con Sticky Bit activado para el usuari@ actual"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#suid-y-sguid","text":"En Linux existen una serie de condiciones especiales para determinados ejecutables, archivos\u2026 que pueden editarse o ejecutarse sin ser el propietario de los mismos. Esta caracter\u00edstica nos otorga una cierta ventaja como por ejemplo, si queremos cambiar la contrase\u00f1a de nuestr@ usuari@ podemos hacerlo sin ser usuario \u00abroot\u00bb. Si nos fijamos en los permisos del comando passwd , veremos que tiene la letra \u00abs\u00bb dentro de la ristra de permisos. ls -al /usr/bin -rwsr-xr-x. 1 root root 29008 Apr 12 11:24 passwd Digamos que el/la usuari@ se hace pasar por \u00abroot\u00bb para intentar cambiar su contrase\u00f1a y lo puede hacer gracias a estos permisos. Estos se llaman SUID Set User ID Bit o SGID Set Group ID Bit. Podemos verificar si un archivo o directorio lo tiene activado porque en los permisos del usuario tiene una \u00abs\u00bb o en los permisos del grupo contiene \u00abs\u00bb. Solo el propietario del fichero/directorio puede declarar estos permisos \u00abextendidos\u00bb. Nota En caso de contener una \u00abS\u00bb, esto quiere decir, que tanto el autor del archivo/directorio como el grupo y el resto del mundo no podr\u00e1 editar, modificar y/o ejecutar archivos dentro del directorio. De hecho, veremos como se encuentra reducida la salida de permisos._","title":"SUID y SGUID"},{"location":"sistemas/linux/acl/gestion-de-usuarios-y-grupos/#referencias","text":"man pages The Linux Document Project","title":"Referencias"},{"location":"sistemas/linux/almacenamiento/lvm/","text":"EL LVM funciona por capas: -- Vol\u00famen f\u00edsico (PV) | | |---- Grupo de vol\u00famenes l\u00f3gicos (VG) | | |--------- Volumen l\u00f3gico (LV) | | | |------ Tipo de partici\u00f3n (EXT4|XFS|REISERFS|BTRFS) Volumen f\u00edsico es una unidad reservada para poder utilizar el LVM y se crea a partir de una partici\u00f3n del sistema. Grupo de vol\u00famenes: Permite adherir vol\u00famenes f\u00edsicos al grupo incrementando/reduciendo el espacio y otras caracter\u00edsticas. Volumen l\u00f3gico: Se utiliza para gestionar las particiones que utilizaremos Tipo de partici\u00f3n: Es el formato que le daremos al volumen l\u00f3gico y que utilizaremos de sistema de archivos Vol\u00famenes f\u00edsicos Comprobar vol\u00famenes f\u00edsicos Para comprobarlos ejecutamos un sudo pvscan Si no devuelve ning\u00fan resultado, es que no existen. Crear volumen f\u00edsico Identificar la partici\u00f3n que queremos trabajar, la podemos averiguar con: sudo fdisk -l /dev/UNIDAD_ALMACENAMIENTO Por ejemplo: /dev/sdb1 Cuando la sepamos, creamos el volumen con: sudo pvcreate /dev/UNIDAD_ALMACENAMIENTO_N'' Ejemplo: :code: sudo pvcreate /dev/sdb1` Comprobar que se ha creado sudo pvscan Activar vol\u00famenes f\u00edsicos inactivos Falta proc Desactivar vol\u00famenes f\u00edsicos Falta proc Visualizar informaci\u00f3n del volumen f\u00edsico Averiguar que PV queremos comprobar sudo pvdisplay /dev/PV_Nombre Grupo de vol\u00famenes Crear un grupo de vol\u00famenes Hay que averiguar que volumen f\u00edsico vamos a utilizar para poder crear el volumen Crear el volumen: sudo vgcreate **Nombre_GrupoVolumen** /dev/Unidad_AlmacenamientoN_partici\u00f3n Eliminar un grupo de vol\u00famenes Averiguar que volumen vamos a eliminar Elimin\u00e1ndolo sudo vgchange -a n Nombre_GrupoVolumen sudo vgremove Nombre_GrupoVolumen Averiguar la informaci\u00f3n de un grupo de volumen Averiguar que VG queremos comprobar sudo vgdisplay /dev/VG_Nombre Vol\u00famenes l\u00f3gicos y particiones Comprobar vol\u00famenes l\u00f3gicos Para comprobarlos ejecutamos un sudo lvscan Comprobar el tipo de FS que usa el volumen l\u00f3gico sudo mount |grep Nombre_Volumen Si no devuelve ning\u00fan resultado, es que no existen. Crear volumen l\u00f3gico Paso anterior Ocupar todo el espacio disponible del Grupo de Vol\u00famen ( VolGroupXY ): sudo lvcreate -l 100%FREE -n NOMBRELV VOLGROUPXY Coger espacio medido (e.g 10G): sudo lvcreate -L 20G -n NOMMBRELV VOLGROUPXY Formatear en EXT4: sudo mkfs.ext4 /dev/VolGroupXY/LVol Formatear en XFS: sudo mkfs.xfs /dev/VolGroupXY/LVol Expandir volumen l\u00f3gico con capacidad espec\u00edfica Aumentar el volumen l\u00f3gico a 20GB sudo lvextend -L +20GB /dev/VolGroupXY/LVol Formatear en EXT4: sudo resize2fs /dev/VolGroupXY/vol Formatear en XFS sudo xfs_growfs /dev/VolGroupXY/vol Aumentar un volumen l\u00f3gico con todo el espacio disponible Para incrementar el espacio del volumen l\u00f3gico para que consuma todo el espacio libre del grupo de vol\u00famenes: sudo lvextend -l +100%FREE /dev/VolGroupXY/LVol * Formatear en EXT4: :code: sudo resize2fs /dev/VolGroupXY/vol * Formatear en XFS: sudo xfs_growfs /dev/VolGroupXY/vol` Reducir el espacio de un vol\u00famen l\u00f3gico (Procedimiento NO probado) Nota Procedimiento no v\u00e1lido para particiones XFS Una vez identificado el volumen l\u00f3gico, lo reducimos: sudo lvreduce --size X(GB|MB|KB) /dev/VolGroupXY/LVol Hay que redimensionar el espacio de la partici\u00f3n utilizada Averiguar la informaci\u00f3n de un volumen l\u00f3gico Averiguar que LV queremos comprobar: sudo lvdisplay /dev/VG_Nombre Renombrar un vol\u00famen l\u00f3gico sudo umount -lf /dev/VolGroup02/VOL sudo lvrename /dev/VolGroup02/VOL /dev/VolGroup02/VOL_NUEVO_NOMBRE Referencias [[https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/logical_volume_manager_administration/index|LVM - Red Hat Doc]]","title":"Lvm"},{"location":"sistemas/linux/almacenamiento/lvm/#volumenes-fisicos","text":"","title":"Vol\u00famenes f\u00edsicos"},{"location":"sistemas/linux/almacenamiento/lvm/#comprobar-volumenes-fisicos","text":"Para comprobarlos ejecutamos un sudo pvscan Si no devuelve ning\u00fan resultado, es que no existen.","title":"Comprobar vol\u00famenes f\u00edsicos"},{"location":"sistemas/linux/almacenamiento/lvm/#crear-volumen-fisico","text":"Identificar la partici\u00f3n que queremos trabajar, la podemos averiguar con: sudo fdisk -l /dev/UNIDAD_ALMACENAMIENTO Por ejemplo: /dev/sdb1 Cuando la sepamos, creamos el volumen con: sudo pvcreate /dev/UNIDAD_ALMACENAMIENTO_N'' Ejemplo: :code: sudo pvcreate /dev/sdb1` Comprobar que se ha creado sudo pvscan","title":"Crear volumen f\u00edsico"},{"location":"sistemas/linux/almacenamiento/lvm/#activar-volumenes-fisicos-inactivos","text":"Falta proc","title":"Activar vol\u00famenes f\u00edsicos inactivos"},{"location":"sistemas/linux/almacenamiento/lvm/#desactivar-volumenes-fisicos","text":"Falta proc","title":"Desactivar vol\u00famenes f\u00edsicos"},{"location":"sistemas/linux/almacenamiento/lvm/#visualizar-informacion-del-volumen-fisico","text":"Averiguar que PV queremos comprobar sudo pvdisplay /dev/PV_Nombre","title":"Visualizar informaci\u00f3n del volumen f\u00edsico"},{"location":"sistemas/linux/almacenamiento/lvm/#grupo-de-volumenes","text":"","title":"Grupo de vol\u00famenes"},{"location":"sistemas/linux/almacenamiento/lvm/#crear-un-grupo-de-volumenes","text":"Hay que averiguar que volumen f\u00edsico vamos a utilizar para poder crear el volumen Crear el volumen: sudo vgcreate **Nombre_GrupoVolumen** /dev/Unidad_AlmacenamientoN_partici\u00f3n","title":"Crear un grupo de vol\u00famenes"},{"location":"sistemas/linux/almacenamiento/lvm/#eliminar-un-grupo-de-volumenes","text":"Averiguar que volumen vamos a eliminar Elimin\u00e1ndolo sudo vgchange -a n Nombre_GrupoVolumen sudo vgremove Nombre_GrupoVolumen","title":"Eliminar un grupo de vol\u00famenes"},{"location":"sistemas/linux/almacenamiento/lvm/#averiguar-la-informacion-de-un-grupo-de-volumen","text":"Averiguar que VG queremos comprobar sudo vgdisplay /dev/VG_Nombre","title":"Averiguar la informaci\u00f3n de un grupo de volumen"},{"location":"sistemas/linux/almacenamiento/lvm/#volumenes-logicos-y-particiones","text":"","title":"Vol\u00famenes l\u00f3gicos y particiones"},{"location":"sistemas/linux/almacenamiento/lvm/#comprobar-volumenes-logicos","text":"Para comprobarlos ejecutamos un sudo lvscan Comprobar el tipo de FS que usa el volumen l\u00f3gico sudo mount |grep Nombre_Volumen Si no devuelve ning\u00fan resultado, es que no existen.","title":"Comprobar vol\u00famenes l\u00f3gicos"},{"location":"sistemas/linux/almacenamiento/lvm/#crear-volumen-logico","text":"Paso anterior Ocupar todo el espacio disponible del Grupo de Vol\u00famen ( VolGroupXY ): sudo lvcreate -l 100%FREE -n NOMBRELV VOLGROUPXY Coger espacio medido (e.g 10G): sudo lvcreate -L 20G -n NOMMBRELV VOLGROUPXY Formatear en EXT4: sudo mkfs.ext4 /dev/VolGroupXY/LVol Formatear en XFS: sudo mkfs.xfs /dev/VolGroupXY/LVol","title":"Crear volumen l\u00f3gico"},{"location":"sistemas/linux/almacenamiento/lvm/#expandir-volumen-logico-con-capacidad-especifica","text":"Aumentar el volumen l\u00f3gico a 20GB sudo lvextend -L +20GB /dev/VolGroupXY/LVol Formatear en EXT4: sudo resize2fs /dev/VolGroupXY/vol Formatear en XFS sudo xfs_growfs /dev/VolGroupXY/vol","title":"Expandir volumen l\u00f3gico con capacidad espec\u00edfica"},{"location":"sistemas/linux/almacenamiento/lvm/#aumentar-un-volumen-logico-con-todo-el-espacio-disponible","text":"Para incrementar el espacio del volumen l\u00f3gico para que consuma todo el espacio libre del grupo de vol\u00famenes: sudo lvextend -l +100%FREE /dev/VolGroupXY/LVol * Formatear en EXT4: :code: sudo resize2fs /dev/VolGroupXY/vol * Formatear en XFS: sudo xfs_growfs /dev/VolGroupXY/vol`","title":"Aumentar un volumen l\u00f3gico con todo el espacio disponible"},{"location":"sistemas/linux/almacenamiento/lvm/#reducir-el-espacio-de-un-volumen-logico-procedimiento-no-probado","text":"Nota Procedimiento no v\u00e1lido para particiones XFS Una vez identificado el volumen l\u00f3gico, lo reducimos: sudo lvreduce --size X(GB|MB|KB) /dev/VolGroupXY/LVol Hay que redimensionar el espacio de la partici\u00f3n utilizada","title":"Reducir el espacio de un vol\u00famen l\u00f3gico (Procedimiento NO probado)"},{"location":"sistemas/linux/almacenamiento/lvm/#averiguar-la-informacion-de-un-volumen-logico","text":"Averiguar que LV queremos comprobar: sudo lvdisplay /dev/VG_Nombre","title":"Averiguar la informaci\u00f3n de un volumen l\u00f3gico"},{"location":"sistemas/linux/almacenamiento/lvm/#renombrar-un-volumen-logico","text":"sudo umount -lf /dev/VolGroup02/VOL sudo lvrename /dev/VolGroup02/VOL /dev/VolGroup02/VOL_NUEVO_NOMBRE","title":"Renombrar un vol\u00famen l\u00f3gico"},{"location":"sistemas/linux/almacenamiento/lvm/#referencias","text":"[[https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/logical_volume_manager_administration/index|LVM - Red Hat Doc]]","title":"Referencias"},{"location":"sistemas/linux/bash/","text":"Introducci\u00f3n \u00bfQu\u00e9 es Bash? Bash es un int\u00e9rprete de comandos tambi\u00e9n conocido en ingl\u00e9s como una \u00ab shell \u00bb desarrollada el 8 de junio de 1989 por Brian Fox en el lenguaje C como alternativa y mejora de SH ( Bourne Shell ). Hoy en d\u00eda es multiplataforma ya que puede correr tanto en Linux como en Mac OS X (de hecho es shell por defecto), en Windows mediante Cygwin o mediante la instalaci\u00f3n oficial desde su apartado de a\u00f1adir nuevas caracter\u00edsticas de software. Actualmente existen multitudes de I.C pero mencionaremos las m\u00e1s destacadas como: csh : C Shell creada por Bill Joy, 1978 tcsh : TENEX C Shell desarrollada por Ken Greer, 1981 fish : Shell interactiva liberada el 13 de febrero de 2005 por Axel Liljencrantz zsh : Z Shell elaborada por Paul Falstad en 1990 ksh : KornShell creada por David Korn en 1983 Cada una de ellas contiene ciertos matices a la hora de desarrollar scripts que son un serie de ficheros que suelen contener comandos e intrucciones adicionales para que se puedan ejecutar sin tener que escribir grandes bloques de comandos, variables\u2026 Trabajando con Bash Directorios y archivos En este apartado veremos como trabajar con los directorios dentro del sistema. Tenemos que tener en cuenta, de que la arquitectura estandar del sistema de ficheros en Linux (FHS) est\u00e1 organizada en modo de \u00e1rbol. Esto quiere decir que todo cuelga de un directorio ra\u00edz llamado (/), del que cuelga el resto de ellos. Nota Comentaremos los directorios m\u00e1s b\u00e1sicos y relevantes para este art\u00edculo, ya que debe dedic\u00e1rsele un post solamente para explicar qu\u00e9 funciones realiza cada directorio del sistema.** El directorio d\u00f3nde por defecto se generan las carpetas para los nuevos usuarios del sistema se encuentra ubicado en /home . Por defecto, nuestra shell nos sit\u00faa en el directorio principal de nuestro usuario, con lo que no tendremos que desplazarnos a niveles superiores dentro del sistema de archivos. Archivos ocultos Los archivos ocultos se representan por llevar un . como prefijo al nombre del archivo o directorio y no aparecer\u00e1n listados con ning\u00fan comando por defecto. No necesita ning\u00fan tipo de modificador adicional para generarlos o para leerlos. Rutas absolutas y relativas Las rutas absolutas son aquellas que contienen la direcci\u00f3n completa dentro de la jerarqu\u00eda del sistema de archivos. /home/sincorchetes/Videos/Echemosunbitstazo/capitulo1.ogg Mientras que las rutas relativas, solo contienen una direcci\u00f3n breve que se muestra desde la propia carpeta. Imaginemos que estamos en el directorio /home/sincorchetes/ y queremos llegar hasta el capitulo1.ogg . Para ello tendr\u00edamos que apuntar de la siguiente manera: Echemosunbitstazo/capitulo1.ogg \u00f3 bien ./Echemosunbitstazo/capitulo1.ogg Escalado entre directorios Nosotros podemos aprovecharnos de algunos \u00abalias\u00bb que nos provee la shell para agilizar la gesti\u00f3n o administraci\u00f3n de directorios haciendo uso de las rutas relativas. Estos son algunos trucos: . : Significa, el directorio actual. ls . devuelve una salida en la que mostrar\u00e1 todos los directorios y archivos en el directorio actual .. : Sube un nivel superior, ls .. mostrar\u00e1 los directorios y archivos del directorio padre. Obtener la ruta del directorio actual Si queremos saber en qu\u00e9 directorio nos encontramos actualmente, bastar\u00e1 con ejecutar el comando: $ pwd pwd(1) proviene del ingl\u00e9s \u00abprint name of current/working directory\u00bb, imprimir el nombre del directorio actual. Creando un directorio Con el siguiente comando generamos un directorio nuevo sin ning\u00fan tipo de contenido. Existe una sintaxis para crear directorios. No se puede empezar por caracteres especiales, aunque, dentro de los caracteres especiales se puede utilizar el espacio, pero se puede utilizar n\u00fameros, may\u00fasculas o min\u00fasculas. $ mkdir nombre_directorio Nota En caso de que queramos crear un subdirectorio sin existir primero el directorio padre, nos dar\u00e1 error si lo ejecutamos tal cual. Para ello, deberemos aplicar la opci\u00f3n -p . Desplazarnos entre directorios Para poder desplazarnos entre directorios tenemos dos formas de hacerlo, mediante el comando UNIX por excelencia cd(1) o pushd(1) y popd(1) . Desplaz\u00e1ndonos con cd Simplemente deberemos ejecutar el comando y la ruta ya sea relativa o absoluta a la que queramos acceder como en los siguientes ejemplos: Situ\u00e1ndonos en el directorio ra\u00edz del sistema: cd / Subiendo un nivel del directorio actual: cd .. Accediendo a /usr/local/share : cd /usr/local/share Desplaz\u00e1ndonos mediante pushd y popd Uno de estos comandos tienen la ventaja de almacenar en la sesi\u00f3n de bash(1) actual el directorio y adem\u00e1s, nos ubica en \u00e9l como es el caso de pushd(1) . Mientras que popd(1) , nos permite volver hacia atr\u00e1s en caso de no querer seguir estando en \u00e9l. Movi\u00e9ndonos al directorio ra\u00edz: $ pushd .themes/ ~/.themes ~ $ pwd /home/sincorchetes/.themes Volviendo hacia atr\u00e1s: $ popd popd ~ $ pwd /home/sincorchetes Estos comandos tienen algunas caracter\u00edsticas especiales que podemos consultarlas en el manual de cada uno de ellos. Renombrando archivos y directorios Para cambiar de nombre, solo ser\u00e1 necesario ejecutar el comando mv(1) junto con el directorio que queramos cambiar y el directorio con nuevo nombre. Se pueden emplear rutas relativas, absolutas o una combinaci\u00f3n de ambas: mv dir dir_nuevo_nombre mv dir /home/sincorchetes/nuevo_nombre mv /home/sincorchetes/dir /home/sincorchetes/nuevo_nombre Nota Hay que tener cuidado con utilizar mv(1) porque tambi\u00e9n sirve para mover directorios.** Moviendo archivos y directorios Para desplazar directorios o archivos, tan solo tendremos que hacer uso de nuevo del comando mv(1) . mv archivo.ogg /home/sincorchetes/Videos/Echemosunbitstazo mv archivo.ogg Videos/Echemosunbitstazo mv /home/sincorchetes/archivo.ogg Videos/Echemosunbitstazo Tambi\u00e9n se puede aplicar un renombre m\u00e1s traslado: mv archivo.ogg /home/sincorchetes/Videos/Echemosunbitstazo/nuevo_nombre.ogg mv archivo.ogg Videos/Echemosunbitstazo/nuevo_nombre.ogg mv /home/sincorchetes/archivo.ogg Videos/Echemosunbitstazo mv /home/sincorchetes/archivo.ogg /home/sincorchetes/Videos/Echemosunbitstazo Copiando archivos y directorios En el caso de copiar archivos, tenemos el comando cp(1) . Tambi\u00e9n puede aplicarse el uso de rutas absolutas, relativas o un conjunto de las mismas. cp archivo directorio_a_copiar Es importante destacar, que para copiar un directorio completo a pesar de que est\u00e9 vacio. Hagamos uso del modificador -r o -R ( recursivo ) Tambi\u00e9n dispone de un modo interactivo utilizando el modificador -i Listar archivos y directorios El comando por excelencia en estos casos es ls(1) Nos permite listar con multitudes de opciones si utilizamos los modificadores. Listar todos los archivos incluyendo los ocultos con la informaci\u00f3n que muestra ls -l : ls -al Mostar el nombre de todos los archivos incluyendo la representaci\u00f3n del espacio como caracter escapado: ls -b Mostrar el nombre de todos los archivos en una sola columna: ls -w 1 Tipos de archivo En contra posici\u00f3n de sistemas como Windows, en Linux se puede tener un archivo sin ning\u00fan tipo de extensi\u00f3n. El sistema se encarga de averiguar que tipo de archivo es y abrirlo con la aplicaci\u00f3n correspondiente. Si queremos saber alg\u00fan d\u00eda si nos han enviado un ejecutable o un audio realmente, haremos uso del comando file(1) Crear un fichero vac\u00edo Aunque la aut\u00e9ntica utilidad del comando touch(1) es modificar la fecha y hora de los archivos. Tambi\u00e9n se puede utilizar para crear un fichero vac\u00edo y a\u00f1adir texto posteriormente. touch fichero_nuevo Mostrando informaci\u00f3n de un fichero Si queremos leer un archivo de texto plano como la configuraci\u00f3n de un servidor Apache, haremos uso del comando cat(1) . cat /etc/profile Salida truncada: # /etc/profile # System wide environment and startup programs, for login setup # Functions and aliases go in /etc/bashrc # It's NOT a good idea to change this file unless you know what you # are doing. It's much better to create a custom.sh shell script in # /etc/profile.d/ to make custom changes to your environment, as this # will prevent the need for merging in future updates. pathmunge () { case \":${PATH}:\" in *:\"$1\":*) ;; *) if [ \"$2\" = \"after\" ] ; then PATH=$PATH:$1 else PATH=$1:$PATH fi esac } Trabajando con texto Mostrar o redireccionar texto Bash nos permite mostrar una frase, un texto que queramos gracias al comando echo(1) . echo \"\u00a1No nos perderemos los nuevos art\u00edculos de Echemosunbitstazo!\" Tambi\u00e9n podemos redirigir el texto a un archivo nuevo echo \"\u00a1No nos perderemos los nuevos art\u00edculos de Echemosunbitstazo!\" > /home/sincorchetes/Documentos/archivo_nuevo A\u00f1adir informaci\u00f3n a un archivo ya existente echo \"\u00a1No te pierdas \u00e9l pr\u00f3ximo d\u00eda otro cap\u00edtulo m\u00e1s sobre Bash en echemosunbitstazo.es\" >> /home/sincorchetes/Documento/existente Crear un archivo y a\u00f1adir texto directamente Podemos hacer uso del comando cat(1) para finalizar la edici\u00f3n, tendremos que finalizarla pulsando la combinaci\u00f3n de teclas CTRL+D y para ello de la siguiente manera: cat >fichero_de_ejemplo Esto es un ejemplo. Copias de seguridad El comando por excelencia para elaborar copias de seguridad en Linux es haciendo uso del comando tar(1) Elaborando copias de seguridad Elaborando una copia de un directorio tar cfv copia_seguridad.tar dir1 dir2 archivo1 archivo2... Comprimir con bzip2 tar cfvj copia_Seguridad.tar.bz2 dir1 dir2 arch1 arch2... Utilizar compresi\u00f3n gzip tar cfvz copia_seguridad.tar.gz dir1 dir2 arch1 arch2... Crear una copia de seguridad con formato xz tar cfvJ copia_seguridad.tar.xz dir1 dir2 arch1 arch2... Descomprimiendo copias de seguridad A la hora de descomprimir las copias de seguridad no tenemos que declarar el tipo de formato en el que est\u00e1 comprimido, con lo que ganamos m\u00e1s tiempo para dedicarlo a otras cosas. Descomprimir una copia de seguridad tar xfv copia_seguridad.tar Comando grep Este es uno de los comandos m\u00e1s esencial de Bash, nos permite mostrar coincidencias en archivos en base a la cadena de caracteres que nosotr@s le pasemos, en otras palabras, si queremos buscar una palabra en un archivo de texto, grep(1) es nuestro comando. Sintaxis y ejemplos Acorde con las indicaciones que nos proporciona la todopoderosa biblia de los comandos, man(1) estos son 3 ejemplos que nos da man 1 grep . grep [OPCIONES] PATR\u00d3N [FICHERO...] grep [OPCIONES] -e PATR\u00d3N ... [FICHERO...] grep [OPCIONES] -f FICHERO ... [FICHERO...] Tanto las opciones, como los patrones y los ficheros se pueden repetir dentro de la l\u00ednea de ejecuci\u00f3n de nuestro comando. Vamos con los ejemplos: grep -o \"Linux\" /proc/version Imprimir\u00e1 la cadena \u00abLinux\u00bb si la encuentra en el archivo, y la imprime tantas veces como la encuentre. grep -q \"Linux\" /proc/version No imprime nada, es una opci\u00f3n en la que se omite la salida, si encuentra una coincidencia con dicha palabra, devolver\u00e1 en el estado de la shell un 0. echo $? = 0 si se encontr\u00f3 y = 1 en el caso contrario. grep -H \"sda\" /proc/* 2>/dev/null Muestra en cada l\u00ednea en la que encuentre coincidencias, tambi\u00e9n el nombre del archivo y omite errores. grep -A 2 \"_this_module\" /proc/kallsyms Muestra las 2 l\u00edneas siguientes de haber encontrado la coincidencia en la o las l\u00edneas. grep -B 2 \"_this_module\" /proc/kallsyms La inversa de la anterior, en vez de mostrar las 2 l\u00edneas siguientes, muestra las dos l\u00edneas anteriores a la coincidencia. grep -C 2 \"_this_module\" /proc/kallsyms Si la A y la B hac\u00eda cada cosa por separado, con la C podemos mostrar tanto las l\u00edneas anteriores como las posteriores. En este caso muestra el resultado de las dos sentencias anteriores en una sola sentencia. grep -rA 2 \"gcc\" /proc/ 2>/dev/null Buscar\u00e1 de forma recursiva en todos los ficheros y directorios que se encuentren dentro del directorio especificado y cu\u00e1ndo obtenga una coincidencia, imprimir\u00e1 las 2 l\u00edneas anteriores a la coincidencia incluyendo el nombre del archivo en el que se encuentre. Nota El uso del par\u00e1metro -r ya incluye el par\u00e1metro -H por defecto grep -U \"note\" /bin/cp Pretendemos encontrar una coincidencia dentro de un binario, y que en caso de encontrarla, \u00e9sta nos lo diga mediante un mensaje de salida. grep -ob \"root\" /etc/passwd Nos mostrar\u00e1 las l\u00edneas en d\u00f3nde la coincidencia se haya repetido n veces dentro de un fichero especificado. grep -obrA 2 \"root\" /etc 2>/dev/null Permite efectuar lo mismo, pero se visualizar\u00e1n las 2 l\u00edneas en cada coincidencia encontrada, n\u00famero de l\u00ednea, nombre de archivo dentro de un directorio y se omitir\u00e1n los mensajes de error. grep -FrB 2 '/usr' /proc 2>/dev/null Permite utilizar caracteres especiales para la b\u00fasqueda de coincidencias. Este comando buscar\u00e1 de forma recursiva la cadena que contiene un car\u00e1cter \u00abprohibido\u00bb y mostrar\u00e1 las 2 l\u00edneas anteriores cada vez que encuentre una coincidencia. Tambi\u00e9n omitir\u00e1n los mensajes de error. grep -ErC 2 '??linux' /proc 2>/dev/null Al contrario que el anterior, aqu\u00ed utilizaremos expresiones regulares como es el caso de ?? que sustituye a un caracter por signo de interrogaci\u00f3n que no recordemos o no estemos seguro de cu\u00e1l puede ser. Esta sentencia imprimir\u00e1 las dos l\u00edneas siguientes a las coincidencias as\u00ed mismo como las 2 anteriores, los mensajes de error se omitir\u00e1n y se visualizar\u00e1 el nombre de los archivos que contengan dichas coincidencias fgrep y egrep Pues ya los hemos dado en los dos ejemplos anteriores, aunque no lo creamos, fgrep(1) como egrep(1) son dos comandos que act\u00faan como alias. fgrep(1) equivale a grep -F egrep(1) es igual a grep -E Alias Los alias nos permiten reducir la longitud de una sentencia que queramos ejecutar en nuestro sistema y atajarla con una simple palabra. Por ejemplo, si queremos acceder a un directorio muy concurrido desde terminal. cd ~/Documentos/Archivos/2018/05/10/10-11/Sector/1/ficheros_importantes/Codigo054/Area_51/ No nos imaginamos en absoluto tener que teclear toda esta ruta cada vez que queramos acceder al directorio Area_51. Pues podemos generar un alias, a nivel de sistema o a nivel de nuestro usuario. A nivel de sistema, tenemos que a\u00f1adirlo en /etc/bashrc si es que queremos que ese alias tambi\u00e9n lo tengan el resto de usuarios o si solo lo queremos para el nuestro, en ese caso, ~/.bashrc es el que debemos tocar de la siguiente manera: alias nombre_alias='cd ~/Documentos/Archivos/2018/05/10/10-11/Sector/1/ficheros_importantes/Codigo054/Area_51/' Posteriormente aplicamos los cambios: source /etc/bashrc o si es a nivel usuario: source ~/.bashrc Enlaces Los enlaces vienen a ser lo que en Windows tenemos como \u00abAccesos directos\u00bb pero a nivel de terminal, podemos especificar un directorio o un archivo que se encuentre en un directorio X pero teniendo un acceso m\u00e1s r\u00e1pido en un directorio en el que trabajemos. Tambi\u00e9n tenemos enlaces simb\u00f3licos que son accesos que si es borrado el archivo o directorio original solo queda el enlace y por lo tanto, no funciona y no es \u00fatil, o tenemos lo que denominamos enlaces duros, en los que se conserva una copia del fichero o directorio. Enlaces simb\u00f3licos Para poderlos generar, simplemente tenemos que hacer uso del comando ln(1) con el par\u00e1metro -s de soft. ln -s /directorio_a_enlazar /directorio_donde_quiero_ver_el_enlace Por ejemplo: ln -s /usr/src ~ Nos genera un enlace simb\u00f3lico hacia el directorio /usr/src de nuestro /home . \u00bfC\u00f3mo averiguar si dispongo del enlace simb\u00f3lico? Cuando hacemos un ls(1) para listar documentos y directorios, veremos en una de las l\u00edneas de salida un dato similar: lrwxrwxrwx. 1 sincorchetes sincorchetes 9 May 20 17:37 src -> /usr/src/ \u00abl\u00bb al principio de esta entrada identifica un enlace simb\u00f3lico. src -> /usrc/src : Nos dice hacia d\u00f3nde apunta. Enlaces duros Los enlaces duros permiten crear \u00abuna copia\u00bb de lo enlazado, de tal forma, que si se destruye el archivo o directorio original cont\u00ednua funcionando. ln /directorio_a_enlazar /directorio_donde_quiero_ver_el_enlace De hecho, si hacemos un ls(1) , no veremos a\u00f1adida una l en los permisos o en acceso tipo src -> /usr/src . B\u00fasqueda de archivos find(1) a diferencia de locate(1) es un comando que busca a tiempo real y tiene much\u00edsimas funcionalidades a\u00f1adidas como filtrar por nombre, tipo de ejecutable, fecha, hora\u2026. e incluso, eliminar los ficheros que hemos querido encontrar, mientras que locate(1) trabaja junto con una base de datos generada por updatedb(8) reduciendo dr\u00e1sticamente la actualizaci\u00f3n puntera de la ubicaci\u00f3n de los ficheros y directorios adem\u00e1s de no tener la afinidad que posee find(1) . Comdando find En este art\u00edculo vamos a guiarnos m\u00e1s por los ejemplos que por explicar la sintaxis o los par\u00e1metros de uno en uno. Encontrar todos aquellos ficheros y directorios que se encuentren en el directorio /etc , y que aquellos directorios a los que no no podamos acceder a su contenido, no nos muestre el error de permisos. find /etc 2>/dev/null Encontrar todos aquellos archivos en /var/ cuya extensi\u00f3n sea .log, y que por supuesto, no muestre aquellos directorios que requieran permisos para su acceso. find /var -name \"*.log\" 2>/dev/null Mostrar todos los directorios de nuestro /home sin contar los archivos find ~ -type d Encontrar archivos vac\u00edos en nuestro /home y eliminarlos todos find ~ -empty -type f -exec rm -rf {} \\; Encontrar ficheros con extensi\u00f3n .log y copiarlos en una carpeta dentro de nuestro home con permisos de superusuario sudo find /var -name \".log\" -exec cp {} /home/sincorchetes/LOGS \\; Buscando archivos cuya fecha de modificaci\u00f3n sea de hace un minuto en nuestro /home find ~ -cmin 1 Ficheros que han sido accedidos hace 10 minutos find ~ -amin 10 Visualizar archivos que contengan .log de extensi\u00f3n, contengan permisos 644 sudo find /var -name \"*.log\" -perm 644 Ver archivos que pesen igual o redondeando den 2GB en nuestro directorio find ~ -size 2G Buscar directorios que contengan nuestro nombre de usuario, con permisos 777. find / -user sincorchetes -type d -perm 777 Mostrar todos los archivos o directorios simb\u00f3licos que se encuentren en el directorio /dev y mostrarlo como si ejcut\u00e1semos un ls(1) sudo find /dev -type l -ls Listando aquellos archivos de nuestro /home cuya extensi\u00f3n contenga \u00ab * .avi\u00bb y sean iguales o superiores a 1G find ~ -name \"*.avi\" -a -size 1G Suprimiendo los .rpm que encontremos que lleguen a 10 megas sudo find /var/cache/rpm -name \"*.rpm\" -a -size 10M -exec rm -rf {} \\; Podemos seguir ejemplos del manpages de find(1) o imaginarnos lo que se nos ocurra que podamos hacer en un futuro, estos son solo peque\u00f1os ejemplos de lo que podemos hacer con esta fant\u00e1stica utilidad. Comdando locate Bien, como hemos dicho anteriormente, este comando hace uso de una base de datos que por lo general suele ubicarse en /var/lib/mlocate/mlocate.db , y su fichero de configuraci\u00f3n suele encontrarse en /etc/updatedb.conf todo depende de la distribuci\u00f3n que utilicemos. Tambi\u00e9n podemos hacer un indexado que es registrar todos los archivos y directorios que queramos y se almacenen por un cierto orden en la base de datos de locate, sin tener que hacer uso de superusuario o creando un daemon en el sistema. Regenerando las bases de datos Podemos hacer que nos indexe todo lo que contenga el sistema y que lo puedan ver tod@s l@s usuari@s. sudo updatedb O bien, podemos generar una base de datos para nosotr@s. mkdir .locateupdatedb -l 0 -U /DIR -o .locate/db_file -l 0 : Permite entre otras cosas, crear el fichero de la base de datos utilizando nuestro usuario. -U /DIR : Directorio a idnexar -o nombre_fichero : El nombre que le pondremos a la db Si queremos a\u00f1adir m\u00e1s directorios, tendremos que ejecutar el comando modificando /DIR Buscando archivos o directorios Basta con ejecutar locate nombre_archivo/nombre_dir y el comando nos arrojar\u00e1 una salida completa con las coincidencias que encuentre en la db. Sin embargo, si queremos ejecutar nuestro fichero, tendremos que especific\u00e1rselo a locate(1) locate nombre_directorio/nombre_archivo -d .locate/db_file Visualizando estad\u00edsticas Se pueden ver cu\u00e1ntos archivos y directorios tenemos actualmente registrados en cada db. locate -S \u00f3 locate -Sd .locate/db_file Comando whereis Este comando nos viene de f\u00e1bula cuando queremos encontrar alg\u00fan binario, archivo fuente o incluso p\u00e1ginas de manual de man(1) , para hacerlo, este lleva una b\u00fasqueda en aquellos directorios que se encuentren declarados en la variable $PATH y $MANPATH . Estas variables las podemos encontrar en /etc/profile o en ~/.bash_profile (en nuestro caso) echo $PATH Nuestra salida: echo $PATH/usr/lib/qtchooser:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/home/sincorchetes/.composer/vendor/bin:/home/sincorchetes/.local/bin:/home/sincorchetes/bin:/home/sincorchetes/.bin/scripts Vamos a visualizar un par de ejemplos. Buscando una p\u00e1gina con la coincidencia whereis -m cat Encontrando la ubicaci\u00f3n del binario whereis -b cat Buscando la fuente de un kernel de Fedora 28 whereis -s 4.16.8-300.fc28. Comando whatis Este comando nos permite buscar en las p\u00e1ginas de man(1) y nos devuelve una descripci\u00f3n del mismo en una sola l\u00ednea, en caso de que encuentre varios resultados, mostrar\u00e1 ambos o m\u00e1s y su categor\u00eda dentro de man(1) . whatis cat Salida: cat (1p) - concatenate and print filescat (1) - concatenate files and print on the standard output Podemos especificar un directorio diferente para que busque en otras p\u00e1ginas de man(1) pues que no tengamos instaladas en el directorio ra\u00edz o no se encuentren registradas en ~/.bash_profile whatis -M ~/.man/ cat Entre otras cosas Comando apropos Este comando es parecido al anterior, lo que utiliza directamente mandb(1) , tambi\u00e9n permite utilizar otra ruta de directorio para los manpages\u2026etc apropos whatis Salida: whatis (1) - display one-line manual page descriptions Redireccionamiento Un redireccionamiento, como su propio nombre indica lo que hace es una redirecci\u00f3n a un determinado sitio. En nuestro caso, utilizaremos los redireccionamientos para gestionar tanto las salidas, como entradas as\u00ed como los niveles de error que de un comando o una aplicaci\u00f3n para utilizarlos en nuestro beneficio. Podemos decirle a un comando, que si tiene un error X, no lo muestre en pantalla y lo rediriga a un archivo de texto para que haga de log. Tambi\u00e9n podemos a\u00f1adir una frase, sentencias\u2026 a un archivo ya existente o en caso de que no exista que lo cree; comentar el n\u00famero de palabras que tiene un texto\u2026 y un sin fin de cosas m\u00e1s. Operadores de redireccionamiento Estos son los operadores que utilizaremos en la elaboraci\u00f3n de scripts sobre todo, cap\u00edtulo que introduciremos estos d\u00edas con las siguientes entregas. Operador Descripci\u00f3n > Redirecciona una salida hacia un archivo o comando. Si el archivo no existe, lo crea, y si existe, lo sobreescribe >> Igual que el anterior, pero si el archivo existe no lo destruye, a\u00f1ade la salida despu\u00e9s de la \u00faltima l\u00ednea < Redirecciona una entrada hacia un comando para que este emita una salida (si lo hace), puede ser la salida de un comando hacia otro, un fichero\u2026 << Redirecciona el contenido de un fichero hasta que se encuentre la palabra especificada en la redirecci\u00f3n para finalizarla Canales Nuestra terminal tiene una serie de canales por los que se toman la entrada, salida y errores. +\u2014\u2014-+ \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014-+\u2014\u2014\u2014\u2014-+ | Canal | Descripci\u00f3n | Ubicaci\u00f3n | +\u2014\u2014-+ \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014-+\u2014\u2014\u2014\u2014-+ | 0 | Es el canal por defecto de la entrada est\u00e1ndar | /dev/stdin | +\u2014\u2014-+ \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014-+\u2014\u2014\u2014\u2014-+ | 1 | Especifica la salida de un comando. Por ejemplo ls 2> file.txt | /dev/stdout | +\u2014\u2014-+ \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014-+\u2014\u2014\u2014\u2014-+ | 2 | Muestra la presencia de errores. Por ejemplo ls -lklk 3> error.txt | /dev/stderr | +\u2014\u2014-+ \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014-+\u2014\u2014\u2014\u2014-+ Ejemplos Almacenar la salida del comando ls -al en un fichero lista.txt ls -al > lista.txt Veremos como no se muestra nada en pantalla, pero se ha creado el archivo lista.txt Mostrar el contenido de lista.txt cat lista.txt total 568 drwxrwxr-x. 2 sincorchetes sincorchetes 4096 May 2 01:43 . drwx------. 55 sincorchetes sincorchetes 4096 May 2 17:10 .. -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 1 12:55 20E2MC8SVX-9423.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 1 12:55 36712GXM3C-865.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 1 12:55 4SASA426RU.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 2 01:43 5ODFPGZXOI-25637.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 2 01:43 5PYBWDCZWK.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 1 12:55 6A21WJKHWL.png Nota Recordemos que el operador > sobreescribe todo lo que haya, si queremos a\u00f1adir informaci\u00f3n nueva al archivo debemos utilizar el operador >> ls -al >> lista.txt cat lista.txt total 568 drwxrwxr-x. 2 sincorchetes sincorchetes 4096 May 2 01:43 . drwx------. 55 sincorchetes sincorchetes 4096 May 2 17:10 .. -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 1 12:55 20E2MC8SVX-9423.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 1 12:55 36712GXM3C-865.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 1 12:55 4SASA426RU.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 2 01:43 5ODFPGZXOI-25637.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 2 01:43 5PYBWDCZWK.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 1 12:55 6A21WJKHWL.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 2 01:43 6FG92BUEDM-12977.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 2 01:43 A6XZFBO1TK-18309.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 2 01:43 FBEBPAR2O9-16637.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 2 01:43 FP9EZ05Y3E-16753.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 1 12:55 FZRD6D42BI-875.png Guardar todos los errores que surjan en la ejecuci\u00f3n del programa cat ks 2> error.txt No se mostrar\u00e1 nada en pantalla, pero nos daremos cuenta el error que nos da cat(1) en el fichero que se ha creado llamado error.txt cat error.txt cat: jk: No such file or directory Mostrar en pantalla tanto la salida est\u00e1ndar como los errores ls -al 2>&1 info.txt Guardar en un fichero tanto la salida como los errores ls -al 2>&1 info.txt > file.txt Calcular las l\u00edneas que tiene un fichero de texto wc -l < file.text A\u00f1adir informaci\u00f3n a un fichero e interrumpirlo utilizando una palabra clave declarada por el usuario cat add << EOF Crear un fichero de texto utilizando la canal de entrada y utilizando una palabra clave para finalizar la adicci\u00f3n cat > create_text.txt << EOF Adherir la salida est\u00e1ndar de m\u00faltiples textos y redireccion\u00e1ndolos a un archivo cat lista.txt error.txt info.txt create_text.txt > salida_multiple Tuber\u00edas Una tuber\u00eda es una secuencia de uno o m\u00e1s comandos separados por operadores de control como | o & . Suelen utilizarse mucho junto con el comando grep(1) , egrep(1) y fgrep(1) para filtrar resultados, o el comando cut(1) para recortar la salida est\u00e1ndar, generalmente producida por comandos. Estos comandos que hemos mencionado les dedicaremos un post especial debido a la importancia de los mismos. Sobre todo cuando demos scripting m\u00e1s adelante. Este es el formato de una tuber\u00eda com\u00fan comando [+par\u00e1metros] | \u00f3 & [comando1] Ejemplos Bas\u00e1ndonos en esta estructura de directorios . \u251c\u2500\u2500 fichero-0 \u251c\u2500\u2500 fichero-1 \u251c\u2500\u2500 fichero-10 \u251c\u2500\u2500 fichero-11 \u251c\u2500\u2500 fichero-12 \u251c\u2500\u2500 fichero-13 \u251c\u2500\u2500 fichero-14 \u251c\u2500\u2500 fichero-15 \u251c\u2500\u2500 fichero-16 \u251c\u2500\u2500 fichero-17 \u251c\u2500\u2500 fichero-18 \u251c\u2500\u2500 fichero-19 \u251c\u2500\u2500 fichero-2 \u251c\u2500\u2500 fichero-3 \u251c\u2500\u2500 fichero-4 \u251c\u2500\u2500 fichero-5 \u251c\u2500\u2500 fichero-6 \u251c\u2500\u2500 fichero-7 \u251c\u2500\u2500 fichero-8 \u2514\u2500\u2500 fichero-9 Mostrar un valor relacionado con dmesg(1) dmesg |grep Bluetooth [ 23.265232] Bluetooth: Core ver 2.22 [ 23.265247] Bluetooth: HCI device and connection manager initialized [ 23.265250] Bluetooth: HCI socket layer initialized [ 23.265251] Bluetooth: L2CAP socket layer initialized [ 23.265256] Bluetooth: SCO socket layer initialized [ 24.078796] Bluetooth: hci0: read Intel version: 370810225019140f18 [ 24.078797] Bluetooth: hci0: Intel device is already patched. patch num: 18 [ 35.047963] Bluetooth: BNEP (Ethernet Emulation) ver 1.3 [ 35.047967] Bluetooth: BNEP filters: protocol multicast [ 35.047974] Bluetooth: BNEP socket layer initialized [ 85.419671] Bluetooth: RFCOMM TTY layer initialized [ 85.419675] Bluetooth: RFCOMM socket layer initialized [ 85.419722] Bluetooth: RFCOMM ver 1.11 [60146.891379] Bluetooth: hci0: read Intel version: 370810225019140f00 [60147.826024] Bluetooth: hci0: Intel Bluetooth firmware file: intel/ibt-hw-37.8.10-fw-22.50.19.14.f.bseq [60148.097374] Bluetooth: hci0: Intel firmware patch completed and activated [60151.506132] Bluetooth: hci0: command 0x0c56 tx timeout Mostrar un valor relacionado con la salida del comando lspci(8) lspci |grep VGA00:02.0 VGA compatible controller: Intel Corporation Device 591b (rev 04) Fuentes Ediciones ENI - LPI I Tercera edici\u00f3n IBM Knowledge Center The Linux Documentation Project ~ TLDP IBM Knowledge Center manpages: find(1) , locate(1) , updatedb(1) , whereis(1) , whatis(1) , apropos(1) , ln(1) , ls(1) , help if","title":"Introducci\u00f3n"},{"location":"sistemas/linux/bash/#introduccion","text":"","title":"Introducci\u00f3n"},{"location":"sistemas/linux/bash/#que-es-bash","text":"Bash es un int\u00e9rprete de comandos tambi\u00e9n conocido en ingl\u00e9s como una \u00ab shell \u00bb desarrollada el 8 de junio de 1989 por Brian Fox en el lenguaje C como alternativa y mejora de SH ( Bourne Shell ). Hoy en d\u00eda es multiplataforma ya que puede correr tanto en Linux como en Mac OS X (de hecho es shell por defecto), en Windows mediante Cygwin o mediante la instalaci\u00f3n oficial desde su apartado de a\u00f1adir nuevas caracter\u00edsticas de software. Actualmente existen multitudes de I.C pero mencionaremos las m\u00e1s destacadas como: csh : C Shell creada por Bill Joy, 1978 tcsh : TENEX C Shell desarrollada por Ken Greer, 1981 fish : Shell interactiva liberada el 13 de febrero de 2005 por Axel Liljencrantz zsh : Z Shell elaborada por Paul Falstad en 1990 ksh : KornShell creada por David Korn en 1983 Cada una de ellas contiene ciertos matices a la hora de desarrollar scripts que son un serie de ficheros que suelen contener comandos e intrucciones adicionales para que se puedan ejecutar sin tener que escribir grandes bloques de comandos, variables\u2026","title":"\u00bfQu\u00e9 es Bash?"},{"location":"sistemas/linux/bash/#trabajando-con-bash","text":"","title":"Trabajando con Bash"},{"location":"sistemas/linux/bash/#directorios-y-archivos","text":"En este apartado veremos como trabajar con los directorios dentro del sistema. Tenemos que tener en cuenta, de que la arquitectura estandar del sistema de ficheros en Linux (FHS) est\u00e1 organizada en modo de \u00e1rbol. Esto quiere decir que todo cuelga de un directorio ra\u00edz llamado (/), del que cuelga el resto de ellos. Nota Comentaremos los directorios m\u00e1s b\u00e1sicos y relevantes para este art\u00edculo, ya que debe dedic\u00e1rsele un post solamente para explicar qu\u00e9 funciones realiza cada directorio del sistema.** El directorio d\u00f3nde por defecto se generan las carpetas para los nuevos usuarios del sistema se encuentra ubicado en /home . Por defecto, nuestra shell nos sit\u00faa en el directorio principal de nuestro usuario, con lo que no tendremos que desplazarnos a niveles superiores dentro del sistema de archivos.","title":"Directorios y archivos"},{"location":"sistemas/linux/bash/#archivos-ocultos","text":"Los archivos ocultos se representan por llevar un . como prefijo al nombre del archivo o directorio y no aparecer\u00e1n listados con ning\u00fan comando por defecto. No necesita ning\u00fan tipo de modificador adicional para generarlos o para leerlos.","title":"Archivos ocultos"},{"location":"sistemas/linux/bash/#rutas-absolutas-y-relativas","text":"Las rutas absolutas son aquellas que contienen la direcci\u00f3n completa dentro de la jerarqu\u00eda del sistema de archivos. /home/sincorchetes/Videos/Echemosunbitstazo/capitulo1.ogg Mientras que las rutas relativas, solo contienen una direcci\u00f3n breve que se muestra desde la propia carpeta. Imaginemos que estamos en el directorio /home/sincorchetes/ y queremos llegar hasta el capitulo1.ogg . Para ello tendr\u00edamos que apuntar de la siguiente manera: Echemosunbitstazo/capitulo1.ogg \u00f3 bien ./Echemosunbitstazo/capitulo1.ogg","title":"Rutas absolutas y relativas"},{"location":"sistemas/linux/bash/#escalado-entre-directorios","text":"Nosotros podemos aprovecharnos de algunos \u00abalias\u00bb que nos provee la shell para agilizar la gesti\u00f3n o administraci\u00f3n de directorios haciendo uso de las rutas relativas. Estos son algunos trucos: . : Significa, el directorio actual. ls . devuelve una salida en la que mostrar\u00e1 todos los directorios y archivos en el directorio actual .. : Sube un nivel superior, ls .. mostrar\u00e1 los directorios y archivos del directorio padre.","title":"Escalado entre directorios"},{"location":"sistemas/linux/bash/#obtener-la-ruta-del-directorio-actual","text":"Si queremos saber en qu\u00e9 directorio nos encontramos actualmente, bastar\u00e1 con ejecutar el comando: $ pwd pwd(1) proviene del ingl\u00e9s \u00abprint name of current/working directory\u00bb, imprimir el nombre del directorio actual.","title":"Obtener la ruta del directorio actual"},{"location":"sistemas/linux/bash/#creando-un-directorio","text":"Con el siguiente comando generamos un directorio nuevo sin ning\u00fan tipo de contenido. Existe una sintaxis para crear directorios. No se puede empezar por caracteres especiales, aunque, dentro de los caracteres especiales se puede utilizar el espacio, pero se puede utilizar n\u00fameros, may\u00fasculas o min\u00fasculas. $ mkdir nombre_directorio Nota En caso de que queramos crear un subdirectorio sin existir primero el directorio padre, nos dar\u00e1 error si lo ejecutamos tal cual. Para ello, deberemos aplicar la opci\u00f3n -p .","title":"Creando un directorio"},{"location":"sistemas/linux/bash/#desplazarnos-entre-directorios","text":"Para poder desplazarnos entre directorios tenemos dos formas de hacerlo, mediante el comando UNIX por excelencia cd(1) o pushd(1) y popd(1) .","title":"Desplazarnos entre directorios"},{"location":"sistemas/linux/bash/#desplazandonos-con-cd","text":"Simplemente deberemos ejecutar el comando y la ruta ya sea relativa o absoluta a la que queramos acceder como en los siguientes ejemplos: Situ\u00e1ndonos en el directorio ra\u00edz del sistema: cd / Subiendo un nivel del directorio actual: cd .. Accediendo a /usr/local/share : cd /usr/local/share","title":"Desplaz\u00e1ndonos con cd"},{"location":"sistemas/linux/bash/#desplazandonos-mediante-pushd-y-popd","text":"Uno de estos comandos tienen la ventaja de almacenar en la sesi\u00f3n de bash(1) actual el directorio y adem\u00e1s, nos ubica en \u00e9l como es el caso de pushd(1) . Mientras que popd(1) , nos permite volver hacia atr\u00e1s en caso de no querer seguir estando en \u00e9l. Movi\u00e9ndonos al directorio ra\u00edz: $ pushd .themes/ ~/.themes ~ $ pwd /home/sincorchetes/.themes Volviendo hacia atr\u00e1s: $ popd popd ~ $ pwd /home/sincorchetes Estos comandos tienen algunas caracter\u00edsticas especiales que podemos consultarlas en el manual de cada uno de ellos.","title":"Desplaz\u00e1ndonos mediante pushd y popd"},{"location":"sistemas/linux/bash/#renombrando-archivos-y-directorios","text":"Para cambiar de nombre, solo ser\u00e1 necesario ejecutar el comando mv(1) junto con el directorio que queramos cambiar y el directorio con nuevo nombre. Se pueden emplear rutas relativas, absolutas o una combinaci\u00f3n de ambas: mv dir dir_nuevo_nombre mv dir /home/sincorchetes/nuevo_nombre mv /home/sincorchetes/dir /home/sincorchetes/nuevo_nombre Nota Hay que tener cuidado con utilizar mv(1) porque tambi\u00e9n sirve para mover directorios.**","title":"Renombrando archivos y directorios"},{"location":"sistemas/linux/bash/#moviendo-archivos-y-directorios","text":"Para desplazar directorios o archivos, tan solo tendremos que hacer uso de nuevo del comando mv(1) . mv archivo.ogg /home/sincorchetes/Videos/Echemosunbitstazo mv archivo.ogg Videos/Echemosunbitstazo mv /home/sincorchetes/archivo.ogg Videos/Echemosunbitstazo Tambi\u00e9n se puede aplicar un renombre m\u00e1s traslado: mv archivo.ogg /home/sincorchetes/Videos/Echemosunbitstazo/nuevo_nombre.ogg mv archivo.ogg Videos/Echemosunbitstazo/nuevo_nombre.ogg mv /home/sincorchetes/archivo.ogg Videos/Echemosunbitstazo mv /home/sincorchetes/archivo.ogg /home/sincorchetes/Videos/Echemosunbitstazo","title":"Moviendo archivos y directorios"},{"location":"sistemas/linux/bash/#copiando-archivos-y-directorios","text":"En el caso de copiar archivos, tenemos el comando cp(1) . Tambi\u00e9n puede aplicarse el uso de rutas absolutas, relativas o un conjunto de las mismas. cp archivo directorio_a_copiar Es importante destacar, que para copiar un directorio completo a pesar de que est\u00e9 vacio. Hagamos uso del modificador -r o -R ( recursivo ) Tambi\u00e9n dispone de un modo interactivo utilizando el modificador -i","title":"Copiando archivos y directorios"},{"location":"sistemas/linux/bash/#listar-archivos-y-directorios","text":"El comando por excelencia en estos casos es ls(1) Nos permite listar con multitudes de opciones si utilizamos los modificadores. Listar todos los archivos incluyendo los ocultos con la informaci\u00f3n que muestra ls -l : ls -al Mostar el nombre de todos los archivos incluyendo la representaci\u00f3n del espacio como caracter escapado: ls -b Mostrar el nombre de todos los archivos en una sola columna: ls -w 1","title":"Listar archivos y directorios"},{"location":"sistemas/linux/bash/#tipos-de-archivo","text":"En contra posici\u00f3n de sistemas como Windows, en Linux se puede tener un archivo sin ning\u00fan tipo de extensi\u00f3n. El sistema se encarga de averiguar que tipo de archivo es y abrirlo con la aplicaci\u00f3n correspondiente. Si queremos saber alg\u00fan d\u00eda si nos han enviado un ejecutable o un audio realmente, haremos uso del comando file(1)","title":"Tipos de archivo"},{"location":"sistemas/linux/bash/#crear-un-fichero-vacio","text":"Aunque la aut\u00e9ntica utilidad del comando touch(1) es modificar la fecha y hora de los archivos. Tambi\u00e9n se puede utilizar para crear un fichero vac\u00edo y a\u00f1adir texto posteriormente. touch fichero_nuevo","title":"Crear un fichero vac\u00edo"},{"location":"sistemas/linux/bash/#mostrando-informacion-de-un-fichero","text":"Si queremos leer un archivo de texto plano como la configuraci\u00f3n de un servidor Apache, haremos uso del comando cat(1) . cat /etc/profile Salida truncada: # /etc/profile # System wide environment and startup programs, for login setup # Functions and aliases go in /etc/bashrc # It's NOT a good idea to change this file unless you know what you # are doing. It's much better to create a custom.sh shell script in # /etc/profile.d/ to make custom changes to your environment, as this # will prevent the need for merging in future updates. pathmunge () { case \":${PATH}:\" in *:\"$1\":*) ;; *) if [ \"$2\" = \"after\" ] ; then PATH=$PATH:$1 else PATH=$1:$PATH fi esac }","title":"Mostrando informaci\u00f3n de un fichero"},{"location":"sistemas/linux/bash/#trabajando-con-texto","text":"","title":"Trabajando con texto"},{"location":"sistemas/linux/bash/#mostrar-o-redireccionar-texto","text":"Bash nos permite mostrar una frase, un texto que queramos gracias al comando echo(1) . echo \"\u00a1No nos perderemos los nuevos art\u00edculos de Echemosunbitstazo!\" Tambi\u00e9n podemos redirigir el texto a un archivo nuevo echo \"\u00a1No nos perderemos los nuevos art\u00edculos de Echemosunbitstazo!\" > /home/sincorchetes/Documentos/archivo_nuevo A\u00f1adir informaci\u00f3n a un archivo ya existente echo \"\u00a1No te pierdas \u00e9l pr\u00f3ximo d\u00eda otro cap\u00edtulo m\u00e1s sobre Bash en echemosunbitstazo.es\" >> /home/sincorchetes/Documento/existente","title":"Mostrar o redireccionar texto"},{"location":"sistemas/linux/bash/#crear-un-archivo-y-anadir-texto-directamente","text":"Podemos hacer uso del comando cat(1) para finalizar la edici\u00f3n, tendremos que finalizarla pulsando la combinaci\u00f3n de teclas CTRL+D y para ello de la siguiente manera: cat >fichero_de_ejemplo Esto es un ejemplo.","title":"Crear un archivo y a\u00f1adir texto directamente"},{"location":"sistemas/linux/bash/#copias-de-seguridad","text":"El comando por excelencia para elaborar copias de seguridad en Linux es haciendo uso del comando tar(1)","title":"Copias de seguridad"},{"location":"sistemas/linux/bash/#elaborando-copias-de-seguridad","text":"","title":"Elaborando copias de seguridad"},{"location":"sistemas/linux/bash/#elaborando-una-copia-de-un-directorio","text":"tar cfv copia_seguridad.tar dir1 dir2 archivo1 archivo2...","title":"Elaborando una copia de un directorio"},{"location":"sistemas/linux/bash/#comprimir-con-bzip2","text":"tar cfvj copia_Seguridad.tar.bz2 dir1 dir2 arch1 arch2...","title":"Comprimir con bzip2"},{"location":"sistemas/linux/bash/#utilizar-compresion-gzip","text":"tar cfvz copia_seguridad.tar.gz dir1 dir2 arch1 arch2...","title":"Utilizar compresi\u00f3n gzip"},{"location":"sistemas/linux/bash/#crear-una-copia-de-seguridad-con-formato-xz","text":"tar cfvJ copia_seguridad.tar.xz dir1 dir2 arch1 arch2...","title":"Crear una copia de seguridad con formato xz"},{"location":"sistemas/linux/bash/#descomprimiendo-copias-de-seguridad","text":"A la hora de descomprimir las copias de seguridad no tenemos que declarar el tipo de formato en el que est\u00e1 comprimido, con lo que ganamos m\u00e1s tiempo para dedicarlo a otras cosas.","title":"Descomprimiendo copias de seguridad"},{"location":"sistemas/linux/bash/#descomprimir-una-copia-de-seguridad","text":"tar xfv copia_seguridad.tar","title":"Descomprimir una copia de seguridad"},{"location":"sistemas/linux/bash/#comando-grep","text":"Este es uno de los comandos m\u00e1s esencial de Bash, nos permite mostrar coincidencias en archivos en base a la cadena de caracteres que nosotr@s le pasemos, en otras palabras, si queremos buscar una palabra en un archivo de texto, grep(1) es nuestro comando.","title":"Comando grep"},{"location":"sistemas/linux/bash/#sintaxis-y-ejemplos","text":"Acorde con las indicaciones que nos proporciona la todopoderosa biblia de los comandos, man(1) estos son 3 ejemplos que nos da man 1 grep . grep [OPCIONES] PATR\u00d3N [FICHERO...] grep [OPCIONES] -e PATR\u00d3N ... [FICHERO...] grep [OPCIONES] -f FICHERO ... [FICHERO...] Tanto las opciones, como los patrones y los ficheros se pueden repetir dentro de la l\u00ednea de ejecuci\u00f3n de nuestro comando. Vamos con los ejemplos: grep -o \"Linux\" /proc/version Imprimir\u00e1 la cadena \u00abLinux\u00bb si la encuentra en el archivo, y la imprime tantas veces como la encuentre. grep -q \"Linux\" /proc/version No imprime nada, es una opci\u00f3n en la que se omite la salida, si encuentra una coincidencia con dicha palabra, devolver\u00e1 en el estado de la shell un 0. echo $? = 0 si se encontr\u00f3 y = 1 en el caso contrario. grep -H \"sda\" /proc/* 2>/dev/null Muestra en cada l\u00ednea en la que encuentre coincidencias, tambi\u00e9n el nombre del archivo y omite errores. grep -A 2 \"_this_module\" /proc/kallsyms Muestra las 2 l\u00edneas siguientes de haber encontrado la coincidencia en la o las l\u00edneas. grep -B 2 \"_this_module\" /proc/kallsyms La inversa de la anterior, en vez de mostrar las 2 l\u00edneas siguientes, muestra las dos l\u00edneas anteriores a la coincidencia. grep -C 2 \"_this_module\" /proc/kallsyms Si la A y la B hac\u00eda cada cosa por separado, con la C podemos mostrar tanto las l\u00edneas anteriores como las posteriores. En este caso muestra el resultado de las dos sentencias anteriores en una sola sentencia. grep -rA 2 \"gcc\" /proc/ 2>/dev/null Buscar\u00e1 de forma recursiva en todos los ficheros y directorios que se encuentren dentro del directorio especificado y cu\u00e1ndo obtenga una coincidencia, imprimir\u00e1 las 2 l\u00edneas anteriores a la coincidencia incluyendo el nombre del archivo en el que se encuentre. Nota El uso del par\u00e1metro -r ya incluye el par\u00e1metro -H por defecto grep -U \"note\" /bin/cp Pretendemos encontrar una coincidencia dentro de un binario, y que en caso de encontrarla, \u00e9sta nos lo diga mediante un mensaje de salida. grep -ob \"root\" /etc/passwd Nos mostrar\u00e1 las l\u00edneas en d\u00f3nde la coincidencia se haya repetido n veces dentro de un fichero especificado. grep -obrA 2 \"root\" /etc 2>/dev/null Permite efectuar lo mismo, pero se visualizar\u00e1n las 2 l\u00edneas en cada coincidencia encontrada, n\u00famero de l\u00ednea, nombre de archivo dentro de un directorio y se omitir\u00e1n los mensajes de error. grep -FrB 2 '/usr' /proc 2>/dev/null Permite utilizar caracteres especiales para la b\u00fasqueda de coincidencias. Este comando buscar\u00e1 de forma recursiva la cadena que contiene un car\u00e1cter \u00abprohibido\u00bb y mostrar\u00e1 las 2 l\u00edneas anteriores cada vez que encuentre una coincidencia. Tambi\u00e9n omitir\u00e1n los mensajes de error. grep -ErC 2 '??linux' /proc 2>/dev/null Al contrario que el anterior, aqu\u00ed utilizaremos expresiones regulares como es el caso de ?? que sustituye a un caracter por signo de interrogaci\u00f3n que no recordemos o no estemos seguro de cu\u00e1l puede ser. Esta sentencia imprimir\u00e1 las dos l\u00edneas siguientes a las coincidencias as\u00ed mismo como las 2 anteriores, los mensajes de error se omitir\u00e1n y se visualizar\u00e1 el nombre de los archivos que contengan dichas coincidencias","title":"Sintaxis y ejemplos"},{"location":"sistemas/linux/bash/#fgrep-y-egrep","text":"Pues ya los hemos dado en los dos ejemplos anteriores, aunque no lo creamos, fgrep(1) como egrep(1) son dos comandos que act\u00faan como alias. fgrep(1) equivale a grep -F egrep(1) es igual a grep -E","title":"fgrep y egrep"},{"location":"sistemas/linux/bash/#alias","text":"Los alias nos permiten reducir la longitud de una sentencia que queramos ejecutar en nuestro sistema y atajarla con una simple palabra. Por ejemplo, si queremos acceder a un directorio muy concurrido desde terminal. cd ~/Documentos/Archivos/2018/05/10/10-11/Sector/1/ficheros_importantes/Codigo054/Area_51/ No nos imaginamos en absoluto tener que teclear toda esta ruta cada vez que queramos acceder al directorio Area_51. Pues podemos generar un alias, a nivel de sistema o a nivel de nuestro usuario. A nivel de sistema, tenemos que a\u00f1adirlo en /etc/bashrc si es que queremos que ese alias tambi\u00e9n lo tengan el resto de usuarios o si solo lo queremos para el nuestro, en ese caso, ~/.bashrc es el que debemos tocar de la siguiente manera: alias nombre_alias='cd ~/Documentos/Archivos/2018/05/10/10-11/Sector/1/ficheros_importantes/Codigo054/Area_51/' Posteriormente aplicamos los cambios: source /etc/bashrc o si es a nivel usuario: source ~/.bashrc","title":"Alias"},{"location":"sistemas/linux/bash/#enlaces","text":"Los enlaces vienen a ser lo que en Windows tenemos como \u00abAccesos directos\u00bb pero a nivel de terminal, podemos especificar un directorio o un archivo que se encuentre en un directorio X pero teniendo un acceso m\u00e1s r\u00e1pido en un directorio en el que trabajemos. Tambi\u00e9n tenemos enlaces simb\u00f3licos que son accesos que si es borrado el archivo o directorio original solo queda el enlace y por lo tanto, no funciona y no es \u00fatil, o tenemos lo que denominamos enlaces duros, en los que se conserva una copia del fichero o directorio.","title":"Enlaces"},{"location":"sistemas/linux/bash/#enlaces-simbolicos","text":"Para poderlos generar, simplemente tenemos que hacer uso del comando ln(1) con el par\u00e1metro -s de soft. ln -s /directorio_a_enlazar /directorio_donde_quiero_ver_el_enlace Por ejemplo: ln -s /usr/src ~ Nos genera un enlace simb\u00f3lico hacia el directorio /usr/src de nuestro /home . \u00bfC\u00f3mo averiguar si dispongo del enlace simb\u00f3lico? Cuando hacemos un ls(1) para listar documentos y directorios, veremos en una de las l\u00edneas de salida un dato similar: lrwxrwxrwx. 1 sincorchetes sincorchetes 9 May 20 17:37 src -> /usr/src/ \u00abl\u00bb al principio de esta entrada identifica un enlace simb\u00f3lico. src -> /usrc/src : Nos dice hacia d\u00f3nde apunta.","title":"Enlaces simb\u00f3licos"},{"location":"sistemas/linux/bash/#enlaces-duros","text":"Los enlaces duros permiten crear \u00abuna copia\u00bb de lo enlazado, de tal forma, que si se destruye el archivo o directorio original cont\u00ednua funcionando. ln /directorio_a_enlazar /directorio_donde_quiero_ver_el_enlace De hecho, si hacemos un ls(1) , no veremos a\u00f1adida una l en los permisos o en acceso tipo src -> /usr/src .","title":"Enlaces duros"},{"location":"sistemas/linux/bash/#busqueda-de-archivos","text":"find(1) a diferencia de locate(1) es un comando que busca a tiempo real y tiene much\u00edsimas funcionalidades a\u00f1adidas como filtrar por nombre, tipo de ejecutable, fecha, hora\u2026. e incluso, eliminar los ficheros que hemos querido encontrar, mientras que locate(1) trabaja junto con una base de datos generada por updatedb(8) reduciendo dr\u00e1sticamente la actualizaci\u00f3n puntera de la ubicaci\u00f3n de los ficheros y directorios adem\u00e1s de no tener la afinidad que posee find(1) .","title":"B\u00fasqueda de archivos"},{"location":"sistemas/linux/bash/#comdando-find","text":"En este art\u00edculo vamos a guiarnos m\u00e1s por los ejemplos que por explicar la sintaxis o los par\u00e1metros de uno en uno. Encontrar todos aquellos ficheros y directorios que se encuentren en el directorio /etc , y que aquellos directorios a los que no no podamos acceder a su contenido, no nos muestre el error de permisos. find /etc 2>/dev/null Encontrar todos aquellos archivos en /var/ cuya extensi\u00f3n sea .log, y que por supuesto, no muestre aquellos directorios que requieran permisos para su acceso. find /var -name \"*.log\" 2>/dev/null Mostrar todos los directorios de nuestro /home sin contar los archivos find ~ -type d Encontrar archivos vac\u00edos en nuestro /home y eliminarlos todos find ~ -empty -type f -exec rm -rf {} \\; Encontrar ficheros con extensi\u00f3n .log y copiarlos en una carpeta dentro de nuestro home con permisos de superusuario sudo find /var -name \".log\" -exec cp {} /home/sincorchetes/LOGS \\; Buscando archivos cuya fecha de modificaci\u00f3n sea de hace un minuto en nuestro /home find ~ -cmin 1 Ficheros que han sido accedidos hace 10 minutos find ~ -amin 10 Visualizar archivos que contengan .log de extensi\u00f3n, contengan permisos 644 sudo find /var -name \"*.log\" -perm 644 Ver archivos que pesen igual o redondeando den 2GB en nuestro directorio find ~ -size 2G Buscar directorios que contengan nuestro nombre de usuario, con permisos 777. find / -user sincorchetes -type d -perm 777 Mostrar todos los archivos o directorios simb\u00f3licos que se encuentren en el directorio /dev y mostrarlo como si ejcut\u00e1semos un ls(1) sudo find /dev -type l -ls Listando aquellos archivos de nuestro /home cuya extensi\u00f3n contenga \u00ab * .avi\u00bb y sean iguales o superiores a 1G find ~ -name \"*.avi\" -a -size 1G Suprimiendo los .rpm que encontremos que lleguen a 10 megas sudo find /var/cache/rpm -name \"*.rpm\" -a -size 10M -exec rm -rf {} \\; Podemos seguir ejemplos del manpages de find(1) o imaginarnos lo que se nos ocurra que podamos hacer en un futuro, estos son solo peque\u00f1os ejemplos de lo que podemos hacer con esta fant\u00e1stica utilidad.","title":"Comdando find"},{"location":"sistemas/linux/bash/#comdando-locate","text":"Bien, como hemos dicho anteriormente, este comando hace uso de una base de datos que por lo general suele ubicarse en /var/lib/mlocate/mlocate.db , y su fichero de configuraci\u00f3n suele encontrarse en /etc/updatedb.conf todo depende de la distribuci\u00f3n que utilicemos. Tambi\u00e9n podemos hacer un indexado que es registrar todos los archivos y directorios que queramos y se almacenen por un cierto orden en la base de datos de locate, sin tener que hacer uso de superusuario o creando un daemon en el sistema.","title":"Comdando locate"},{"location":"sistemas/linux/bash/#regenerando-las-bases-de-datos","text":"Podemos hacer que nos indexe todo lo que contenga el sistema y que lo puedan ver tod@s l@s usuari@s. sudo updatedb O bien, podemos generar una base de datos para nosotr@s. mkdir .locateupdatedb -l 0 -U /DIR -o .locate/db_file -l 0 : Permite entre otras cosas, crear el fichero de la base de datos utilizando nuestro usuario. -U /DIR : Directorio a idnexar -o nombre_fichero : El nombre que le pondremos a la db Si queremos a\u00f1adir m\u00e1s directorios, tendremos que ejecutar el comando modificando /DIR","title":"Regenerando las bases de datos"},{"location":"sistemas/linux/bash/#buscando-archivos-o-directorios","text":"Basta con ejecutar locate nombre_archivo/nombre_dir y el comando nos arrojar\u00e1 una salida completa con las coincidencias que encuentre en la db. Sin embargo, si queremos ejecutar nuestro fichero, tendremos que especific\u00e1rselo a locate(1) locate nombre_directorio/nombre_archivo -d .locate/db_file","title":"Buscando archivos o directorios"},{"location":"sistemas/linux/bash/#visualizando-estadisticas","text":"Se pueden ver cu\u00e1ntos archivos y directorios tenemos actualmente registrados en cada db. locate -S \u00f3 locate -Sd .locate/db_file","title":"Visualizando estad\u00edsticas"},{"location":"sistemas/linux/bash/#comando-whereis","text":"Este comando nos viene de f\u00e1bula cuando queremos encontrar alg\u00fan binario, archivo fuente o incluso p\u00e1ginas de manual de man(1) , para hacerlo, este lleva una b\u00fasqueda en aquellos directorios que se encuentren declarados en la variable $PATH y $MANPATH . Estas variables las podemos encontrar en /etc/profile o en ~/.bash_profile (en nuestro caso) echo $PATH Nuestra salida: echo $PATH/usr/lib/qtchooser:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/home/sincorchetes/.composer/vendor/bin:/home/sincorchetes/.local/bin:/home/sincorchetes/bin:/home/sincorchetes/.bin/scripts Vamos a visualizar un par de ejemplos.","title":"Comando whereis"},{"location":"sistemas/linux/bash/#buscando-una-pagina-con-la-coincidencia","text":"whereis -m cat","title":"Buscando una p\u00e1gina con la coincidencia"},{"location":"sistemas/linux/bash/#encontrando-la-ubicacion-del-binario","text":"whereis -b cat","title":"Encontrando la ubicaci\u00f3n del binario"},{"location":"sistemas/linux/bash/#buscando-la-fuente-de-un-kernel-de-fedora-28","text":"whereis -s 4.16.8-300.fc28.","title":"Buscando la fuente de un kernel de Fedora 28"},{"location":"sistemas/linux/bash/#comando-whatis","text":"Este comando nos permite buscar en las p\u00e1ginas de man(1) y nos devuelve una descripci\u00f3n del mismo en una sola l\u00ednea, en caso de que encuentre varios resultados, mostrar\u00e1 ambos o m\u00e1s y su categor\u00eda dentro de man(1) . whatis cat Salida: cat (1p) - concatenate and print filescat (1) - concatenate files and print on the standard output Podemos especificar un directorio diferente para que busque en otras p\u00e1ginas de man(1) pues que no tengamos instaladas en el directorio ra\u00edz o no se encuentren registradas en ~/.bash_profile whatis -M ~/.man/ cat Entre otras cosas","title":"Comando whatis"},{"location":"sistemas/linux/bash/#comando-apropos","text":"Este comando es parecido al anterior, lo que utiliza directamente mandb(1) , tambi\u00e9n permite utilizar otra ruta de directorio para los manpages\u2026etc apropos whatis Salida: whatis (1) - display one-line manual page descriptions","title":"Comando apropos"},{"location":"sistemas/linux/bash/#redireccionamiento","text":"Un redireccionamiento, como su propio nombre indica lo que hace es una redirecci\u00f3n a un determinado sitio. En nuestro caso, utilizaremos los redireccionamientos para gestionar tanto las salidas, como entradas as\u00ed como los niveles de error que de un comando o una aplicaci\u00f3n para utilizarlos en nuestro beneficio. Podemos decirle a un comando, que si tiene un error X, no lo muestre en pantalla y lo rediriga a un archivo de texto para que haga de log. Tambi\u00e9n podemos a\u00f1adir una frase, sentencias\u2026 a un archivo ya existente o en caso de que no exista que lo cree; comentar el n\u00famero de palabras que tiene un texto\u2026 y un sin fin de cosas m\u00e1s.","title":"Redireccionamiento"},{"location":"sistemas/linux/bash/#operadores-de-redireccionamiento","text":"Estos son los operadores que utilizaremos en la elaboraci\u00f3n de scripts sobre todo, cap\u00edtulo que introduciremos estos d\u00edas con las siguientes entregas. Operador Descripci\u00f3n > Redirecciona una salida hacia un archivo o comando. Si el archivo no existe, lo crea, y si existe, lo sobreescribe >> Igual que el anterior, pero si el archivo existe no lo destruye, a\u00f1ade la salida despu\u00e9s de la \u00faltima l\u00ednea < Redirecciona una entrada hacia un comando para que este emita una salida (si lo hace), puede ser la salida de un comando hacia otro, un fichero\u2026 << Redirecciona el contenido de un fichero hasta que se encuentre la palabra especificada en la redirecci\u00f3n para finalizarla","title":"Operadores de redireccionamiento"},{"location":"sistemas/linux/bash/#canales","text":"Nuestra terminal tiene una serie de canales por los que se toman la entrada, salida y errores. +\u2014\u2014-+ \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014-+\u2014\u2014\u2014\u2014-+ | Canal | Descripci\u00f3n | Ubicaci\u00f3n | +\u2014\u2014-+ \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014-+\u2014\u2014\u2014\u2014-+ | 0 | Es el canal por defecto de la entrada est\u00e1ndar | /dev/stdin | +\u2014\u2014-+ \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014-+\u2014\u2014\u2014\u2014-+ | 1 | Especifica la salida de un comando. Por ejemplo ls 2> file.txt | /dev/stdout | +\u2014\u2014-+ \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014-+\u2014\u2014\u2014\u2014-+ | 2 | Muestra la presencia de errores. Por ejemplo ls -lklk 3> error.txt | /dev/stderr | +\u2014\u2014-+ \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014-+\u2014\u2014\u2014\u2014-+","title":"Canales"},{"location":"sistemas/linux/bash/#ejemplos","text":"","title":"Ejemplos"},{"location":"sistemas/linux/bash/#almacenar-la-salida-del-comando-ls-al-en-un-fichero-listatxt","text":"ls -al > lista.txt Veremos como no se muestra nada en pantalla, pero se ha creado el archivo lista.txt","title":"Almacenar la salida del comando ls -al en un fichero lista.txt"},{"location":"sistemas/linux/bash/#mostrar-el-contenido-de-listatxt","text":"cat lista.txt total 568 drwxrwxr-x. 2 sincorchetes sincorchetes 4096 May 2 01:43 . drwx------. 55 sincorchetes sincorchetes 4096 May 2 17:10 .. -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 1 12:55 20E2MC8SVX-9423.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 1 12:55 36712GXM3C-865.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 1 12:55 4SASA426RU.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 2 01:43 5ODFPGZXOI-25637.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 2 01:43 5PYBWDCZWK.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 1 12:55 6A21WJKHWL.png Nota Recordemos que el operador > sobreescribe todo lo que haya, si queremos a\u00f1adir informaci\u00f3n nueva al archivo debemos utilizar el operador >> ls -al >> lista.txt cat lista.txt total 568 drwxrwxr-x. 2 sincorchetes sincorchetes 4096 May 2 01:43 . drwx------. 55 sincorchetes sincorchetes 4096 May 2 17:10 .. -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 1 12:55 20E2MC8SVX-9423.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 1 12:55 36712GXM3C-865.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 1 12:55 4SASA426RU.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 2 01:43 5ODFPGZXOI-25637.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 2 01:43 5PYBWDCZWK.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 1 12:55 6A21WJKHWL.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 2 01:43 6FG92BUEDM-12977.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 2 01:43 A6XZFBO1TK-18309.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 2 01:43 FBEBPAR2O9-16637.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 2 01:43 FP9EZ05Y3E-16753.png -rw-rw-r--. 1 sincorchetes sincorchetes 25277 May 1 12:55 FZRD6D42BI-875.png","title":"Mostrar el contenido de lista.txt"},{"location":"sistemas/linux/bash/#guardar-todos-los-errores-que-surjan-en-la-ejecucion-del-programa","text":"cat ks 2> error.txt","title":"Guardar todos los errores que surjan en la ejecuci\u00f3n del programa"},{"location":"sistemas/linux/bash/#no-se-mostrara-nada-en-pantalla-pero-nos-daremos-cuenta-el-error-que-nos-da-cat1-en-el-fichero-que-se-ha-creado-llamado-errortxt","text":"cat error.txt cat: jk: No such file or directory","title":"No se mostrar\u00e1 nada en pantalla, pero nos daremos cuenta el error que nos da cat(1) en el fichero que se ha creado llamado error.txt"},{"location":"sistemas/linux/bash/#mostrar-en-pantalla-tanto-la-salida-estandar-como-los-errores","text":"ls -al 2>&1 info.txt","title":"Mostrar en pantalla tanto la salida est\u00e1ndar como los errores"},{"location":"sistemas/linux/bash/#guardar-en-un-fichero-tanto-la-salida-como-los-errores","text":"ls -al 2>&1 info.txt > file.txt","title":"Guardar en un fichero tanto la salida como los errores"},{"location":"sistemas/linux/bash/#calcular-las-lineas-que-tiene-un-fichero-de-texto","text":"wc -l < file.text","title":"Calcular las l\u00edneas que tiene un fichero de texto"},{"location":"sistemas/linux/bash/#anadir-informacion-a-un-fichero-e-interrumpirlo-utilizando-una-palabra-clave-declarada-por-el-usuario","text":"cat add << EOF","title":"A\u00f1adir informaci\u00f3n a un fichero e interrumpirlo utilizando una palabra clave declarada por el usuario"},{"location":"sistemas/linux/bash/#crear-un-fichero-de-texto-utilizando-la-canal-de-entrada-y-utilizando-una-palabra-clave-para-finalizar-la-adiccion","text":"cat > create_text.txt << EOF","title":"Crear un fichero de texto utilizando la canal de entrada y utilizando una palabra clave para finalizar la adicci\u00f3n"},{"location":"sistemas/linux/bash/#adherir-la-salida-estandar-de-multiples-textos-y-redireccionandolos-a-un-archivo","text":"cat lista.txt error.txt info.txt create_text.txt > salida_multiple","title":"Adherir la salida est\u00e1ndar de m\u00faltiples textos y redireccion\u00e1ndolos a un archivo"},{"location":"sistemas/linux/bash/#tuberias","text":"Una tuber\u00eda es una secuencia de uno o m\u00e1s comandos separados por operadores de control como | o & . Suelen utilizarse mucho junto con el comando grep(1) , egrep(1) y fgrep(1) para filtrar resultados, o el comando cut(1) para recortar la salida est\u00e1ndar, generalmente producida por comandos. Estos comandos que hemos mencionado les dedicaremos un post especial debido a la importancia de los mismos. Sobre todo cuando demos scripting m\u00e1s adelante.","title":"Tuber\u00edas"},{"location":"sistemas/linux/bash/#este-es-el-formato-de-una-tuberia-comun","text":"comando [+par\u00e1metros] | \u00f3 & [comando1]","title":"Este es el formato de una tuber\u00eda com\u00fan"},{"location":"sistemas/linux/bash/#ejemplos_1","text":"","title":"Ejemplos"},{"location":"sistemas/linux/bash/#basandonos-en-esta-estructura-de-directorios","text":". \u251c\u2500\u2500 fichero-0 \u251c\u2500\u2500 fichero-1 \u251c\u2500\u2500 fichero-10 \u251c\u2500\u2500 fichero-11 \u251c\u2500\u2500 fichero-12 \u251c\u2500\u2500 fichero-13 \u251c\u2500\u2500 fichero-14 \u251c\u2500\u2500 fichero-15 \u251c\u2500\u2500 fichero-16 \u251c\u2500\u2500 fichero-17 \u251c\u2500\u2500 fichero-18 \u251c\u2500\u2500 fichero-19 \u251c\u2500\u2500 fichero-2 \u251c\u2500\u2500 fichero-3 \u251c\u2500\u2500 fichero-4 \u251c\u2500\u2500 fichero-5 \u251c\u2500\u2500 fichero-6 \u251c\u2500\u2500 fichero-7 \u251c\u2500\u2500 fichero-8 \u2514\u2500\u2500 fichero-9","title":"Bas\u00e1ndonos en esta estructura de directorios"},{"location":"sistemas/linux/bash/#mostrar-un-valor-relacionado-con-dmesg1","text":"dmesg |grep Bluetooth [ 23.265232] Bluetooth: Core ver 2.22 [ 23.265247] Bluetooth: HCI device and connection manager initialized [ 23.265250] Bluetooth: HCI socket layer initialized [ 23.265251] Bluetooth: L2CAP socket layer initialized [ 23.265256] Bluetooth: SCO socket layer initialized [ 24.078796] Bluetooth: hci0: read Intel version: 370810225019140f18 [ 24.078797] Bluetooth: hci0: Intel device is already patched. patch num: 18 [ 35.047963] Bluetooth: BNEP (Ethernet Emulation) ver 1.3 [ 35.047967] Bluetooth: BNEP filters: protocol multicast [ 35.047974] Bluetooth: BNEP socket layer initialized [ 85.419671] Bluetooth: RFCOMM TTY layer initialized [ 85.419675] Bluetooth: RFCOMM socket layer initialized [ 85.419722] Bluetooth: RFCOMM ver 1.11 [60146.891379] Bluetooth: hci0: read Intel version: 370810225019140f00 [60147.826024] Bluetooth: hci0: Intel Bluetooth firmware file: intel/ibt-hw-37.8.10-fw-22.50.19.14.f.bseq [60148.097374] Bluetooth: hci0: Intel firmware patch completed and activated [60151.506132] Bluetooth: hci0: command 0x0c56 tx timeout","title":"Mostrar un valor relacionado con dmesg(1)"},{"location":"sistemas/linux/bash/#mostrar-un-valor-relacionado-con-la-salida-del-comando-lspci8","text":"lspci |grep VGA00:02.0 VGA compatible controller: Intel Corporation Device 591b (rev 04)","title":"Mostrar un valor relacionado con la salida del comando lspci(8)"},{"location":"sistemas/linux/bash/#fuentes","text":"Ediciones ENI - LPI I Tercera edici\u00f3n IBM Knowledge Center The Linux Documentation Project ~ TLDP IBM Knowledge Center manpages: find(1) , locate(1) , updatedb(1) , whereis(1) , whatis(1) , apropos(1) , ln(1) , ls(1) , help if","title":"Fuentes"},{"location":"sistemas/linux/bash/bash-scripting/","text":"Aprendiendo scripting \u00bfC\u00f3mo aprender? Realmente cuando hablamos de desarrollo se traduce literalmente en por mucho que sepas, siempre aprender\u00e1s . Porque se te olvida un done en bucle, fi en un condicional, una variable mal declarada\u2026etc, esto es as\u00ed y hay que sumarle que debemos estar constantemente mirando otros scripts elaborados por terceras personas, practicar siempre que podamos porque esto nos ayudar\u00e1 a fianzar m\u00e1s los conocimientos que hemos aprendido aqu\u00ed. Esto no es como memorizar un texto, haces examen y \u00a1ciao! \u00a1Implican muchas cosas! Como comprender conceptos abstractos, saber qu\u00e9 implica la ejecuci\u00f3n de determinados comandos, conocer el sistema\u2026etc Pero no tenemos de que preocuparnos, todo es posible. Ahora le daremos paso a las variables y arrays Variables Las variables como hemos visto en su d\u00eda en matem\u00e1ticas, es un conjunto de caracteres alfanum\u00e9ricos (peras, melones, X:sub:1, abc:sub:12) cuyo valor asignado var\u00eda o est\u00e1 sujeto a alg\u00fan cambio. En Bash las variables las podemos declarar directamente o mediante el uso del comando declare(1) que lo hablaremos m\u00e1s adelante ya que permite generar diferentes tipos de Restricciones y usos Por norma general, las variables en may\u00fasculas se reservan para temas de administraci\u00f3n y gesti\u00f3n del sistema. Si utilizamos el comando env(1) , veremos toda la ristra de variables de entorno que tenemos: LANG=en_US.utf8 GDM_LANG=en_US.utf8 HISTCONTROL=ignoredups DISPLAY=:0.0 GUESTFISH_RESTORE=\\e[0m HOSTNAME=set0.lan GTK_OVERLAY_SCROLLING=0 COLORTERM=truecolor GUESTFISH_INIT=\\e[1;34m IMSETTINGS_INTEGRATE_DESKTOP=yes KDEDIRS=/usr XDG_VTNR=1 SSH_AUTH_SOCK=/home/sincorchetes/.cache/keyring-RYPSKZ/ssh XDG_SESSION_ID=2 XDG_GREETER_DATA_DIR=/var/lib/lightdm-data/sincorchetes USER=sincorchetes GUESTFISH_PS1=\\[\\e[1;32m\\]><fs>\\[\\e[0;31m\\] DESKTOP_SESSION=mate PT7HOME=/opt/pt [SALIDA ACORTADA] No pueden empezar con n\u00fameros, signos @#~\u00bd!, deber\u00e1n comenzar con al menos una letra y luego si es posible usar n\u00fameros: Ejemplo de errores: @hola=23 h!ola=23 #o#=23 3hola=23 Correcto: hola=23 h014=23 hola=\"Esto es un valor\" Declarando variables con texto Si queremos a\u00f1adir valores con cadenas a las variables, es muy importante comprender estas dos diferencias. Podemos declarar ambas con doble comillado \u00ab\u00bb, \u00f3, comillado simple \u201c\u201d. El problema erradica, en que no son lo mismo, el (\u00ab\u00bb) permite mostrar el contenido de una variable dentro de un texto, mientras que (\u201c\u201d) interpreta el texto tal cual. $hw = \"Hello World\" echo \"$hw for everyone\" Hello World for everyone $hw = \"Hello World\" echo '$hw for everyone' $hw for everyone Visualizando las variables de entorno/sistema Tenemos a nuestra disposici\u00f3n el comando env(1) que nos ense\u00f1a todas las variables de entorno y de sistema que debemos respetar, vamos a comentar algunas de ellas. Nombre variable Descripci\u00f3n HOME Ruta de trabajo del usuario actual PATH Lista de directorios d\u00f3nde el shell buscar\u00e1 ejecutables (binarios, scripts\u2026) PS1 Prompt String 1, muestra el caracter, texto previo a la introducci\u00f3n de los comandos. [sincorchetes@set0 ~]$ IFS Internal Field Separator, separadores como tabulaci\u00f3n, espacio, salto de l\u00ednea, si est\u00e1 en blanco, se usan espacios MAIL Ruta y archivo de los mensajes del (la) usuari@ que tienen que ver con el e-mail SHELL Ruta del shell del usuario LANG Idioma y codificaci\u00f3n USER Variable que identifica al/la usuari@ actual LOGNAME Nombre del login utilizado en inicio de sesi\u00f3n, por lo general suele ser el mismo que $USER HISTFILE Ruta de archivo del historial de comandos ejecutados en la shell HISTSIZE Tama\u00f1o del archivo historial de comandos ejecutados en shell OLDPWD Directorio accedido anteriormente PWD Ruta actual RANDOM Genera un n\u00famero aleatorio comprendido entre 0 y 31767 Eliminando una variable Para eliminar una variable y su contenido, bastar\u00e1 con ejecutar el comando: unset variable Variable con acceso solo lectura Se puede establecer una variable cuyo contenido no cambia como si fuese una constante haciendo uso del comando readonly(1) readonly ejemplo=2 Visualizando el contenido de una variable Para visualizar una variable, bastar\u00e1 con utilizar el comando echo(1) . ejemplo=\"Hola que tal\" echo $ejemplo Convertir una variable en global En desarrollo, se puede entender variable global como aquella que es accesible en todo momento por el programa a pesar de encontrarse en una funci\u00f3n de manera cerrada, y una variable local aquella que solo se produce una vez y posteriormente, una vez efectuada la ejecuci\u00f3n del bloque de c\u00f3digo acaba por auto-suprimirse como un mensaje del inspector Gadget. Para poder hacerla accesible deberemos hacer uso del comando source(1) . Si tenemos un archivo con variables y queremos cargarlas, bastar\u00e1 con ejecutar: source ruta_script Y podremos acceder desde d\u00f3nde queramos desde la shell d\u00f3nde hayamos ejecutado dicho comando. Utilizando variable para ayudarnos con los comandos Por supuest\u00edsimo que podemos hacer uso de las variables para obtener una automatizaci\u00f3n. ejemplo=:code:`pwd` ls $ejemplo Nota No obstante, si tratamos de copiar archivos, directorios cuyas rutas se encuentran en variables, puede dar error, y es porque interpreta uno de los dos el nombre tal cual dando error. Para ello tendremos que utilizar el {}. ruta_archivo_origen = /etc/group ruta_archivo_destino = /home/$USER/Documentos cp ${ruta_archivo_origen} ${ruta_archivo_destino} Sustituir cadenas en variables Podemos sustituir los valores que se encuentran en las variables sin tener que reasignarlas, solo utilizando llaves. Si la variable est\u00e1 vac\u00eda o no existe, el texto se autoasignar\u00e1. Probaremos con una variable cualquiera que al hacerle un echo(1) no mostrar\u00e1 valor alguno. Si est\u00e1 definida, mostrar\u00e1 el valor de la variable. echo $ejemplo Posteriormente efectuamos: echo ${ejemplo:-Est\u00e1 aprobado}Est\u00e1 aprobado Pero el valor y la variable desaparecen. Si est\u00e1 definida, mostrar\u00e1 el valor de la variable. Si queremos que perduren, haremos los siguiente: echo ${ejemplo:=Est\u00e1 aprobado}Est\u00e1 aprobadoecho $ejemploEst\u00e1 aprobado Por otro lado, si nos encontramos con una variable previamente declarada, pero no vac\u00eda, se puede sustituir utilizando el \u00ab:+\u00bb, no es un cambio permanente. echo ${PS1:+[${USER}@:code:`pwd`]} Y por \u00faltimo, si tenemos una variable que est\u00e1 vac\u00eda o que no exista, se interrumpe el script y mostrar\u00e1 el mensaje de error que le asignemos, si existe, devolver\u00e1 el contenido de la variable: echo ${dsfsd:?[${USER}@:code:`pwd`]}bash: dsfsd: [sincorchetes@/home/sincorchetes] Obtener el valor de una cadena Si queremos obtener el n\u00famero de caracteres que constituyen el valor de una variable podemos hacerlo: ejemplo=\"Hola que tal\"echo ${#ejemplo}12 Operaciones aritm\u00e9ticas con variables Se pueden hacer operaciones aritm\u00e9ticas con variables si primeramente declaramos el tipo de dato a trav\u00e9s del comando typeset(1) . Operador Funci\u00f3n + - * / Sumar, restar, multiplicar, dividir % Nos da el m\u00f3dulo de la operaci\u00f3n < > <= => Establece comparaciones, 1=True; 0=False == Igual que != Diferente de Mostrar el resultado de la siguiente suma typeset -i aa=1200+2200echo $a3200 \u00bfSon iguales estos resultados? typeset -i resultadoa=1200b=1200resultado=${a}==${b}echo $resultado1 Podemos encontrar muchos m\u00e1s operadores help let . Variables especiales No se pueden utilizar, suelen ser de solo lectura y notifican de algo ocurrido por lo general. Saber si un comando se ejecut\u00f3 con \u00e9xito o nop echo $? Nos devolver\u00e1 un c\u00f3digo al haber ejecutado un comando. Por lo general, 0 es que se ejecut\u00f3 con \u00e9xito, 1 fall\u00f3 la ejecuci\u00f3n del comando, 127 no encontr\u00f3 el ejecutable. Seg\u00fan el comando, ejecutable, binario\u2026 devuelve un c\u00f3digo de error distinto. Obtener el PID del shell actual El PID proviene de Process ID, es el n\u00famero que identifica un proceso, ( m\u00e1s adelante explicaremos qu\u00e9 son los procesos ) de la shell actual echo $$25382 PID del \u00faltimo proceso iniciado en segundo plano Si hemos ejecutado un binario y/o ejecutable en segundo plano, nos chivar\u00e1 el n\u00famero de identificaci\u00f3n de proceso. echo $!25982 Opciones del shell Son las caracter\u00edsticas que tiene habilitadas la shell por defecto, en Fedora muestran las siguientes: echo $-himBHs El significado lo podemos encontrar bash(1) , secci\u00f3n SHELL BUILTIN COMMANDS : h: Recuerda la ubicaci\u00f3n de los comandos a medida de que se buscan para ejecutarse. Activado por defecto. i: Interactiva m: Modo monitor. El control de trabajos est\u00e1 activado. B: El int\u00e9rprete de comandos permite una expansi\u00f3n del uso de las llaves y las varibles. Por ejemplo, echo a{d,c,d,b}e devolver\u00e1 ade ace abe . Viene habilitado por defecto. H: Permite sustituir el estilo del hist\u00f3rico de comandos, se habilita por defecto pero debe tener la caracter\u00edstica de interactivo (i). Arrays (vectores) Los vectores, o tambi\u00e9n conocidos como arrays permiten almacenar un conjunto de datos en un solo espacio de la memoria. En otros lenguajes como PHP pueden anidarse y confinar m\u00faltiples conjuntos de datos dentro de un solo espacio de memoria creando arrays multidimensionales. Sin embargo, en Bash, esto no es posible, ya que solo podremos crear vectores de una sola dimensi\u00f3n y sin un \u00edndice personalizado mediante su creaci\u00f3n. a menos que declaremos la posici\u00f3n como el resultado de una variable ( pagina1=1 = array[pagina1]=\"Valor\" ). El \u00edndice en este caso, se identifica mediante un n\u00famero comprendido entre 0-(n) d\u00f3nde \u00abn\u00bb es el n\u00famero de datos que hemos a\u00f1adido cuando declaramos un *array*. $array = (a b c d ) Datos almacenados en cada una de las posiciones ^ \\_|_|_|_/ /*----------------------*\\ | ||| / ==> a = 1234 \\ Nombre Datos / ==> b = \"Hello world\" \\ del de -------* ==> c = :code:`pwd` * Array Declarados \\ ==> d = $resultado / \\*-----------------------*/ En este caso, para acceder al valor de cada letra correspondiente, tendremos que hacer uso de: $nombre_array + [ n ]. D\u00f3nde n es la posici\u00f3n del dato que queremos obtener. Ejemplo: echo $array[0]||----> Obtendremos: 1234echo $array[1]||----> Obtendremos: Hello worldecho $array[2]||----> Obtendremos: /home/sincorchetes (en mi caso) \u00bfC\u00f3mo obtener la longitud de un array ? B\u00e1sicamente, de la siguiente forma: echo ${#array[*]} Nos tendr\u00e1 que dar como resultado \u00ab4\u00bb, que son los valores declarados. (a= 1234, b = \u00abHello world\u00bb\u2026) \u00bfC\u00f3mo obtener todos los valores de un array ? Sustituiremos el n\u00famero de la posici\u00f3n por una @. echo ${array[@]} \u00bfC\u00f3mo a\u00f1adir un nuevo valor a un \u00edndice espec\u00edfico de un array declarado? Bastar\u00e1 con mencionar el n\u00famero de posici\u00f3n que queremos asignar el nuevo dato: $array[10]=\"Hola que tal\" Visualizar el n\u00famero de posiciones ocupadas dentro de un array Simplemente si queremos ver que posiciones est\u00e1n ocupadas para utilizar las que est\u00e9n libres: echo ${!array[*]} Ver cu\u00e1nto tama\u00f1o contiene de largo una posici\u00f3n Para comprobar el tama\u00f1o, simplemente hacemos: echo ${#array[1]} \u00bfC\u00f3mo a\u00f1adir un nuevo valor sin declarar posici\u00f3n en un array ? Simplemente si queremos a\u00f1adir un dato nuevo sin especificar un \u00edndice en cuesti\u00f3n. array+=(nuevo_valor) Eliminar una posici\u00f3n del array Utilizaremos el comando unset(1) como se ha utilizado para eliminar variables declaradas. unset array[n] Resultado de un comando que se separe como valores y que estos ocupen una posici\u00f3n dentro del array Esto quiere decir, que si asignamos un solo valor, cuyo valor sea el resultado de un comando, este generar\u00e1 una salida y todos los datos expuestos en la salida del comando se convertir\u00e1n en un valor dentro de una posici\u00f3n. Por ejemplo, si hacemos un cat /etc/group , obtendremos una salida similar a esta: root:x:0:bin:x:1:daemon:x:2:sys:x:3:adm:x:4:tty:x:5:disk:x:6:[SALIDA ACORTADA] Bien, si le decimos al array que nos almacene esta lista para luego visualizarla, podemos hacerlo. array=(`cat /etc/group`) Si hacemos un echo ${array[0]} veremos que nos saldr\u00e1 la primera l\u00ednea del documento: root:x:0: Si queremos obtener toda la lista: echo ${array[@]} Condicionales Imagin\u00e9monos que vamos a comprar el pan y resulta de que o bien no hay, o bien sale m\u00e1s caro de lo que imaginamos, o bien no es el tipo que buscamos\u2026etc, entonces tenemos que pensar \u00bfQu\u00e9 hacer? y aqu\u00ed entra en juego el uso de los condicionales. Los condicionales son evaulaciones que aplicamos en determinados valores que obtenemos como resultado de una operaci\u00f3n anterior, bloques de c\u00f3digo que han sido ejecutados y que han devuelto alguna salida. Es decir, con el if regularemos el flujo de trabajo de nuestro sript , a\u00f1adiendo diferentes situaciones para resultados diferentes. Condicional If If permite a\u00f1adir una situaci\u00f3n diferente que en caso de que no se cumpla la condici\u00f3n, continuar\u00e1 ejecutando el resto del c\u00f3digo. Este se puede elaborar en dentro de un script ( como haremos a partir de ahora ), o bien se puede ejecutar en una sola l\u00ednea de ejecuci\u00f3n en Bash. Creamos un script d\u00f3nde a\u00f1adiremos el siguiente bloque de c\u00f3digo. estado=\"Cerrado\" parque=$estado if [ $parque == \"Cerrado\"] then echo \"Est\u00e1 cerrado\" fi Si ejecutamos el c\u00f3digo de arriba, nos devolver\u00e1 un mensaje de que se encuentra cerrado. Sin embargo, si cambiamos \u00abCerrado\u00bb => \u00abAbierto\u00bb. La cosa cambia, ya que no producir\u00e1 una salida. estado=\"Cerrado\" parque=$estado if [ $parque == \"Cerrado\"] then echo \"Est\u00e1 cerrado\" fi \u00bfPor qu\u00e9 sucede esto? Porque como la condici\u00f3n no se cumple, ya que caracter-caracter se va comprobando que sean correctos dentro de la condici\u00f3n, en cuanto sea alguno de ellos distinto, se prosigue con el resto del c\u00f3digo sin hacer nada al respecto. Si queremos decirle que ejecute otra instrucci\u00f3n de c\u00f3digo utilizaremos la sentencia else. estado=\"Cerrado\" parque=$estado if [ $parque == \"Cerrado\"] then echo \"Est\u00e1 cerrado\" else echo \"Est\u00e1 abierto\" fi Pero\u2026 \u00bfY si queremos a\u00f1adir m\u00e1s condiciones? Un parque puede estar abierto, cerrado, en obras entre otras cosas. Para eso tenemos la sentencia if-elif. Condicional If-elif estado=\"Abierto\" parque=$estado if [ $parque == \"Cerrado\"] then echo \"Est\u00e1 cerrado\" elif [ $parque == \"Abierto\" ] then echo \"Est\u00e1 abierto\" fi M\u00e1s estados\u2026 estado=\"Obras\" parque=$estado if [ $parque == \"Cerrado\"] then echo \"Est\u00e1 cerrado\" elif [ $parque == \"Abierto\" ] then echo \"Est\u00e1 abierto\" elif [ $parque == \"Obras\" ] then echo \"Est\u00e1 en obras\" else echo \"Consulte al ayuntamiento de su ciudad\" fi Condicional en una simple linea Se pueden escribir condicionales en una sola l\u00ednea, acortando todo el bloque de c\u00f3digo en una sola instrucci\u00f3n reduciendo el consumo de memoria y de procesamiento, pero aumentando la complejidad de lectura para el desarrollador. if [ $parque == \"Cerrado\" ]; then echo \"Est\u00e1 cerrado\" ; elif [ $parque == \"Abierto\" ]; then echo \"Est\u00e1 abierto\" ; elif [ $parque == \"Obras\" ]; then echo \"Est\u00e1 en obras\" ; fi \u00bfC\u00f3mo eval\u00faa if todo esto? Los corchetes que incluimos como sintaxis del if, realmente esconden el comando test(1) . Este comando b\u00e1sicamente compara valores, por ejemplo: [ 2 -eq 0 ] Si hacemos un echo $? para ver el resultado de la ejecuci\u00f3n del comando, nos saldr\u00e1 un 1 como se\u00f1al de ARCHIVOALSE. [ 0 -eq 0 ] Al hacer un echo $? nos mostrar\u00e1 el 0, de verdadero. Lo mismo da utilizar los corchetes como llamar directamente al comando. test 0 -eq 0 Veremos el resultado de la ejecuci\u00f3n del comando, recordemos 0 es \u00e9xito !=0 puede ser un error. echo $? Tabla de expresiones utilizadas Las siguientes expresiones devuelven todas verdadero en su defecto en caso de que cumplan la condici\u00f3n. Para ver el resultado, hay que verificar la salida de la ejecuci\u00f3n del comando con echo $? Expresi\u00f3n en terminal Descripci\u00f3n [ -a ARCHIVO ] ARCHIVO existe [ -b ARCHIVO ] ARCHIVO existe y es un fichero especial de bloques [ -c ARCHIVO ] ARCHIVO existe y es archivo especial de caracteres [ -d ARCHIVO ] ARCHIVO existe y es un directorio [ -e ARCHIVO ] ARCHIVO existe [ -f ARCHIVO ] ARCHIVO existe y es un archivo regular [ -g ARCHIVO ] ARCHIVO existe y tiene el SGID asignado [ -h ARCHIVO ] ARCHIVO existe y es un enlace simb\u00f3lico [ -k ARCHIVO ] ARCHIVO existe y tiene asignado sticky bit [ -p ARCHIVO ] ARCHIVO existe y est\u00e1 nombrado como tuber\u00eda (ARCHIVOIARCHIVOO) [ -r ARCHIVO ] ARCHIVO existe y tiene permisos de lectura [ -s ARCHIVO ] ARCHIVO existe y tiene un tama\u00f1o mayor que 0 [ -t ARCHIVO ] La descripci\u00f3n del fichero de ARCHIVO est\u00e1 abierta y se refiere a una terminal [ -u ARCHIVO ] ARCHIVO existe y tiene SUID asignado [ -w ARCHIVO ] ARCHIVO existe y puede escribirse en \u00e9l [ -x ARCHIVO ] ARCHIVO existe y es un ejecutable [ -O ARCHIVO ] ARCHIVO existe y est\u00e1 gestionado por su usario [ -G ARCHIVO ] ARCHIVO existe y est\u00e1 gestionado por su grupo [ -L ARCHIVO ] ARCHIVO existe y es enlace simb\u00f3lico [ -N ARCHIVO ] ARCHIVO existe y se modific\u00f3 desde la \u00faltima vez que se ley\u00f3 [ -S ARCHIVO ] ARCHIVO existe y es un socket [ ARCHIVO1 -nt ARCHIVO2 ] ARCHIVO1 se modific\u00f3 antes que ARCHIVO2, o si ARCHIVO1 existe y ARCHIVO2 no [ ARCHIVO1 -ot ARCHIVO2 ] ARCHIVO1 es m\u00e1s viejo que ARCHIVO2, o ARCHIVO2 existe y ARCHIVO1 no [ ARCHIVO1 -ef ARCHIVO2 ] ARCHIVO1 y ARCHIVO2 se refieren al mismo dispositivo y n\u00famero de inodo [ -o OPNAME ] Si la shell tiene la opci\u00f3n \u00abOPTIONNAME\u00bb activdada bash -o [ -z STRING ] La longitud del STR es 0 [ -n STRING ] Si la longitud de STRING no es 0 [ STRING ] [ STR1 == STR2 ] Si las cadenas son iguales [ STR1 = STR2 ] [ STR1 != STR2 ] Si las cadenas no son iguales [ STR1 < STR2 ] STR1 se ordena antes que STR2 seg\u00fan como est\u00e9 la localizaci\u00f3n configurada [ STR1 > STR2 ] STR1 ordena despu\u00e9s de STR2 en base al idioma del sistema Expresiones para n\u00fameros Las siguientes condiciones solo son aplicables para n\u00fameros enteros, y devolver\u00e1n verdadero en caso de cumplir la condici\u00f3n. Expresi\u00f3n en terminal Descripci\u00f3n [ N1 -eq N2 ] N1 es igual que N2 [ N1 -ne N2 ] N1 no es igual a N2 [ N1 -lt N2 ] N1 es menor que N2 [ N1 -le N2 ] N1 es menor o igual que N2 [ N1 -gt N2 ] N1 es mayor que N2 [ N1 -ge N2 ] N1 es mayor o igual que N2 Comparando m\u00faltiples valores Se pueden anidar condiciones para un determinado valor o conjunto de valores como podemos ver a continuaci\u00f3n gracias a los operadores l\u00f3gicos. cmd1 && cmd2` => Si devuelve 0 (\u00e9xito), se ejecutar\u00e1 `cmd2` `cmd1 || cmd2` => Si devuelve un n\u00famero distinto a 0, se ejecutar\u00e1 `cmd2 Expresi\u00f3n en terminal Descripci\u00f3n [[ VAL1 -eq VAL2 && VAL3 -lt VAL1 ]] Si el VAL1 es igual a VAL2 y a su vez, VAL3 es menor que VAL1, devolver\u00e1 verdadero [[ VAL1 == VAL2 ]] Comprueba que VAL1 es igual a VAL2 Referencias Ediciones ENI ~ LPIC-1 StackOverflow - Why echo outputs himBH on man bash shell Gulvi ~ Curso programaci\u00f3n Bash StackExchange ~ How can I remove an element from an array LinuxQuestions ~ Bash array Add function example using indirect GNU.org ~ Brace Expansion","title":"Aprendiendo scripting"},{"location":"sistemas/linux/bash/bash-scripting/#aprendiendo-scripting","text":"","title":"Aprendiendo scripting"},{"location":"sistemas/linux/bash/bash-scripting/#como-aprender","text":"Realmente cuando hablamos de desarrollo se traduce literalmente en por mucho que sepas, siempre aprender\u00e1s . Porque se te olvida un done en bucle, fi en un condicional, una variable mal declarada\u2026etc, esto es as\u00ed y hay que sumarle que debemos estar constantemente mirando otros scripts elaborados por terceras personas, practicar siempre que podamos porque esto nos ayudar\u00e1 a fianzar m\u00e1s los conocimientos que hemos aprendido aqu\u00ed. Esto no es como memorizar un texto, haces examen y \u00a1ciao! \u00a1Implican muchas cosas! Como comprender conceptos abstractos, saber qu\u00e9 implica la ejecuci\u00f3n de determinados comandos, conocer el sistema\u2026etc Pero no tenemos de que preocuparnos, todo es posible. Ahora le daremos paso a las variables y arrays","title":"\u00bfC\u00f3mo aprender?"},{"location":"sistemas/linux/bash/bash-scripting/#variables","text":"Las variables como hemos visto en su d\u00eda en matem\u00e1ticas, es un conjunto de caracteres alfanum\u00e9ricos (peras, melones, X:sub:1, abc:sub:12) cuyo valor asignado var\u00eda o est\u00e1 sujeto a alg\u00fan cambio. En Bash las variables las podemos declarar directamente o mediante el uso del comando declare(1) que lo hablaremos m\u00e1s adelante ya que permite generar diferentes tipos de","title":"Variables"},{"location":"sistemas/linux/bash/bash-scripting/#restricciones-y-usos","text":"Por norma general, las variables en may\u00fasculas se reservan para temas de administraci\u00f3n y gesti\u00f3n del sistema. Si utilizamos el comando env(1) , veremos toda la ristra de variables de entorno que tenemos: LANG=en_US.utf8 GDM_LANG=en_US.utf8 HISTCONTROL=ignoredups DISPLAY=:0.0 GUESTFISH_RESTORE=\\e[0m HOSTNAME=set0.lan GTK_OVERLAY_SCROLLING=0 COLORTERM=truecolor GUESTFISH_INIT=\\e[1;34m IMSETTINGS_INTEGRATE_DESKTOP=yes KDEDIRS=/usr XDG_VTNR=1 SSH_AUTH_SOCK=/home/sincorchetes/.cache/keyring-RYPSKZ/ssh XDG_SESSION_ID=2 XDG_GREETER_DATA_DIR=/var/lib/lightdm-data/sincorchetes USER=sincorchetes GUESTFISH_PS1=\\[\\e[1;32m\\]><fs>\\[\\e[0;31m\\] DESKTOP_SESSION=mate PT7HOME=/opt/pt [SALIDA ACORTADA] No pueden empezar con n\u00fameros, signos @#~\u00bd!, deber\u00e1n comenzar con al menos una letra y luego si es posible usar n\u00fameros: Ejemplo de errores: @hola=23 h!ola=23 #o#=23 3hola=23 Correcto: hola=23 h014=23 hola=\"Esto es un valor\"","title":"Restricciones y usos"},{"location":"sistemas/linux/bash/bash-scripting/#declarando-variables-con-texto","text":"Si queremos a\u00f1adir valores con cadenas a las variables, es muy importante comprender estas dos diferencias. Podemos declarar ambas con doble comillado \u00ab\u00bb, \u00f3, comillado simple \u201c\u201d. El problema erradica, en que no son lo mismo, el (\u00ab\u00bb) permite mostrar el contenido de una variable dentro de un texto, mientras que (\u201c\u201d) interpreta el texto tal cual. $hw = \"Hello World\" echo \"$hw for everyone\" Hello World for everyone $hw = \"Hello World\" echo '$hw for everyone' $hw for everyone","title":"Declarando variables con texto"},{"location":"sistemas/linux/bash/bash-scripting/#visualizando-las-variables-de-entornosistema","text":"Tenemos a nuestra disposici\u00f3n el comando env(1) que nos ense\u00f1a todas las variables de entorno y de sistema que debemos respetar, vamos a comentar algunas de ellas. Nombre variable Descripci\u00f3n HOME Ruta de trabajo del usuario actual PATH Lista de directorios d\u00f3nde el shell buscar\u00e1 ejecutables (binarios, scripts\u2026) PS1 Prompt String 1, muestra el caracter, texto previo a la introducci\u00f3n de los comandos. [sincorchetes@set0 ~]$ IFS Internal Field Separator, separadores como tabulaci\u00f3n, espacio, salto de l\u00ednea, si est\u00e1 en blanco, se usan espacios MAIL Ruta y archivo de los mensajes del (la) usuari@ que tienen que ver con el e-mail SHELL Ruta del shell del usuario LANG Idioma y codificaci\u00f3n USER Variable que identifica al/la usuari@ actual LOGNAME Nombre del login utilizado en inicio de sesi\u00f3n, por lo general suele ser el mismo que $USER HISTFILE Ruta de archivo del historial de comandos ejecutados en la shell HISTSIZE Tama\u00f1o del archivo historial de comandos ejecutados en shell OLDPWD Directorio accedido anteriormente PWD Ruta actual RANDOM Genera un n\u00famero aleatorio comprendido entre 0 y 31767","title":"Visualizando las variables de entorno/sistema"},{"location":"sistemas/linux/bash/bash-scripting/#eliminando-una-variable","text":"Para eliminar una variable y su contenido, bastar\u00e1 con ejecutar el comando: unset variable","title":"Eliminando una variable"},{"location":"sistemas/linux/bash/bash-scripting/#variable-con-acceso-solo-lectura","text":"Se puede establecer una variable cuyo contenido no cambia como si fuese una constante haciendo uso del comando readonly(1) readonly ejemplo=2","title":"Variable con acceso solo lectura"},{"location":"sistemas/linux/bash/bash-scripting/#visualizando-el-contenido-de-una-variable","text":"Para visualizar una variable, bastar\u00e1 con utilizar el comando echo(1) . ejemplo=\"Hola que tal\" echo $ejemplo","title":"Visualizando el contenido de una variable"},{"location":"sistemas/linux/bash/bash-scripting/#convertir-una-variable-en-global","text":"En desarrollo, se puede entender variable global como aquella que es accesible en todo momento por el programa a pesar de encontrarse en una funci\u00f3n de manera cerrada, y una variable local aquella que solo se produce una vez y posteriormente, una vez efectuada la ejecuci\u00f3n del bloque de c\u00f3digo acaba por auto-suprimirse como un mensaje del inspector Gadget. Para poder hacerla accesible deberemos hacer uso del comando source(1) . Si tenemos un archivo con variables y queremos cargarlas, bastar\u00e1 con ejecutar: source ruta_script Y podremos acceder desde d\u00f3nde queramos desde la shell d\u00f3nde hayamos ejecutado dicho comando.","title":"Convertir una variable en global"},{"location":"sistemas/linux/bash/bash-scripting/#utilizando-variable-para-ayudarnos-con-los-comandos","text":"Por supuest\u00edsimo que podemos hacer uso de las variables para obtener una automatizaci\u00f3n. ejemplo=:code:`pwd` ls $ejemplo Nota No obstante, si tratamos de copiar archivos, directorios cuyas rutas se encuentran en variables, puede dar error, y es porque interpreta uno de los dos el nombre tal cual dando error. Para ello tendremos que utilizar el {}. ruta_archivo_origen = /etc/group ruta_archivo_destino = /home/$USER/Documentos cp ${ruta_archivo_origen} ${ruta_archivo_destino}","title":"Utilizando variable para ayudarnos con los comandos"},{"location":"sistemas/linux/bash/bash-scripting/#sustituir-cadenas-en-variables","text":"Podemos sustituir los valores que se encuentran en las variables sin tener que reasignarlas, solo utilizando llaves. Si la variable est\u00e1 vac\u00eda o no existe, el texto se autoasignar\u00e1. Probaremos con una variable cualquiera que al hacerle un echo(1) no mostrar\u00e1 valor alguno. Si est\u00e1 definida, mostrar\u00e1 el valor de la variable. echo $ejemplo Posteriormente efectuamos: echo ${ejemplo:-Est\u00e1 aprobado}Est\u00e1 aprobado Pero el valor y la variable desaparecen. Si est\u00e1 definida, mostrar\u00e1 el valor de la variable. Si queremos que perduren, haremos los siguiente: echo ${ejemplo:=Est\u00e1 aprobado}Est\u00e1 aprobadoecho $ejemploEst\u00e1 aprobado Por otro lado, si nos encontramos con una variable previamente declarada, pero no vac\u00eda, se puede sustituir utilizando el \u00ab:+\u00bb, no es un cambio permanente. echo ${PS1:+[${USER}@:code:`pwd`]} Y por \u00faltimo, si tenemos una variable que est\u00e1 vac\u00eda o que no exista, se interrumpe el script y mostrar\u00e1 el mensaje de error que le asignemos, si existe, devolver\u00e1 el contenido de la variable: echo ${dsfsd:?[${USER}@:code:`pwd`]}bash: dsfsd: [sincorchetes@/home/sincorchetes]","title":"Sustituir cadenas en variables"},{"location":"sistemas/linux/bash/bash-scripting/#obtener-el-valor-de-una-cadena","text":"Si queremos obtener el n\u00famero de caracteres que constituyen el valor de una variable podemos hacerlo: ejemplo=\"Hola que tal\"echo ${#ejemplo}12","title":"Obtener el valor de una cadena"},{"location":"sistemas/linux/bash/bash-scripting/#operaciones-aritmeticas-con-variables","text":"Se pueden hacer operaciones aritm\u00e9ticas con variables si primeramente declaramos el tipo de dato a trav\u00e9s del comando typeset(1) . Operador Funci\u00f3n + - * / Sumar, restar, multiplicar, dividir % Nos da el m\u00f3dulo de la operaci\u00f3n < > <= => Establece comparaciones, 1=True; 0=False == Igual que != Diferente de","title":"Operaciones aritm\u00e9ticas con variables"},{"location":"sistemas/linux/bash/bash-scripting/#mostrar-el-resultado-de-la-siguiente-suma","text":"typeset -i aa=1200+2200echo $a3200 \u00bfSon iguales estos resultados? typeset -i resultadoa=1200b=1200resultado=${a}==${b}echo $resultado1 Podemos encontrar muchos m\u00e1s operadores help let .","title":"Mostrar el resultado de la siguiente suma"},{"location":"sistemas/linux/bash/bash-scripting/#variables-especiales","text":"No se pueden utilizar, suelen ser de solo lectura y notifican de algo ocurrido por lo general.","title":"Variables especiales"},{"location":"sistemas/linux/bash/bash-scripting/#saber-si-un-comando-se-ejecuto-con-exito-o-nop","text":"echo $? Nos devolver\u00e1 un c\u00f3digo al haber ejecutado un comando. Por lo general, 0 es que se ejecut\u00f3 con \u00e9xito, 1 fall\u00f3 la ejecuci\u00f3n del comando, 127 no encontr\u00f3 el ejecutable. Seg\u00fan el comando, ejecutable, binario\u2026 devuelve un c\u00f3digo de error distinto.","title":"Saber si un comando se ejecut\u00f3 con \u00e9xito o nop"},{"location":"sistemas/linux/bash/bash-scripting/#obtener-el-pid-del-shell-actual","text":"El PID proviene de Process ID, es el n\u00famero que identifica un proceso, ( m\u00e1s adelante explicaremos qu\u00e9 son los procesos ) de la shell actual echo $$25382","title":"Obtener el PID del shell actual"},{"location":"sistemas/linux/bash/bash-scripting/#pid-del-ultimo-proceso-iniciado-en-segundo-plano","text":"Si hemos ejecutado un binario y/o ejecutable en segundo plano, nos chivar\u00e1 el n\u00famero de identificaci\u00f3n de proceso. echo $!25982","title":"PID del \u00faltimo proceso iniciado en segundo plano"},{"location":"sistemas/linux/bash/bash-scripting/#opciones-del-shell","text":"Son las caracter\u00edsticas que tiene habilitadas la shell por defecto, en Fedora muestran las siguientes: echo $-himBHs El significado lo podemos encontrar bash(1) , secci\u00f3n SHELL BUILTIN COMMANDS : h: Recuerda la ubicaci\u00f3n de los comandos a medida de que se buscan para ejecutarse. Activado por defecto. i: Interactiva m: Modo monitor. El control de trabajos est\u00e1 activado. B: El int\u00e9rprete de comandos permite una expansi\u00f3n del uso de las llaves y las varibles. Por ejemplo, echo a{d,c,d,b}e devolver\u00e1 ade ace abe . Viene habilitado por defecto. H: Permite sustituir el estilo del hist\u00f3rico de comandos, se habilita por defecto pero debe tener la caracter\u00edstica de interactivo (i).","title":"Opciones del shell"},{"location":"sistemas/linux/bash/bash-scripting/#arrays-vectores","text":"Los vectores, o tambi\u00e9n conocidos como arrays permiten almacenar un conjunto de datos en un solo espacio de la memoria. En otros lenguajes como PHP pueden anidarse y confinar m\u00faltiples conjuntos de datos dentro de un solo espacio de memoria creando arrays multidimensionales. Sin embargo, en Bash, esto no es posible, ya que solo podremos crear vectores de una sola dimensi\u00f3n y sin un \u00edndice personalizado mediante su creaci\u00f3n. a menos que declaremos la posici\u00f3n como el resultado de una variable ( pagina1=1 = array[pagina1]=\"Valor\" ). El \u00edndice en este caso, se identifica mediante un n\u00famero comprendido entre 0-(n) d\u00f3nde \u00abn\u00bb es el n\u00famero de datos que hemos a\u00f1adido cuando declaramos un *array*. $array = (a b c d ) Datos almacenados en cada una de las posiciones ^ \\_|_|_|_/ /*----------------------*\\ | ||| / ==> a = 1234 \\ Nombre Datos / ==> b = \"Hello world\" \\ del de -------* ==> c = :code:`pwd` * Array Declarados \\ ==> d = $resultado / \\*-----------------------*/ En este caso, para acceder al valor de cada letra correspondiente, tendremos que hacer uso de: $nombre_array + [ n ]. D\u00f3nde n es la posici\u00f3n del dato que queremos obtener. Ejemplo: echo $array[0]||----> Obtendremos: 1234echo $array[1]||----> Obtendremos: Hello worldecho $array[2]||----> Obtendremos: /home/sincorchetes (en mi caso)","title":"Arrays (vectores)"},{"location":"sistemas/linux/bash/bash-scripting/#como-obtener-la-longitud-de-un-array","text":"B\u00e1sicamente, de la siguiente forma: echo ${#array[*]} Nos tendr\u00e1 que dar como resultado \u00ab4\u00bb, que son los valores declarados. (a= 1234, b = \u00abHello world\u00bb\u2026)","title":"\u00bfC\u00f3mo obtener la longitud de un array?"},{"location":"sistemas/linux/bash/bash-scripting/#como-obtener-todos-los-valores-de-un-array","text":"Sustituiremos el n\u00famero de la posici\u00f3n por una @. echo ${array[@]}","title":"\u00bfC\u00f3mo obtener todos los valores de un array?"},{"location":"sistemas/linux/bash/bash-scripting/#como-anadir-un-nuevo-valor-a-un-indice-especifico-de-un-array-declarado","text":"Bastar\u00e1 con mencionar el n\u00famero de posici\u00f3n que queremos asignar el nuevo dato: $array[10]=\"Hola que tal\"","title":"\u00bfC\u00f3mo a\u00f1adir un nuevo valor a un \u00edndice espec\u00edfico de un array declarado?"},{"location":"sistemas/linux/bash/bash-scripting/#visualizar-el-numero-de-posiciones-ocupadas-dentro-de-un-array","text":"Simplemente si queremos ver que posiciones est\u00e1n ocupadas para utilizar las que est\u00e9n libres: echo ${!array[*]}","title":"Visualizar el n\u00famero de posiciones ocupadas dentro de un array"},{"location":"sistemas/linux/bash/bash-scripting/#ver-cuanto-tamano-contiene-de-largo-una-posicion","text":"Para comprobar el tama\u00f1o, simplemente hacemos: echo ${#array[1]}","title":"Ver cu\u00e1nto tama\u00f1o contiene de largo una posici\u00f3n"},{"location":"sistemas/linux/bash/bash-scripting/#como-anadir-un-nuevo-valor-sin-declarar-posicion-en-un-array","text":"Simplemente si queremos a\u00f1adir un dato nuevo sin especificar un \u00edndice en cuesti\u00f3n. array+=(nuevo_valor)","title":"\u00bfC\u00f3mo a\u00f1adir un nuevo valor sin declarar posici\u00f3n en un array?"},{"location":"sistemas/linux/bash/bash-scripting/#eliminar-una-posicion-del-array","text":"Utilizaremos el comando unset(1) como se ha utilizado para eliminar variables declaradas. unset array[n]","title":"Eliminar una posici\u00f3n del array"},{"location":"sistemas/linux/bash/bash-scripting/#resultado-de-un-comando-que-se-separe-como-valores-y-que-estos-ocupen-una-posicion-dentro-del-array","text":"Esto quiere decir, que si asignamos un solo valor, cuyo valor sea el resultado de un comando, este generar\u00e1 una salida y todos los datos expuestos en la salida del comando se convertir\u00e1n en un valor dentro de una posici\u00f3n. Por ejemplo, si hacemos un cat /etc/group , obtendremos una salida similar a esta: root:x:0:bin:x:1:daemon:x:2:sys:x:3:adm:x:4:tty:x:5:disk:x:6:[SALIDA ACORTADA] Bien, si le decimos al array que nos almacene esta lista para luego visualizarla, podemos hacerlo. array=(`cat /etc/group`) Si hacemos un echo ${array[0]} veremos que nos saldr\u00e1 la primera l\u00ednea del documento: root:x:0: Si queremos obtener toda la lista: echo ${array[@]}","title":"Resultado de un comando que se separe como valores y que estos ocupen una posici\u00f3n dentro del array"},{"location":"sistemas/linux/bash/bash-scripting/#condicionales","text":"Imagin\u00e9monos que vamos a comprar el pan y resulta de que o bien no hay, o bien sale m\u00e1s caro de lo que imaginamos, o bien no es el tipo que buscamos\u2026etc, entonces tenemos que pensar \u00bfQu\u00e9 hacer? y aqu\u00ed entra en juego el uso de los condicionales. Los condicionales son evaulaciones que aplicamos en determinados valores que obtenemos como resultado de una operaci\u00f3n anterior, bloques de c\u00f3digo que han sido ejecutados y que han devuelto alguna salida. Es decir, con el if regularemos el flujo de trabajo de nuestro sript , a\u00f1adiendo diferentes situaciones para resultados diferentes.","title":"Condicionales"},{"location":"sistemas/linux/bash/bash-scripting/#condicional-if","text":"If permite a\u00f1adir una situaci\u00f3n diferente que en caso de que no se cumpla la condici\u00f3n, continuar\u00e1 ejecutando el resto del c\u00f3digo. Este se puede elaborar en dentro de un script ( como haremos a partir de ahora ), o bien se puede ejecutar en una sola l\u00ednea de ejecuci\u00f3n en Bash. Creamos un script d\u00f3nde a\u00f1adiremos el siguiente bloque de c\u00f3digo. estado=\"Cerrado\" parque=$estado if [ $parque == \"Cerrado\"] then echo \"Est\u00e1 cerrado\" fi Si ejecutamos el c\u00f3digo de arriba, nos devolver\u00e1 un mensaje de que se encuentra cerrado. Sin embargo, si cambiamos \u00abCerrado\u00bb => \u00abAbierto\u00bb. La cosa cambia, ya que no producir\u00e1 una salida. estado=\"Cerrado\" parque=$estado if [ $parque == \"Cerrado\"] then echo \"Est\u00e1 cerrado\" fi \u00bfPor qu\u00e9 sucede esto? Porque como la condici\u00f3n no se cumple, ya que caracter-caracter se va comprobando que sean correctos dentro de la condici\u00f3n, en cuanto sea alguno de ellos distinto, se prosigue con el resto del c\u00f3digo sin hacer nada al respecto. Si queremos decirle que ejecute otra instrucci\u00f3n de c\u00f3digo utilizaremos la sentencia else. estado=\"Cerrado\" parque=$estado if [ $parque == \"Cerrado\"] then echo \"Est\u00e1 cerrado\" else echo \"Est\u00e1 abierto\" fi Pero\u2026 \u00bfY si queremos a\u00f1adir m\u00e1s condiciones? Un parque puede estar abierto, cerrado, en obras entre otras cosas. Para eso tenemos la sentencia if-elif.","title":"Condicional If"},{"location":"sistemas/linux/bash/bash-scripting/#condicional-if-elif","text":"estado=\"Abierto\" parque=$estado if [ $parque == \"Cerrado\"] then echo \"Est\u00e1 cerrado\" elif [ $parque == \"Abierto\" ] then echo \"Est\u00e1 abierto\" fi M\u00e1s estados\u2026 estado=\"Obras\" parque=$estado if [ $parque == \"Cerrado\"] then echo \"Est\u00e1 cerrado\" elif [ $parque == \"Abierto\" ] then echo \"Est\u00e1 abierto\" elif [ $parque == \"Obras\" ] then echo \"Est\u00e1 en obras\" else echo \"Consulte al ayuntamiento de su ciudad\" fi","title":"Condicional If-elif"},{"location":"sistemas/linux/bash/bash-scripting/#condicional-en-una-simple-linea","text":"Se pueden escribir condicionales en una sola l\u00ednea, acortando todo el bloque de c\u00f3digo en una sola instrucci\u00f3n reduciendo el consumo de memoria y de procesamiento, pero aumentando la complejidad de lectura para el desarrollador. if [ $parque == \"Cerrado\" ]; then echo \"Est\u00e1 cerrado\" ; elif [ $parque == \"Abierto\" ]; then echo \"Est\u00e1 abierto\" ; elif [ $parque == \"Obras\" ]; then echo \"Est\u00e1 en obras\" ; fi","title":"Condicional en una simple linea"},{"location":"sistemas/linux/bash/bash-scripting/#como-evalua-if-todo-esto","text":"Los corchetes que incluimos como sintaxis del if, realmente esconden el comando test(1) . Este comando b\u00e1sicamente compara valores, por ejemplo: [ 2 -eq 0 ] Si hacemos un echo $? para ver el resultado de la ejecuci\u00f3n del comando, nos saldr\u00e1 un 1 como se\u00f1al de ARCHIVOALSE. [ 0 -eq 0 ] Al hacer un echo $? nos mostrar\u00e1 el 0, de verdadero. Lo mismo da utilizar los corchetes como llamar directamente al comando. test 0 -eq 0 Veremos el resultado de la ejecuci\u00f3n del comando, recordemos 0 es \u00e9xito !=0 puede ser un error. echo $?","title":"\u00bfC\u00f3mo eval\u00faa if todo esto?"},{"location":"sistemas/linux/bash/bash-scripting/#tabla-de-expresiones-utilizadas","text":"Las siguientes expresiones devuelven todas verdadero en su defecto en caso de que cumplan la condici\u00f3n. Para ver el resultado, hay que verificar la salida de la ejecuci\u00f3n del comando con echo $? Expresi\u00f3n en terminal Descripci\u00f3n [ -a ARCHIVO ] ARCHIVO existe [ -b ARCHIVO ] ARCHIVO existe y es un fichero especial de bloques [ -c ARCHIVO ] ARCHIVO existe y es archivo especial de caracteres [ -d ARCHIVO ] ARCHIVO existe y es un directorio [ -e ARCHIVO ] ARCHIVO existe [ -f ARCHIVO ] ARCHIVO existe y es un archivo regular [ -g ARCHIVO ] ARCHIVO existe y tiene el SGID asignado [ -h ARCHIVO ] ARCHIVO existe y es un enlace simb\u00f3lico [ -k ARCHIVO ] ARCHIVO existe y tiene asignado sticky bit [ -p ARCHIVO ] ARCHIVO existe y est\u00e1 nombrado como tuber\u00eda (ARCHIVOIARCHIVOO) [ -r ARCHIVO ] ARCHIVO existe y tiene permisos de lectura [ -s ARCHIVO ] ARCHIVO existe y tiene un tama\u00f1o mayor que 0 [ -t ARCHIVO ] La descripci\u00f3n del fichero de ARCHIVO est\u00e1 abierta y se refiere a una terminal [ -u ARCHIVO ] ARCHIVO existe y tiene SUID asignado [ -w ARCHIVO ] ARCHIVO existe y puede escribirse en \u00e9l [ -x ARCHIVO ] ARCHIVO existe y es un ejecutable [ -O ARCHIVO ] ARCHIVO existe y est\u00e1 gestionado por su usario [ -G ARCHIVO ] ARCHIVO existe y est\u00e1 gestionado por su grupo [ -L ARCHIVO ] ARCHIVO existe y es enlace simb\u00f3lico [ -N ARCHIVO ] ARCHIVO existe y se modific\u00f3 desde la \u00faltima vez que se ley\u00f3 [ -S ARCHIVO ] ARCHIVO existe y es un socket [ ARCHIVO1 -nt ARCHIVO2 ] ARCHIVO1 se modific\u00f3 antes que ARCHIVO2, o si ARCHIVO1 existe y ARCHIVO2 no [ ARCHIVO1 -ot ARCHIVO2 ] ARCHIVO1 es m\u00e1s viejo que ARCHIVO2, o ARCHIVO2 existe y ARCHIVO1 no [ ARCHIVO1 -ef ARCHIVO2 ] ARCHIVO1 y ARCHIVO2 se refieren al mismo dispositivo y n\u00famero de inodo [ -o OPNAME ] Si la shell tiene la opci\u00f3n \u00abOPTIONNAME\u00bb activdada bash -o [ -z STRING ] La longitud del STR es 0 [ -n STRING ] Si la longitud de STRING no es 0 [ STRING ] [ STR1 == STR2 ] Si las cadenas son iguales [ STR1 = STR2 ] [ STR1 != STR2 ] Si las cadenas no son iguales [ STR1 < STR2 ] STR1 se ordena antes que STR2 seg\u00fan como est\u00e9 la localizaci\u00f3n configurada [ STR1 > STR2 ] STR1 ordena despu\u00e9s de STR2 en base al idioma del sistema","title":"Tabla de expresiones utilizadas"},{"location":"sistemas/linux/bash/bash-scripting/#expresiones-para-numeros","text":"Las siguientes condiciones solo son aplicables para n\u00fameros enteros, y devolver\u00e1n verdadero en caso de cumplir la condici\u00f3n. Expresi\u00f3n en terminal Descripci\u00f3n [ N1 -eq N2 ] N1 es igual que N2 [ N1 -ne N2 ] N1 no es igual a N2 [ N1 -lt N2 ] N1 es menor que N2 [ N1 -le N2 ] N1 es menor o igual que N2 [ N1 -gt N2 ] N1 es mayor que N2 [ N1 -ge N2 ] N1 es mayor o igual que N2","title":"Expresiones para n\u00fameros"},{"location":"sistemas/linux/bash/bash-scripting/#comparando-multiples-valores","text":"Se pueden anidar condiciones para un determinado valor o conjunto de valores como podemos ver a continuaci\u00f3n gracias a los operadores l\u00f3gicos. cmd1 && cmd2` => Si devuelve 0 (\u00e9xito), se ejecutar\u00e1 `cmd2` `cmd1 || cmd2` => Si devuelve un n\u00famero distinto a 0, se ejecutar\u00e1 `cmd2 Expresi\u00f3n en terminal Descripci\u00f3n [[ VAL1 -eq VAL2 && VAL3 -lt VAL1 ]] Si el VAL1 es igual a VAL2 y a su vez, VAL3 es menor que VAL1, devolver\u00e1 verdadero [[ VAL1 == VAL2 ]] Comprueba que VAL1 es igual a VAL2","title":"Comparando m\u00faltiples valores"},{"location":"sistemas/linux/bash/bash-scripting/#referencias","text":"Ediciones ENI ~ LPIC-1 StackOverflow - Why echo outputs himBH on man bash shell Gulvi ~ Curso programaci\u00f3n Bash StackExchange ~ How can I remove an element from an array LinuxQuestions ~ Bash array Add function example using indirect GNU.org ~ Brace Expansion","title":"Referencias"},{"location":"sistemas/linux/entornos-escritorio/workaround/ajustando-la-apariencia-en-aplicaciones-qt/","text":"Ajustando la apariencia en aplicaciones Qt \u00bfCu\u00e1l es el problema? Seguro que muchas veces nos ha pasado que hemos instalado aplicaciones que utilizan Qt y se ven muy feas en entornos de escritorio ajenos a Plasma (aka KDE) o LXQT. En este post descubriremos c\u00f3mo ponerle fin a este suceso, y c\u00f3mo afrontarlo. \u00bfQu\u00e9 es Qt? Qt es un framework multiplataforma orientado a objetos utilizado para desarrollar aplicaciones que utilicen interfaz grafica. Actualmente este framework es el que utiliza el equipo de Plasma (antes KDE) para su desarrollo y continuaci\u00f3n en todo su software de escritorio; la suite de ofim\u00e1tica Calligra Suite (antes llamado KOffice) tambi\u00e9n lo utiliza; el famoso reproductor multimedia VLC; reproductor y conversor de archivos de audio Clementine\u2026etc. \u00bfExiste alg\u00fan m\u00e9todo para solucionarlo? S\u00ed, efectivamente, tenemos varios m\u00e9todos, uno de ellos es hacer uso de scripts, pero vamos a simplificarlo haciendo de la herramienta gr\u00e1fica que nos proporciona el equipo de Qt llamada qt5ct para obtenerla en nuestro sistema bastar\u00e1 con instalarla. Instalaci\u00f3n En este proceso tenemos la instalaci\u00f3n mediante binarios que se obtienen mediante los repositorios de los gestores de paquetes, o bien, mediante c\u00f3digo fuente. Binarios Distribuciones m\u00e1s populares: Fedora: # dnf install qt5ct Archlinux # pacman -S qt5ct Ubuntu y Debian # apt-get install qt5ct Gentoo # emerge -av qt5ct C\u00f3digo fuente Para poder compilar el c\u00f3digo fuente, hay una serie de pasos que debemos seguir: Nota Dependiendo de la distribuci\u00f3n, pueden variar algunos nombres respecto al qmake porque puede haber m\u00e1s de una versi\u00f3n de Qt instalada en nuestro sistema como es el caso de Fedora que tiene qmake-qt5 para Qt5 y qmake para Qt4. Descargar el archivo comprimido que contiene el c\u00f3digo fuente desde aqu\u00ed Descomprimirlo en el directorio que queramos Instalar software adicional requerido para el proceso de compilaci\u00f3n Compilar el c\u00f3digo fuente Instalar en nuestro sistema Ejecutar dicho software. #### Paquetes necesarios Esta es la lista de los paquetes que necesitaremos para compilar qt5ct , a la izquierda, el nombre com\u00fan, a la derecha, el nombre de los paquetes en Fedora. qttools-devel => qt5-qttools-devel qtbase-devel => qt5-qtbase-devel qtbase-static => qt5-qtbase-static qtsvg-devel => qt5-qtsvg-devel g++ => gcc-c++ make => make gcc => gcc Compilando Seg\u00fan el README: $ qmake PREFIX=/DIRECTORIO_A_INSTALAR $ make # make install Para instalarlo en el sistema (Fedora) $ qmake-qt5 PREFIX=/usr $ make # make install Ya lo tendremos instalado, sin embargo, actualizamos la base de datos de los ficheros .desktop para que aparezca en los men\u00fas de nuestro entorno de escritorio update-desktop-database(1) . # update-desktop-database Troubleshooting No puedo iniciar el programa porque obtengo este error > The QT_QPA_PLATFORMTHEME environment variable is not set correctly. Para solucionarlo, a\u00f1adimos el siguiente c\u00f3digo a un archivo nuevo dentro del directorio /etc/profile.d/ , guardamos con extensi\u00f3n .sh y salimos de la sesi\u00f3n, ya deber\u00eda estar arreglado. export QT_QPA_PLATFORMTHEME=qt5ct Referencias Archlinux wiki Qt5ct README","title":"Ajustando la apariencia en aplicaciones Qt"},{"location":"sistemas/linux/entornos-escritorio/workaround/ajustando-la-apariencia-en-aplicaciones-qt/#ajustando-la-apariencia-en-aplicaciones-qt","text":"","title":"Ajustando la apariencia en aplicaciones Qt"},{"location":"sistemas/linux/entornos-escritorio/workaround/ajustando-la-apariencia-en-aplicaciones-qt/#cual-es-el-problema","text":"Seguro que muchas veces nos ha pasado que hemos instalado aplicaciones que utilizan Qt y se ven muy feas en entornos de escritorio ajenos a Plasma (aka KDE) o LXQT. En este post descubriremos c\u00f3mo ponerle fin a este suceso, y c\u00f3mo afrontarlo.","title":"\u00bfCu\u00e1l es el problema?"},{"location":"sistemas/linux/entornos-escritorio/workaround/ajustando-la-apariencia-en-aplicaciones-qt/#que-es-qt","text":"Qt es un framework multiplataforma orientado a objetos utilizado para desarrollar aplicaciones que utilicen interfaz grafica. Actualmente este framework es el que utiliza el equipo de Plasma (antes KDE) para su desarrollo y continuaci\u00f3n en todo su software de escritorio; la suite de ofim\u00e1tica Calligra Suite (antes llamado KOffice) tambi\u00e9n lo utiliza; el famoso reproductor multimedia VLC; reproductor y conversor de archivos de audio Clementine\u2026etc.","title":"\u00bfQu\u00e9 es Qt?"},{"location":"sistemas/linux/entornos-escritorio/workaround/ajustando-la-apariencia-en-aplicaciones-qt/#existe-algun-metodo-para-solucionarlo","text":"S\u00ed, efectivamente, tenemos varios m\u00e9todos, uno de ellos es hacer uso de scripts, pero vamos a simplificarlo haciendo de la herramienta gr\u00e1fica que nos proporciona el equipo de Qt llamada qt5ct para obtenerla en nuestro sistema bastar\u00e1 con instalarla.","title":"\u00bfExiste alg\u00fan m\u00e9todo para solucionarlo?"},{"location":"sistemas/linux/entornos-escritorio/workaround/ajustando-la-apariencia-en-aplicaciones-qt/#instalacion","text":"En este proceso tenemos la instalaci\u00f3n mediante binarios que se obtienen mediante los repositorios de los gestores de paquetes, o bien, mediante c\u00f3digo fuente.","title":"Instalaci\u00f3n"},{"location":"sistemas/linux/entornos-escritorio/workaround/ajustando-la-apariencia-en-aplicaciones-qt/#binarios","text":"Distribuciones m\u00e1s populares: Fedora: # dnf install qt5ct Archlinux # pacman -S qt5ct Ubuntu y Debian # apt-get install qt5ct Gentoo # emerge -av qt5ct","title":"Binarios"},{"location":"sistemas/linux/entornos-escritorio/workaround/ajustando-la-apariencia-en-aplicaciones-qt/#codigo-fuente","text":"Para poder compilar el c\u00f3digo fuente, hay una serie de pasos que debemos seguir: Nota Dependiendo de la distribuci\u00f3n, pueden variar algunos nombres respecto al qmake porque puede haber m\u00e1s de una versi\u00f3n de Qt instalada en nuestro sistema como es el caso de Fedora que tiene qmake-qt5 para Qt5 y qmake para Qt4. Descargar el archivo comprimido que contiene el c\u00f3digo fuente desde aqu\u00ed Descomprimirlo en el directorio que queramos Instalar software adicional requerido para el proceso de compilaci\u00f3n Compilar el c\u00f3digo fuente Instalar en nuestro sistema Ejecutar dicho software. #### Paquetes necesarios Esta es la lista de los paquetes que necesitaremos para compilar qt5ct , a la izquierda, el nombre com\u00fan, a la derecha, el nombre de los paquetes en Fedora. qttools-devel => qt5-qttools-devel qtbase-devel => qt5-qtbase-devel qtbase-static => qt5-qtbase-static qtsvg-devel => qt5-qtsvg-devel g++ => gcc-c++ make => make gcc => gcc","title":"C\u00f3digo fuente"},{"location":"sistemas/linux/entornos-escritorio/workaround/ajustando-la-apariencia-en-aplicaciones-qt/#compilando","text":"Seg\u00fan el README: $ qmake PREFIX=/DIRECTORIO_A_INSTALAR $ make # make install","title":"Compilando"},{"location":"sistemas/linux/entornos-escritorio/workaround/ajustando-la-apariencia-en-aplicaciones-qt/#para-instalarlo-en-el-sistema-fedora","text":"$ qmake-qt5 PREFIX=/usr $ make # make install Ya lo tendremos instalado, sin embargo, actualizamos la base de datos de los ficheros .desktop para que aparezca en los men\u00fas de nuestro entorno de escritorio update-desktop-database(1) . # update-desktop-database","title":"Para instalarlo en el sistema (Fedora)"},{"location":"sistemas/linux/entornos-escritorio/workaround/ajustando-la-apariencia-en-aplicaciones-qt/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"sistemas/linux/entornos-escritorio/workaround/ajustando-la-apariencia-en-aplicaciones-qt/#no-puedo-iniciar-el-programa-porque-obtengo-este-error","text":"> The QT_QPA_PLATFORMTHEME environment variable is not set correctly. Para solucionarlo, a\u00f1adimos el siguiente c\u00f3digo a un archivo nuevo dentro del directorio /etc/profile.d/ , guardamos con extensi\u00f3n .sh y salimos de la sesi\u00f3n, ya deber\u00eda estar arreglado. export QT_QPA_PLATFORMTHEME=qt5ct","title":"No puedo iniciar el programa porque obtengo este error"},{"location":"sistemas/linux/entornos-escritorio/workaround/ajustando-la-apariencia-en-aplicaciones-qt/#referencias","text":"Archlinux wiki Qt5ct README","title":"Referencias"},{"location":"sistemas/linux/systemd/","text":"Introducci\u00f3n Configuraci\u00f3n Codificaci\u00f3n del sistema Obtener un resumen de la codificaci\u00f3n del sistema localectl Obtener un listado de las codificaciones disponibles localectl list-locales Configurar una codificaci\u00f3n del sistema sudo localectl set-locale en_US.utf8 Huso horario Obtener un resumen de la fecha-hora del sistema timedatectl Obtener lista de husos horarios timedatectl list-timezones Configurar huso horario sudo timedatectl set-timezone Atlantic/Canary Hostname Configurar el hostname de la m\u00e1quina: sudo hostnamectl set-hostname NOMBRE_MAQUINA Troubleshooting No encuentro la codificaci\u00f3n que quiero Revisar los locales instalados rpm -qa |grep glibc-langpack dnf list installed langpacks* Instalar el idioma espec\u00edfico sudo dnf install glibc-langpack-IDIOMA La pantalla del port\u00e1til entra en suspensi\u00f3n con AC y conectada a otro monitor /etc/systemd/logind.conf HandleLidSwitch=ignore HandleLidSwitchExternalPower=ignore HandleLidSwitchDocked=ignore Reiniciar el servicio (no hacer SIGHUP como dice) systemctl restart systemd-logind Fuentes https://unix.stackexchange.com/questions/597360/how-to-disable-suspending-the-system-when-the-lid-is-closed","title":"Introducci\u00f3n"},{"location":"sistemas/linux/systemd/#introduccion","text":"","title":"Introducci\u00f3n"},{"location":"sistemas/linux/systemd/#configuracion","text":"","title":"Configuraci\u00f3n"},{"location":"sistemas/linux/systemd/#codificacion-del-sistema","text":"","title":"Codificaci\u00f3n del sistema"},{"location":"sistemas/linux/systemd/#obtener-un-resumen-de-la-codificacion-del-sistema","text":"localectl","title":"Obtener un resumen de la codificaci\u00f3n del sistema"},{"location":"sistemas/linux/systemd/#obtener-un-listado-de-las-codificaciones-disponibles","text":"localectl list-locales","title":"Obtener un listado de las codificaciones disponibles"},{"location":"sistemas/linux/systemd/#configurar-una-codificacion-del-sistema","text":"sudo localectl set-locale en_US.utf8","title":"Configurar una codificaci\u00f3n del sistema"},{"location":"sistemas/linux/systemd/#huso-horario","text":"","title":"Huso horario"},{"location":"sistemas/linux/systemd/#obtener-un-resumen-de-la-fecha-hora-del-sistema","text":"timedatectl","title":"Obtener un resumen de la fecha-hora del sistema"},{"location":"sistemas/linux/systemd/#obtener-lista-de-husos-horarios","text":"timedatectl list-timezones","title":"Obtener lista de husos horarios"},{"location":"sistemas/linux/systemd/#configurar-huso-horario","text":"sudo timedatectl set-timezone Atlantic/Canary","title":"Configurar huso horario"},{"location":"sistemas/linux/systemd/#hostname","text":"Configurar el hostname de la m\u00e1quina: sudo hostnamectl set-hostname NOMBRE_MAQUINA","title":"Hostname"},{"location":"sistemas/linux/systemd/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"sistemas/linux/systemd/#no-encuentro-la-codificacion-que-quiero","text":"","title":"No encuentro la codificaci\u00f3n que quiero"},{"location":"sistemas/linux/systemd/#revisar-los-locales-instalados","text":"rpm -qa |grep glibc-langpack dnf list installed langpacks*","title":"Revisar los locales instalados"},{"location":"sistemas/linux/systemd/#instalar-el-idioma-especifico","text":"sudo dnf install glibc-langpack-IDIOMA","title":"Instalar el idioma espec\u00edfico"},{"location":"sistemas/linux/systemd/#la-pantalla-del-portatil-entra-en-suspension-con-ac-y-conectada-a-otro-monitor","text":"/etc/systemd/logind.conf HandleLidSwitch=ignore HandleLidSwitchExternalPower=ignore HandleLidSwitchDocked=ignore","title":"La pantalla del port\u00e1til entra en suspensi\u00f3n con AC y conectada a otro monitor"},{"location":"sistemas/linux/systemd/#reiniciar-el-servicio-no-hacer-sighup-como-dice","text":"systemctl restart systemd-logind","title":"Reiniciar el servicio (no hacer SIGHUP como dice)"},{"location":"sistemas/linux/systemd/#fuentes","text":"https://unix.stackexchange.com/questions/597360/how-to-disable-suspending-the-system-when-the-lid-is-closed","title":"Fuentes"},{"location":"sistemas/linux/systemd/diferencias-entre-gestores-de-servicios/","text":"Diferencias entre gestores de servicios Introducci\u00f3n Red Hat 6 y 7 tienen gestores de servicio diferentes. La versi\u00f3n 6 utiliza Upstart, sin embargo, el equipo de Red Hat lo implement\u00f3 como reemplazo de SysVinit por su modo de arranque que es m\u00e1s c\u00f3modo y m\u00e1s moderno, no obstante, ellos utilizan para todo el sistema scripts de SysVinit por su compatibilidad con Upstart. En Red Hat 7, utilizan el gestor de servicios de systemd, este gestor de servicios es una s\u00edntesis de todos los gestores que hab\u00edan en el ecosistema UNIX incluyendo el de OS X, y Lennart Poettering, voluntario del proyecto Fedora elabor\u00f3 un gestor de servicios con cada una de las ideas de cada gestor (SysVinit, Upstart, runit, rc.d\u2026). Este soportaba paralelizaci\u00f3n de procesos en el arranque acelerando las cargas del sistema operativo, tambi\u00e9n permite una mayor escritura en logs porque no usa texto si no, binarios. Hoy en d\u00eda, es el gestor de servicios est\u00e1ndar despu\u00e9s de que los dem\u00e1s proyectos comunitarios como OpenSUSE, ArchLinux, el proyecto Debian y por consiguiente Ubuntu lo hubiesen adoptado por defecto. Breves diferencias a nivel de servicios SysVinit Directorio de scripts de arranque: /etc/init.d Los logs son espec\u00edficos de cada servicio, por lo general se almacenan en /var/log/ (el texto es m\u00e1s dif\u00edcil de procesar a nivel de servicio) No existe paralelizaci\u00f3n al arranque/parada de servicios La elaboraci\u00f3n de servicios es m\u00e1s enrrebesada y compleja de mantener, las funciones de arranque, parada, reinicio o consulta del servicio est\u00e1n definidos como funciones dentro del script del servicio. Elaborando servicios para SysVinit (RHEL6) Vamos a elaborar un ejemplo de servicio que monitorice el servicio nfs y que lo reinicie en caso de que est\u00e9 ca\u00eddo. Para ello, verificamos si el archivo /var/lock/subsys/nfs existe, si no existe, reiniciaremos el servicio. Creando el servicio (o demonio) /etc/init.d/check_nfs_working #!/bin/bash # # checking_nfs Check NFS is working on system # # chkconfig: 2345 12 88 # description: System would be check if NFS service is loaded ### BEGIN INIT INFO # Provides: $checking_nfs # Required-Start: $local_fs # Required-Stop: $local_fs # Default-Start: 2 3 4 5 # Default-Stop: 0 1 6 # Short-Description: System would be check if NFS service is loaded # Description: System would be check if NFS service is loaded ### END INIT INFO # Source function library. . /etc/init.d/functions prog=checking_nfs script=/admin/bin/checking_nfs lockfile=/var/lock/subsys/$prog start() { echo -n \"Starting NFS is working: \" ${script} & touch /var/lock/subsys/checking_nfs success $\"Checking NFS is started\" echo } stop() { echo -n \"Stopping NFS is working: \" killproc checking_nfs rm -f /var/lock/subsys/checking_nfs echo } restart() { stop start } case \"$1\" in start) start ;; stop) stop ;; restart) restart ;; reload) exit 3 ;; force-reload) restart ;; status) status checking_nfs ;; condrestart|try-restart) rhstatus >/dev/null 2>&1 || exit 0 restart ;; *) echo $\"Usage: $0 {start|stop|restart|condrestart|try-restart|reload|force-reload|status}\" exit 3 esac exit $? El contenido de arriba ser\u00eda todo lo que necesitar\u00edamos para elaborar el objetivo que tenemos, vamos a explicar un poco qu\u00e9 es cada parte: #!/bin/bash Declaramos el BashGang para que, al leer el script lo interprete con la Shell Bash y no con otra como SH, KSH, Fish\u2026etc # # checking_nfs Check NFS is working on system # # chkconfig: 2345 12 88 # description: System would be check if NFS service is loaded Definimos algunos datos necesarios para que podamos identificar que hace este servicio, tambi\u00e9n es importante incluir esta cabecera porque si no no se podr\u00e1 configurar al arranque del inicio del sistema operativo. Si nos fijamos en el comando chkconfig, tenemos 3 argumentos con solo n\u00fameros enteros, lo explicamos: 2345 \u2013 Se refiere a los runlevels en el que el servicio se habilitar\u00e1 por defecto. 12 \u2013 Es la prioridad para que arranque, si el valor es muy bajo tendr\u00e1 una prioridad m\u00e1s alta para que se arranque en el inicio del sistema. 88 \u2013 Es la prioridad para que se detenga el servicio, si el valor es muy bajo tendr\u00e1 una prioridad m\u00e1s alta para que se detenga en el apagado del sistema. ### BEGIN INIT INFO # Provides: $checking_nfs # Required-Start: $local_fs # Required-Stop: $local_fs # Default-Start: 2 3 4 5 # Default-Stop: 0 1 6 # Short-Description: System would be check if NFS service is loaded # Description: System would be check if NFS service is loaded ### END INIT INFO Este bloque, es la parte de Linux Standard Base, se definen las dependencias necesarias para el arranque o inicio del servicio incluyendo informaci\u00f3n adicional, incluyendo los runlevels de ejecuci\u00f3n y de parada. # Source function library. . /etc/init.d/functions Permite cargar funciones adicionales como daemon , killproc \u2026 que se pueden utilizar en otros scripts, sin embargo, principalmente utilizaremos killproc . prog=checking_nfs script=/admin/bin/checking_nfs lockfile=/var/lock/subsys/$prog Definimos como se llama el programa, d\u00f3nde est\u00e1 ubicado el script, y el archivo que se bloquear\u00e1 para que no haya una ejecuci\u00f3n descontrolada del servicio (se ejecuten 2,3, 4 a la vez) start() { echo -n \"Starting NFS is working: \" ${script} & touch /var/lock/subsys/checking_nfs success $\"Checking NFS is started\" echo } stop() { echo -n \"Stopping NFS is working: \" killproc checking_nfs rm -f /var/lock/subsys/checking_nfs echo } restart() { stop start } Definimos las funciones que har\u00e1 nuestro servicio, por lo general son los comandos que ejecutaremos para que funcione en s\u00ed el servicio. case \"$1\" in start) start ;; stop) stop ;; restart) restart ;; reload) exit 3 ;; force-reload) restart ;; status) status checking_nfs ;; condrestart|try-restart) rhstatus >/dev/null 2>&1 || exit 0 restart ;; *) echo $\"Usage: $0 {start|stop|restart|condrestart|try-restart|reload|force-reload|status}\" exit 3 esac exit $? Este switch funciona cuando ejecutemos el comando service check_nfs_working start|status|restart , el par\u00e1metro recibido. :code: \u00a1No olvides asignarle permisos de ejecuci\u00f3n! Elaborando el script que comprueba el servicio nfs #!/bin/bash while : do if [ -f /var/lock/subsys/nfs ] then echo \"El servicio NFS est\u00e1 funcionando\" >> /var/log/checking_nfs else echo \"Ha fallado el servicio NFS, se va a reiniciar\" >> /var/log/checking_nfs service nfs restart fi sleep 5 done Este script permite comprobar si el fichero que genera el servicio de nfs est\u00e1 creado, si lo est\u00e1 vuelca en un archivo de log que existe y est\u00e1 funcionando (para revisiones futuras). En caso de que no exista el archivo, se reiniciar\u00e1 todo el servicio. Esta comprobaci\u00f3n es infinita, es importante que el bucle sea infinito pero que contenga un :code: sleep para que no sature los recursos del sistema. Con el sleep definimos el tiempo (en segundos) que queremos que se compruebe. \u00a1No olvides asignarle permisos de ejecuci\u00f3n! Arrancando el servicio sudo service check_nfs_working start Starting NFS is working: [ OK ] Consultando el servicio sudo service check_nfs_working status checking_nfs (pid 9599 7158) is running... Parando el servicio sudo service check_nfs_working stop Stopping NFS is working: [ OK ] Habilitando el servicio en el arranque sudo chkconfig check_nfs_working on Comprobando que los runlevels son los que hemos configurado en el servicio (o demonio) sudo chkconfig --list check_nfs_working check_nfs_working 0:off 1:off 2:on 3:on 4:on 5:on 6:off Nota Si los comparamos con el servicio, veremos que coinciden. Desactivando el servicio al arranque sudo chkconfig check_nfs_working off Systemd Directorio de servicios locales: /etc/systemd/ Directorio de servicios espec\u00edficos por RPM instalados: /usr/lib/systemd Los logs se leen mediante journalctl , el resultado o salida de la ejecuci\u00f3n de los servicios se almacenan en formato binario (m\u00e1s r\u00e1pidez de lectura/escritura) Existe paralelizaci\u00f3n al arranque/parada de servicios disminuyendo el tiempo de encendido/apagado Elaborar un servicio es m\u00e1s f\u00e1cil, no hay que definir los bloques de start , stop , restart , status como en SysVinit facilitando m\u00e1s la r\u00e1pidez y legibilidad cuando se crea un servicio. Elaborando un servicio (no demonio) para systemd (RHEL7) En systemd el concepto de demonio (daemon) se pierde, no se menciona, solo se comenta el uso de servicio. Creando el servicio /etc/systemd/system/check_nfs_working.service [Unit] Description=Checking if NFS is working After=network.target [Service] Type=simple User=root ExecStart=/admin/bin/check_nfs_working.sh Restart=on-failure [Install] WantedBy=multi-user.target Como ves, la diferencia est\u00e1 muy clara. Vamos a explicar este bloque declarativo. En systemd , los Units pueden contener servicios abstractos, recursos de red, dispositivos, sistemas de archivos montados, y recursos aislados, por lo que es m\u00e1s que una definici\u00f3n. [Unit] Description=Checking if NFS is working After=network.target Por ejemplo, aqu\u00ed decimos que se arranque este servicio despu\u00e9s de que el network.target se haya completado, que quiere decir, cuando la red est\u00e9 lista, arranca este servicio. Nota Los targets vienen siendo un s\u00edmil a los runlevels. [Service] Type=simple User=root ExecStart=/admin/bin/check_nfs_working.sh Restart=on-failure Definimos la informaci\u00f3n del servicio, \u00bfC\u00f3mo debe ejecutarse? \u00bfQu\u00e9 tiene que hacer? \u00bfQu\u00e9 ocurre si se reinicia? \u00bfSe crean hilos o subprocesos? [Install] WantedBy=multi-user.target Definimos en qu\u00e9 runlevel debe arrancar este servicio. Elaborando el script que comprueba el servicio nfs /admin/bin/check_nfs_working.sh #!/bin/bash while : do checkProcess=$(systemctl status nfs |grep Active |awk '{print $2}') if [ \"${checkProcess}\" == \"active\" ] then echo \"El proceso est\u00e1 funcionando correctamente.\" else systemctl restart nfs echo \"El proceso no est\u00e1 funcionando correctamente.\" fi sleep 5 done Este script permite comprobar si el servicio nfs est\u00e1 funcionando, si lo est\u00e1 vuelca en un archivo de log que existe y est\u00e1 funcionando (para revisiones futuras). En caso de que no exista el archivo, se reiniciar\u00e1 todo el servicio. Esta comprobaci\u00f3n es infinita, es importante que el bucle sea infinito pero que contenga un sleep para que no sature los recursos del sistema. Con el sleep definimos el tiempo (en segundos) que queremos que se compruebe. \u00a1No olvides asignarle permisos de ejecuci\u00f3n! Arrancando el servicio sudo systemctl start_nfs_working Consultando el servicio sudo systemctl status checking_nfs_working.service \u25cf check_nfs_working.service - Checking if daemon is working Loaded: loaded (/etc/systemd/system/check_nfs_working.service; disabled; vendor preset: disabled) Active: active (running) since Fri 2019-10-04 11:19:02 CEST; 1s ago Main PID: 24600 (check_nfs_worki) CGroup: /system.slice/check_nfs_working.service \u251c\u250024600 /bin/bash /admin/bin/check_nfs_working.sh \u2514\u250024605 sleep 5 Oct 04 11:19:02 server systemd[1]: Started Checking if daemon is working. Oct 04 11:19:02 server check_nfs_working.sh[24600]: El proceso est\u00e1 funcionando correctamente. Parando el servicio sudo systemctl stop check_nfs_working.service Habilitando el servicio en el arranque sudo systemctl enable check_nfs_working.service Comprobando si est\u00e1 habilitado al arranque sudo systemctl is-enabled check_nfs_working.service disabled Nota Si los comparamos con el servicio, veremos que coinciden. Desactivando el servicio al arranque sudo systemctl disable check_nfs_working.service Fuentes Creating systemd service files Debian Wiki LSB Init Scripts Linux Write Sys V init to start stop service","title":"Diferencias entre gestores de servicios"},{"location":"sistemas/linux/systemd/diferencias-entre-gestores-de-servicios/#diferencias-entre-gestores-de-servicios","text":"","title":"Diferencias entre gestores de servicios"},{"location":"sistemas/linux/systemd/diferencias-entre-gestores-de-servicios/#introduccion","text":"Red Hat 6 y 7 tienen gestores de servicio diferentes. La versi\u00f3n 6 utiliza Upstart, sin embargo, el equipo de Red Hat lo implement\u00f3 como reemplazo de SysVinit por su modo de arranque que es m\u00e1s c\u00f3modo y m\u00e1s moderno, no obstante, ellos utilizan para todo el sistema scripts de SysVinit por su compatibilidad con Upstart. En Red Hat 7, utilizan el gestor de servicios de systemd, este gestor de servicios es una s\u00edntesis de todos los gestores que hab\u00edan en el ecosistema UNIX incluyendo el de OS X, y Lennart Poettering, voluntario del proyecto Fedora elabor\u00f3 un gestor de servicios con cada una de las ideas de cada gestor (SysVinit, Upstart, runit, rc.d\u2026). Este soportaba paralelizaci\u00f3n de procesos en el arranque acelerando las cargas del sistema operativo, tambi\u00e9n permite una mayor escritura en logs porque no usa texto si no, binarios. Hoy en d\u00eda, es el gestor de servicios est\u00e1ndar despu\u00e9s de que los dem\u00e1s proyectos comunitarios como OpenSUSE, ArchLinux, el proyecto Debian y por consiguiente Ubuntu lo hubiesen adoptado por defecto.","title":"Introducci\u00f3n"},{"location":"sistemas/linux/systemd/diferencias-entre-gestores-de-servicios/#breves-diferencias-a-nivel-de-servicios","text":"","title":"Breves diferencias a nivel de servicios"},{"location":"sistemas/linux/systemd/diferencias-entre-gestores-de-servicios/#sysvinit","text":"Directorio de scripts de arranque: /etc/init.d Los logs son espec\u00edficos de cada servicio, por lo general se almacenan en /var/log/ (el texto es m\u00e1s dif\u00edcil de procesar a nivel de servicio) No existe paralelizaci\u00f3n al arranque/parada de servicios La elaboraci\u00f3n de servicios es m\u00e1s enrrebesada y compleja de mantener, las funciones de arranque, parada, reinicio o consulta del servicio est\u00e1n definidos como funciones dentro del script del servicio.","title":"SysVinit"},{"location":"sistemas/linux/systemd/diferencias-entre-gestores-de-servicios/#elaborando-servicios-para-sysvinit-rhel6","text":"Vamos a elaborar un ejemplo de servicio que monitorice el servicio nfs y que lo reinicie en caso de que est\u00e9 ca\u00eddo. Para ello, verificamos si el archivo /var/lock/subsys/nfs existe, si no existe, reiniciaremos el servicio.","title":"Elaborando servicios para SysVinit (RHEL6)"},{"location":"sistemas/linux/systemd/diferencias-entre-gestores-de-servicios/#creando-el-servicio-o-demonio-etcinitdcheck_nfs_working","text":"#!/bin/bash # # checking_nfs Check NFS is working on system # # chkconfig: 2345 12 88 # description: System would be check if NFS service is loaded ### BEGIN INIT INFO # Provides: $checking_nfs # Required-Start: $local_fs # Required-Stop: $local_fs # Default-Start: 2 3 4 5 # Default-Stop: 0 1 6 # Short-Description: System would be check if NFS service is loaded # Description: System would be check if NFS service is loaded ### END INIT INFO # Source function library. . /etc/init.d/functions prog=checking_nfs script=/admin/bin/checking_nfs lockfile=/var/lock/subsys/$prog start() { echo -n \"Starting NFS is working: \" ${script} & touch /var/lock/subsys/checking_nfs success $\"Checking NFS is started\" echo } stop() { echo -n \"Stopping NFS is working: \" killproc checking_nfs rm -f /var/lock/subsys/checking_nfs echo } restart() { stop start } case \"$1\" in start) start ;; stop) stop ;; restart) restart ;; reload) exit 3 ;; force-reload) restart ;; status) status checking_nfs ;; condrestart|try-restart) rhstatus >/dev/null 2>&1 || exit 0 restart ;; *) echo $\"Usage: $0 {start|stop|restart|condrestart|try-restart|reload|force-reload|status}\" exit 3 esac exit $? El contenido de arriba ser\u00eda todo lo que necesitar\u00edamos para elaborar el objetivo que tenemos, vamos a explicar un poco qu\u00e9 es cada parte: #!/bin/bash Declaramos el BashGang para que, al leer el script lo interprete con la Shell Bash y no con otra como SH, KSH, Fish\u2026etc # # checking_nfs Check NFS is working on system # # chkconfig: 2345 12 88 # description: System would be check if NFS service is loaded Definimos algunos datos necesarios para que podamos identificar que hace este servicio, tambi\u00e9n es importante incluir esta cabecera porque si no no se podr\u00e1 configurar al arranque del inicio del sistema operativo. Si nos fijamos en el comando chkconfig, tenemos 3 argumentos con solo n\u00fameros enteros, lo explicamos: 2345 \u2013 Se refiere a los runlevels en el que el servicio se habilitar\u00e1 por defecto. 12 \u2013 Es la prioridad para que arranque, si el valor es muy bajo tendr\u00e1 una prioridad m\u00e1s alta para que se arranque en el inicio del sistema. 88 \u2013 Es la prioridad para que se detenga el servicio, si el valor es muy bajo tendr\u00e1 una prioridad m\u00e1s alta para que se detenga en el apagado del sistema. ### BEGIN INIT INFO # Provides: $checking_nfs # Required-Start: $local_fs # Required-Stop: $local_fs # Default-Start: 2 3 4 5 # Default-Stop: 0 1 6 # Short-Description: System would be check if NFS service is loaded # Description: System would be check if NFS service is loaded ### END INIT INFO Este bloque, es la parte de Linux Standard Base, se definen las dependencias necesarias para el arranque o inicio del servicio incluyendo informaci\u00f3n adicional, incluyendo los runlevels de ejecuci\u00f3n y de parada. # Source function library. . /etc/init.d/functions Permite cargar funciones adicionales como daemon , killproc \u2026 que se pueden utilizar en otros scripts, sin embargo, principalmente utilizaremos killproc . prog=checking_nfs script=/admin/bin/checking_nfs lockfile=/var/lock/subsys/$prog Definimos como se llama el programa, d\u00f3nde est\u00e1 ubicado el script, y el archivo que se bloquear\u00e1 para que no haya una ejecuci\u00f3n descontrolada del servicio (se ejecuten 2,3, 4 a la vez) start() { echo -n \"Starting NFS is working: \" ${script} & touch /var/lock/subsys/checking_nfs success $\"Checking NFS is started\" echo } stop() { echo -n \"Stopping NFS is working: \" killproc checking_nfs rm -f /var/lock/subsys/checking_nfs echo } restart() { stop start } Definimos las funciones que har\u00e1 nuestro servicio, por lo general son los comandos que ejecutaremos para que funcione en s\u00ed el servicio. case \"$1\" in start) start ;; stop) stop ;; restart) restart ;; reload) exit 3 ;; force-reload) restart ;; status) status checking_nfs ;; condrestart|try-restart) rhstatus >/dev/null 2>&1 || exit 0 restart ;; *) echo $\"Usage: $0 {start|stop|restart|condrestart|try-restart|reload|force-reload|status}\" exit 3 esac exit $? Este switch funciona cuando ejecutemos el comando service check_nfs_working start|status|restart , el par\u00e1metro recibido. :code: \u00a1No olvides asignarle permisos de ejecuci\u00f3n! Elaborando el script que comprueba el servicio nfs #!/bin/bash while : do if [ -f /var/lock/subsys/nfs ] then echo \"El servicio NFS est\u00e1 funcionando\" >> /var/log/checking_nfs else echo \"Ha fallado el servicio NFS, se va a reiniciar\" >> /var/log/checking_nfs service nfs restart fi sleep 5 done Este script permite comprobar si el fichero que genera el servicio de nfs est\u00e1 creado, si lo est\u00e1 vuelca en un archivo de log que existe y est\u00e1 funcionando (para revisiones futuras). En caso de que no exista el archivo, se reiniciar\u00e1 todo el servicio. Esta comprobaci\u00f3n es infinita, es importante que el bucle sea infinito pero que contenga un :code: sleep para que no sature los recursos del sistema. Con el sleep definimos el tiempo (en segundos) que queremos que se compruebe. \u00a1No olvides asignarle permisos de ejecuci\u00f3n!","title":"Creando el servicio (o demonio) /etc/init.d/check_nfs_working"},{"location":"sistemas/linux/systemd/diferencias-entre-gestores-de-servicios/#arrancando-el-servicio","text":"sudo service check_nfs_working start Starting NFS is working: [ OK ]","title":"Arrancando el servicio"},{"location":"sistemas/linux/systemd/diferencias-entre-gestores-de-servicios/#consultando-el-servicio","text":"sudo service check_nfs_working status checking_nfs (pid 9599 7158) is running...","title":"Consultando el servicio"},{"location":"sistemas/linux/systemd/diferencias-entre-gestores-de-servicios/#parando-el-servicio","text":"sudo service check_nfs_working stop Stopping NFS is working: [ OK ]","title":"Parando el servicio"},{"location":"sistemas/linux/systemd/diferencias-entre-gestores-de-servicios/#habilitando-el-servicio-en-el-arranque","text":"sudo chkconfig check_nfs_working on","title":"Habilitando el servicio en el arranque"},{"location":"sistemas/linux/systemd/diferencias-entre-gestores-de-servicios/#comprobando-que-los-runlevels-son-los-que-hemos-configurado-en-el-servicio-o-demonio","text":"sudo chkconfig --list check_nfs_working check_nfs_working 0:off 1:off 2:on 3:on 4:on 5:on 6:off Nota Si los comparamos con el servicio, veremos que coinciden.","title":"Comprobando que los runlevels son los que hemos configurado en el servicio (o demonio)"},{"location":"sistemas/linux/systemd/diferencias-entre-gestores-de-servicios/#desactivando-el-servicio-al-arranque","text":"sudo chkconfig check_nfs_working off","title":"Desactivando el servicio al arranque"},{"location":"sistemas/linux/systemd/diferencias-entre-gestores-de-servicios/#systemd","text":"Directorio de servicios locales: /etc/systemd/ Directorio de servicios espec\u00edficos por RPM instalados: /usr/lib/systemd Los logs se leen mediante journalctl , el resultado o salida de la ejecuci\u00f3n de los servicios se almacenan en formato binario (m\u00e1s r\u00e1pidez de lectura/escritura) Existe paralelizaci\u00f3n al arranque/parada de servicios disminuyendo el tiempo de encendido/apagado Elaborar un servicio es m\u00e1s f\u00e1cil, no hay que definir los bloques de start , stop , restart , status como en SysVinit facilitando m\u00e1s la r\u00e1pidez y legibilidad cuando se crea un servicio.","title":"Systemd"},{"location":"sistemas/linux/systemd/diferencias-entre-gestores-de-servicios/#elaborando-un-servicio-no-demonio-para-systemd-rhel7","text":"En systemd el concepto de demonio (daemon) se pierde, no se menciona, solo se comenta el uso de servicio.","title":"Elaborando un servicio (no demonio) para systemd (RHEL7)"},{"location":"sistemas/linux/systemd/diferencias-entre-gestores-de-servicios/#creando-el-servicio-etcsystemdsystemcheck_nfs_workingservice","text":"[Unit] Description=Checking if NFS is working After=network.target [Service] Type=simple User=root ExecStart=/admin/bin/check_nfs_working.sh Restart=on-failure [Install] WantedBy=multi-user.target Como ves, la diferencia est\u00e1 muy clara. Vamos a explicar este bloque declarativo. En systemd , los Units pueden contener servicios abstractos, recursos de red, dispositivos, sistemas de archivos montados, y recursos aislados, por lo que es m\u00e1s que una definici\u00f3n. [Unit] Description=Checking if NFS is working After=network.target Por ejemplo, aqu\u00ed decimos que se arranque este servicio despu\u00e9s de que el network.target se haya completado, que quiere decir, cuando la red est\u00e9 lista, arranca este servicio. Nota Los targets vienen siendo un s\u00edmil a los runlevels. [Service] Type=simple User=root ExecStart=/admin/bin/check_nfs_working.sh Restart=on-failure Definimos la informaci\u00f3n del servicio, \u00bfC\u00f3mo debe ejecutarse? \u00bfQu\u00e9 tiene que hacer? \u00bfQu\u00e9 ocurre si se reinicia? \u00bfSe crean hilos o subprocesos? [Install] WantedBy=multi-user.target Definimos en qu\u00e9 runlevel debe arrancar este servicio.","title":"Creando el servicio /etc/systemd/system/check_nfs_working.service"},{"location":"sistemas/linux/systemd/diferencias-entre-gestores-de-servicios/#elaborando-el-script-que-comprueba-el-servicio-nfs-adminbincheck_nfs_workingsh","text":"#!/bin/bash while : do checkProcess=$(systemctl status nfs |grep Active |awk '{print $2}') if [ \"${checkProcess}\" == \"active\" ] then echo \"El proceso est\u00e1 funcionando correctamente.\" else systemctl restart nfs echo \"El proceso no est\u00e1 funcionando correctamente.\" fi sleep 5 done Este script permite comprobar si el servicio nfs est\u00e1 funcionando, si lo est\u00e1 vuelca en un archivo de log que existe y est\u00e1 funcionando (para revisiones futuras). En caso de que no exista el archivo, se reiniciar\u00e1 todo el servicio. Esta comprobaci\u00f3n es infinita, es importante que el bucle sea infinito pero que contenga un sleep para que no sature los recursos del sistema. Con el sleep definimos el tiempo (en segundos) que queremos que se compruebe. \u00a1No olvides asignarle permisos de ejecuci\u00f3n!","title":"Elaborando el script que comprueba el servicio nfs /admin/bin/check_nfs_working.sh"},{"location":"sistemas/linux/systemd/diferencias-entre-gestores-de-servicios/#arrancando-el-servicio_1","text":"sudo systemctl start_nfs_working","title":"Arrancando el servicio"},{"location":"sistemas/linux/systemd/diferencias-entre-gestores-de-servicios/#consultando-el-servicio_1","text":"sudo systemctl status checking_nfs_working.service \u25cf check_nfs_working.service - Checking if daemon is working Loaded: loaded (/etc/systemd/system/check_nfs_working.service; disabled; vendor preset: disabled) Active: active (running) since Fri 2019-10-04 11:19:02 CEST; 1s ago Main PID: 24600 (check_nfs_worki) CGroup: /system.slice/check_nfs_working.service \u251c\u250024600 /bin/bash /admin/bin/check_nfs_working.sh \u2514\u250024605 sleep 5 Oct 04 11:19:02 server systemd[1]: Started Checking if daemon is working. Oct 04 11:19:02 server check_nfs_working.sh[24600]: El proceso est\u00e1 funcionando correctamente.","title":"Consultando el servicio"},{"location":"sistemas/linux/systemd/diferencias-entre-gestores-de-servicios/#parando-el-servicio_1","text":"sudo systemctl stop check_nfs_working.service","title":"Parando el servicio"},{"location":"sistemas/linux/systemd/diferencias-entre-gestores-de-servicios/#habilitando-el-servicio-en-el-arranque_1","text":"sudo systemctl enable check_nfs_working.service","title":"Habilitando el servicio en el arranque"},{"location":"sistemas/linux/systemd/diferencias-entre-gestores-de-servicios/#comprobando-si-esta-habilitado-al-arranque","text":"sudo systemctl is-enabled check_nfs_working.service disabled Nota Si los comparamos con el servicio, veremos que coinciden.","title":"Comprobando si est\u00e1 habilitado al arranque"},{"location":"sistemas/linux/systemd/diferencias-entre-gestores-de-servicios/#desactivando-el-servicio-al-arranque_1","text":"sudo systemctl disable check_nfs_working.service","title":"Desactivando el servicio al arranque"},{"location":"sistemas/linux/systemd/diferencias-entre-gestores-de-servicios/#fuentes","text":"Creating systemd service files Debian Wiki LSB Init Scripts Linux Write Sys V init to start stop service","title":"Fuentes"}]}